
411_OneWire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000128c  0800a878  0800a878  0001a878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb04  0800bb04  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb04  0800bb04  0001bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb0c  0800bb0c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb0c  0800bb0c  0001bb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb10  0800bb10  0001bb10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800bb14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000204  0800bd18  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007dc  0800bd18  000207dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001434d  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002968  00000000  00000000  00034581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00036ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  00038148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019677  00000000  00000000  000392b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001612e  00000000  00000000  00052927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e44f  00000000  00000000  00068a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106ea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006424  00000000  00000000  00106ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a860 	.word	0x0800a860

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800a860 	.word	0x0800a860

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800103a:	b29b      	uxth	r3, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	605a      	str	r2, [r3, #4]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <usart_setup+0x60>)
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <usart_setup+0x64>)
 8001078:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <usart_setup+0x60>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <usart_setup+0x60>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <usart_setup+0x60>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <usart_setup+0x60>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <usart_setup+0x60>)
 8001094:	220c      	movs	r2, #12
 8001096:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <usart_setup+0x60>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <usart_setup+0x60>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <usart_setup+0x60>)
 80010a6:	f004 f81d 	bl	80050e4 <HAL_HalfDuplex_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d000      	beq.n	80010b2 <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80010b0:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <usart_setup+0x60>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <usart_setup+0x60>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0220 	orr.w	r2, r2, #32
 80010c0:	60da      	str	r2, [r3, #12]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000358 	.word	0x20000358
 80010d0:	40004400 	.word	0x40004400

080010d4 <owInit>:

void owInit(OneWire *ow) {
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80010e4:	e015      	b.n	8001112 <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
    k=0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 80010f4:	e007      	b.n	8001106 <owInit+0x32>
    r[k] = 0;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	3301      	adds	r3, #1
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2b07      	cmp	r3, #7
 800110a:	ddf4      	ble.n	80010f6 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	dde6      	ble.n	80010e6 <owInit+0x12>
  }
  k=0;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 800111c:	e008      	b.n	8001130 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4413      	add	r3, r2
 8001124:	330c      	adds	r3, #12
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	3301      	adds	r3, #1
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b07      	cmp	r3, #7
 8001134:	ddf3      	ble.n	800111e <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2240      	movs	r2, #64	; 0x40
 800113a:	609a      	str	r2, [r3, #8]

}
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <owReadHandler>:

void owReadHandler() { //USART interrupt handler
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 800114e:	f000 f850 	bl	80011f2 <getUsartIndex>
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  /* We check that we caused an interrupt due to RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <owReadHandler+0x70>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	2b00      	cmp	r3, #0
 8001160:	d025      	beq.n	80011ae <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <owReadHandler+0x70>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01f      	beq.n	80011ae <owReadHandler+0x66>

    /* We receive data from the periphery and reset the flag*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 800116e:	bf00      	nop
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <owReadHandler+0x70>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f9      	beq.n	8001170 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 800117c:	79fc      	ldrb	r4, [r7, #7]
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <owReadHandler+0x70>)
 8001180:	f7ff ff52 	bl	8001028 <USART_ReceiveData>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <owReadHandler+0x74>)
 800118a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//reset flag response received after
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2201      	movs	r2, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	b25b      	sxtb	r3, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	b25a      	sxtb	r2, r3
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <owReadHandler+0x78>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <owReadHandler+0x78>)
 80011ac:	701a      	strb	r2, [r3, #0]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40004400 	.word	0x40004400
 80011bc:	20000224 	.word	0x20000224
 80011c0:	20000220 	.word	0x20000220

080011c4 <owResetCmd>:
 *
 * @param N usart -- chosen to implement 1wire usart
 * @return Returns 1 if there is someone on the bus and 0 otherwise
 */

  uint16_t owResetCmd() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 80011ca:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80011ce:	f7ff ff4d 	bl	800106c <usart_setup>

  owSend(0xF0); // Send RESET send a reset pulse
 80011d2:	20f0      	movs	r0, #240	; 0xf0
 80011d4:	f000 f816 	bl	8001204 <owSend>
  owPresence = owEchoRead(); // We are waiting for PRESENCE on the bus and return what is
 80011d8:	f000 f854 	bl	8001284 <owEchoRead>
 80011dc:	4603      	mov	r3, r0
 80011de:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// reconfigure UART speed
 80011e0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80011e4:	f7ff ff42 	bl	800106c <usart_setup>
  return owPresence;
 80011e8:	88fb      	ldrh	r3, [r7, #6]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <getUsartIndex>:

uint8_t getUsartIndex() {// looks at the UART number with which work will go
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <owSend>:

void owSend(uint16_t data) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//set the flag if we get into the interrupt handler there it will be reset
 800120e:	f7ff fff0 	bl	80011f2 <getUsartIndex>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	2301      	movs	r3, #1
 8001218:	4093      	lsls	r3, r2
 800121a:	b25a      	sxtb	r2, r3
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <owSend+0x50>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	b25b      	sxtb	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b25b      	sxtb	r3, r3
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <owSend+0x50>)
 800122c:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//send data
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	4619      	mov	r1, r3
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <owSend+0x54>)
 8001234:	f7ff ff08 	bl	8001048 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//waiting for the transfer to end
 8001238:	bf00      	nop
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <owSend+0x58>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001244:	2b40      	cmp	r3, #64	; 0x40
 8001246:	d1f8      	bne.n	800123a <owSend+0x36>
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000220 	.word	0x20000220
 8001258:	40004400 	.word	0x40004400
 800125c:	20000358 	.word	0x20000358

08001260 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//we read we got a one or zero in response
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //if 0xFF came, then bit = 1, something else bit = 0
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	2bff      	cmp	r3, #255	; 0xff
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <owEchoRead>:

uint16_t owEchoRead() {//
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//get USART number
 800128a:	f7ff ffb2 	bl	80011f2 <getUsartIndex>
 800128e:	4603      	mov	r3, r0
 8001290:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// wait until someone answers but no more pause
 8001298:	bf00      	nop
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <owEchoRead+0x48>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	797b      	ldrb	r3, [r7, #5]
 80012a4:	fa42 f303 	asr.w	r3, r2, r3
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <owEchoRead+0x36>
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	80fa      	strh	r2, [r7, #6]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1ef      	bne.n	800129a <owEchoRead+0x16>
  return rc_buffer[i];//depending on the UART number used
 80012ba:	797b      	ldrb	r3, [r7, #5]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <owEchoRead+0x4c>)
 80012be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c2:	b29b      	uxth	r3, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000220 	.word	0x20000220
 80012d0:	20000224 	.word	0x20000224

080012d4 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//decompose 1 byte into 8 bytes, encode so to speak in a package for 1wire
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e014      	b.n	8001310 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//if current bit in byte ==1 then
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <byteToBits+0x24>
      *bits = WIRE_1; //replace with a number which, when transmitted via UART for 1 wire, will be unity t.e 0xFF
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e002      	b.n	80012fe <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// same for 0
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //shift the processed bit
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	085b      	lsrs	r3, r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3301      	adds	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b07      	cmp	r3, #7
 8001314:	d9e7      	bls.n	80012e6 <byteToBits+0x12>
  }
  return bits; //return an array to pass
 8001316:	683b      	ldr	r3, [r7, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <owSendByte>:
/**
 * The method sends sequentially 8 bytes, one for each bit in data
 * @param usart -- selected for 1wire UART emulation
 * @param d -- data
 */
void owSendByte(uint8_t d) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//convert bytes to bits "byte array for UART transmission and 1WIRE emulation"
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ffcc 	bl	80012d4 <byteToBits>
  for (i = 0; i < 8; ++i) {
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e00b      	b.n	800135a <owSendByte+0x36>
    owSend(data[i]);
 8001342:	f107 020c 	add.w	r2, r7, #12
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff58 	bl	8001204 <owSend>
  for (i = 0; i < 8; ++i) {
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b07      	cmp	r3, #7
 800135e:	ddf0      	ble.n	8001342 <owSendByte+0x1e>
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <owCRC>:
  }
  return target_byte; //return the received byte
}

/* CRC8 count of array mas of length Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	733b      	strb	r3, [r7, #12]
  crc = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // bit count in byte
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e018      	b.n	80013c0 <owCRC+0x56>
      fb = crc ^ dat;
 800138e:	7b7a      	ldrb	r2, [r7, #13]
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	4053      	eors	r3, r2
 8001394:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8001396:	7afb      	ldrb	r3, [r7, #11]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // polynomial
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d104      	bne.n	80013ba <owCRC+0x50>
 80013b0:	7b7b      	ldrb	r3, [r7, #13]
 80013b2:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80013b6:	43db      	mvns	r3, r3
 80013b8:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // bit count in byte
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	3301      	adds	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d9e3      	bls.n	800138e <owCRC+0x24>
    }
    st_byt++;
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // byte count in array
 80013cc:	7b3a      	ldrb	r2, [r7, #12]
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3d4      	bcc.n	800137e <owCRC+0x14>
  return crc;
 80013d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 80013ea:	2107      	movs	r1, #7
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ffbc 	bl	800136a <owCRC>
 80013f2:	4603      	mov	r3, r0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * convert to callback functions to respond to errors
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //is there anyone on the bus
 8001414:	f7ff fed6 	bl	80011c4 <owResetCmd>
 8001418:	4603      	mov	r3, r0
 800141a:	2bf0      	cmp	r3, #240	; 0xf0
 800141c:	d101      	bne.n	8001422 <hasNextRom+0x26>
    return 0;
 800141e:	2300      	movs	r3, #0
 8001420:	e097      	b.n	8001552 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8001422:	20f0      	movs	r0, #240	; 0xf0
 8001424:	f7ff ff7e 	bl	8001324 <owSendByte>
  do {
		uint8_t answerBit =0;
 8001428:	2300      	movs	r3, #0
 800142a:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 800142c:	7ffb      	ldrb	r3, [r7, #31]
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // read direct bit
 8001440:	20ff      	movs	r0, #255	; 0xff
 8001442:	f7ff fedf 	bl	8001204 <owSend>
    cB = owReadSlot(owEchoRead());//response from the sensor
 8001446:	f7ff ff1d 	bl	8001284 <owEchoRead>
 800144a:	4603      	mov	r3, r0
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff07 	bl	8001260 <owReadSlot>
 8001452:	4603      	mov	r3, r0
 8001454:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // read inverted bit
 8001456:	20ff      	movs	r0, #255	; 0xff
 8001458:	f7ff fed4 	bl	8001204 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//response from the sensor
 800145c:	f7ff ff12 	bl	8001284 <owEchoRead>
 8001460:	4603      	mov	r3, r0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fefc 	bl	8001260 <owReadSlot>
 8001468:	4603      	mov	r3, r0
 800146a:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//compare two answers
 800146c:	7afa      	ldrb	r2, [r7, #11]
 800146e:	7abb      	ldrb	r3, [r7, #10]
 8001470:	429a      	cmp	r2, r3
 8001472:	d105      	bne.n	8001480 <hasNextRom+0x84>
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d102      	bne.n	8001480 <hasNextRom+0x84>
      return -1;//error nobody answered
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e068      	b.n	8001552 <hasNextRom+0x156>
    if (cB != cmp_cB) { //normal situation came either 10 or 01
 8001480:	7afa      	ldrb	r2, [r7, #11]
 8001482:	7abb      	ldrb	r3, [r7, #10]
 8001484:	429a      	cmp	r2, r3
 8001486:	d002      	beq.n	800148e <hasNextRom+0x92>
      searchDirection = cB;//choose in which direction we will move further
 8001488:	7afb      	ldrb	r3, [r7, #11]
 800148a:	75bb      	strb	r3, [r7, #22]
 800148c:	e023      	b.n	80014d6 <hasNextRom+0xda>
			} else {//collision came 00 i.e. the current bit for ROMs is different
				if (ui32BitNumber == ow->lastDiscrepancy)//if the current position of the collision is equal to the previous one
 800148e:	7ffa      	ldrb	r2, [r7, #31]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	d102      	bne.n	800149e <hasNextRom+0xa2>
        searchDirection = 1;//choose in which direction we will move further
 8001498:	2301      	movs	r3, #1
 800149a:	75bb      	strb	r3, [r7, #22]
 800149c:	e01b      	b.n	80014d6 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//if we sewed on
 800149e:	7ffa      	ldrb	r2, [r7, #31]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dd02      	ble.n	80014ae <hasNextRom+0xb2>
          searchDirection = 0;//choose in which direction we will move further
 80014a8:	2300      	movs	r3, #0
 80014aa:	75bb      	strb	r3, [r7, #22]
 80014ac:	e00e      	b.n	80014cc <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4413      	add	r3, r2
 80014b4:	330c      	adds	r3, #12
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	fa42 f303 	asr.w	r3, r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80014cc:	7dbb      	ldrb	r3, [r7, #22]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//remember the fork
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	61bb      	str	r3, [r7, #24]
      }
    }
    // save the beat
    if (searchDirection)
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00e      	beq.n	80014fa <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//set a bit in the current byte byte
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	2101      	movs	r1, #1
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// decide who to turn off
 80014fa:	7dbb      	ldrb	r3, [r7, #22]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <hasNextRom+0x108>
 8001500:	2300      	movs	r3, #0
 8001502:	e000      	b.n	8001506 <hasNextRom+0x10a>
 8001504:	23ff      	movs	r3, #255	; 0xff
 8001506:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//we cut down the "interfering" devices
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe79 	bl	8001204 <owSend>
    ui32BitNumber++;//looking for the next beat
 8001512:	7ffb      	ldrb	r3, [r7, #31]
 8001514:	3301      	adds	r3, #1
 8001516:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//until the whole ROM is found all bits
 8001518:	7ffb      	ldrb	r3, [r7, #31]
 800151a:	2b3f      	cmp	r3, #63	; 0x3f
 800151c:	d984      	bls.n	8001428 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//remember the fork
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 8001524:	e00b      	b.n	800153e <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//remember last rom
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	441a      	add	r2, r3
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	7811      	ldrb	r1, [r2, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	460a      	mov	r2, r1
 8001536:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	3301      	adds	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	2b06      	cmp	r3, #6
 8001542:	d9f0      	bls.n	8001526 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfcc      	ite	gt
 800154c:	2301      	movgt	r3, #1
 800154e:	2300      	movle	r3, #0
 8001550:	b2db      	uxtb	r3, r3
}
 8001552:	4618      	mov	r0, r3
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <owSearchCmd>:

// Returns the number of devices on the bus, or an error code if the value is less than 0
int owSearchCmd(OneWire *ow) {
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fdb4 	bl	80010d4 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //we pass a pointer to the structure where to put the next.ROM
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff40 	bl	80013fc <hasNextRom>
 800157c:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <owSearchCmd+0x30>
      return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	e009      	b.n	800159e <owSearchCmd+0x44>
    device++;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//we are looking for while someone is there and these someone is no more define
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <owSearchCmd+0x42>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	dde7      	ble.n	800156c <owSearchCmd+0x12>
		return device;//return the serial number of the sensor (device) on the bus
 800159c:	68fb      	ldr	r3, [r7, #12]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80015ae:	f7ff fe09 	bl	80011c4 <owResetCmd>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2bf0      	cmp	r3, #240	; 0xf0
 80015b6:	d079      	beq.n	80016ac <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // get the ROMid in the bus or return an error code
 80015b8:	484e      	ldr	r0, [pc, #312]	; (80016f4 <get_ROMid+0x14c>)
 80015ba:	f7ff ffce 	bl	800155a <owSearchCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <get_ROMid+0x150>)
 80015c4:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80015c6:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <get_ROMid+0x150>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d113      	bne.n	80015f6 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <get_ROMid+0x154>)
 80015d0:	4a4b      	ldr	r2, [pc, #300]	; (8001700 <get_ROMid+0x158>)
 80015d2:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <get_ROMid+0x15c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e005      	b.n	80015e8 <get_ROMid+0x40>
					__asm__("nop");
 80015dc:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80015de:	4b49      	ldr	r3, [pc, #292]	; (8001704 <get_ROMid+0x15c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a47      	ldr	r2, [pc, #284]	; (8001704 <get_ROMid+0x15c>)
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b46      	ldr	r3, [pc, #280]	; (8001704 <get_ROMid+0x15c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <get_ROMid+0x154>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3f3      	bcc.n	80015dc <get_ROMid+0x34>
				pDelay = 1000000;
 80015f4:	e7eb      	b.n	80015ce <get_ROMid+0x26>
			}

		}
		i = 0;
 80015f6:	4b43      	ldr	r3, [pc, #268]	; (8001704 <get_ROMid+0x15c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//console output all found ROMs
 80015fc:	e04f      	b.n	800169e <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <get_ROMid+0x15c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <get_ROMid+0x14c>)
 8001606:	4413      	add	r3, r2
 8001608:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fee9 	bl	80013e2 <owCRC8>
 8001610:	4603      	mov	r3, r0
 8001612:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	79db      	ldrb	r3, [r3, #7]
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	429a      	cmp	r2, r3
 800161c:	d101      	bne.n	8001622 <get_ROMid+0x7a>
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <get_ROMid+0x160>)
 8001620:	e000      	b.n	8001624 <get_ROMid+0x7c>
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <get_ROMid+0x164>)
 8001624:	4a3a      	ldr	r2, [pc, #232]	; (8001710 <get_ROMid+0x168>)
 8001626:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <get_ROMid+0x15c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <get_ROMid+0x16c>)
 8001630:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461e      	mov	r6, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	799b      	ldrb	r3, [r3, #6]
 800163c:	469c      	mov	ip, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	795b      	ldrb	r3, [r3, #5]
 8001642:	461a      	mov	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	791b      	ldrb	r3, [r3, #4]
 8001648:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800164e:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001654:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800165a:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001660:	9305      	str	r3, [sp, #20]
 8001662:	9504      	str	r5, [sp, #16]
 8001664:	9403      	str	r4, [sp, #12]
 8001666:	9002      	str	r0, [sp, #8]
 8001668:	9101      	str	r1, [sp, #4]
 800166a:	9200      	str	r2, [sp, #0]
 800166c:	4663      	mov	r3, ip
 800166e:	4632      	mov	r2, r6
 8001670:	4929      	ldr	r1, [pc, #164]	; (8001718 <get_ROMid+0x170>)
 8001672:	482a      	ldr	r0, [pc, #168]	; (800171c <get_ROMid+0x174>)
 8001674:	f005 fb04 	bl	8006c80 <siprintf>

			if (crc != r->crc) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	79db      	ldrb	r3, [r3, #7]
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	429a      	cmp	r2, r3
 8001680:	d008      	beq.n	8001694 <get_ROMid+0xec>
				devInfo.device = i;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <get_ROMid+0x15c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <get_ROMid+0x16c>)
 800168a:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 800168c:	4924      	ldr	r1, [pc, #144]	; (8001720 <get_ROMid+0x178>)
 800168e:	4823      	ldr	r0, [pc, #140]	; (800171c <get_ROMid+0x174>)
 8001690:	f005 faf6 	bl	8006c80 <siprintf>
		for (; i < devices; i++) {//console output all found ROMs
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <get_ROMid+0x15c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <get_ROMid+0x15c>)
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <get_ROMid+0x150>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <get_ROMid+0x15c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8a8      	bhi.n	80015fe <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <get_ROMid+0x154>)
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <get_ROMid+0x158>)
 80016b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <get_ROMid+0x15c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e005      	b.n	80016c6 <get_ROMid+0x11e>
		__asm__("nop");
 80016ba:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <get_ROMid+0x15c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <get_ROMid+0x15c>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <get_ROMid+0x15c>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <get_ROMid+0x154>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3f3      	bcc.n	80016ba <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <get_ROMid+0x168>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	490c      	ldr	r1, [pc, #48]	; (8001708 <get_ROMid+0x160>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fd81 	bl	80001e0 <strcmp>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <get_ROMid+0x140>
 80016e4:	2300      	movs	r3, #0
 80016e6:	e001      	b.n	80016ec <get_ROMid+0x144>
	else return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	20000258 	.word	0x20000258
 80016f8:	20000254 	.word	0x20000254
 80016fc:	20000000 	.word	0x20000000
 8001700:	000f4240 	.word	0x000f4240
 8001704:	2000026c 	.word	0x2000026c
 8001708:	0800a878 	.word	0x0800a878
 800170c:	0800a880 	.word	0x0800a880
 8001710:	20000270 	.word	0x20000270
 8001714:	20000230 	.word	0x20000230
 8001718:	0800a88c 	.word	0x0800a88c
 800171c:	20000234 	.word	0x20000234
 8001720:	0800a8b4 	.word	0x0800a8b4

08001724 <HAL_TIM_IC_CaptureCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern float Temp[MAXDEVICES_ON_THE_BUS];

void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim) / 2;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001736:	6013      	str	r3, [r2, #0]
	if (counter > 30000)
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001740:	4293      	cmp	r3, r2
 8001742:	d906      	bls.n	8001752 <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		__HAL_TIM_SetCounter(&htim3,0);
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
		counter=0;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
	}
	if (counter > counter_limit)
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f643 32c4 	movw	r2, #15300	; 0x3bc4
 800175a:	4293      	cmp	r3, r2
 800175c:	d90a      	bls.n	8001774 <HAL_TIM_IC_CaptureCallback+0x50>
	{
		__HAL_TIM_SetCounter(&htim3, counter_limit * 2);
 800175e:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 8001762:	005a      	lsls	r2, r3, #1
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
		counter=counter_limit;
 800176a:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 800176e:	461a      	mov	r2, r3
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001772:	601a      	str	r2, [r3, #0]
	}
	counter_position = (int16_t)counter;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b21a      	sxth	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_TIM_IC_CaptureCallback+0x70>)
 800177c:	801a      	strh	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200003a8 	.word	0x200003a8
 8001790:	20000310 	.word	0x20000310
 8001794:	200003ac 	.word	0x200003ac

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179c:	f001 f8bc 	bl	8002918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a0:	f000 f940 	bl	8001a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a4:	f000 faa4 	bl	8001cf0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017a8:	f000 f9f6 	bl	8001b98 <MX_I2C1_Init>
  MX_ADC1_Init();
 80017ac:	f000 f9a2 	bl	8001af4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80017b0:	f000 fa20 	bl	8001bf4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80017b4:	f000 fa72 	bl	8001c9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT (&htim3, TIM_CHANNEL_ALL   );
 80017b8:	213c      	movs	r1, #60	; 0x3c
 80017ba:	4889      	ldr	r0, [pc, #548]	; (80019e0 <main+0x248>)
 80017bc:	f003 f98c 	bl	8004ad8 <HAL_TIM_Encoder_Start_IT>
  /* Initialize stepper motor controller */
  HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET); // set high for half step
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c6:	4887      	ldr	r0, [pc, #540]	; (80019e4 <main+0x24c>)
 80017c8:	f002 f822 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET); // set for microstep
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d2:	4884      	ldr	r0, [pc, #528]	; (80019e4 <main+0x24c>)
 80017d4:	f002 f81c 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET); // set for microstep
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017de:	4881      	ldr	r0, [pc, #516]	; (80019e4 <main+0x24c>)
 80017e0:	f002 f816 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_SLEEP_GPIO_Port, S_SLEEP_Pin, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2101      	movs	r1, #1
 80017e8:	487e      	ldr	r0, [pc, #504]	; (80019e4 <main+0x24c>)
 80017ea:	f002 f811 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f4:	487b      	ldr	r0, [pc, #492]	; (80019e4 <main+0x24c>)
 80017f6:	f002 f80b 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2102      	movs	r1, #2
 80017fe:	4879      	ldr	r0, [pc, #484]	; (80019e4 <main+0x24c>)
 8001800:	f002 f806 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2104      	movs	r1, #4
 8001808:	4876      	ldr	r0, [pc, #472]	; (80019e4 <main+0x24c>)
 800180a:	f002 f801 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001814:	4874      	ldr	r0, [pc, #464]	; (80019e8 <main+0x250>)
 8001816:	f001 fffb 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f001 f8ee 	bl	80029fc <HAL_Delay>
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001826:	4870      	ldr	r0, [pc, #448]	; (80019e8 <main+0x250>)
 8001828:	f001 fff2 	bl	8003810 <HAL_GPIO_WritePin>

// OLED init
  SSD1306_Init(&oled);
 800182c:	486f      	ldr	r0, [pc, #444]	; (80019ec <main+0x254>)
 800182e:	f000 faff 	bl	8001e30 <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 8001832:	2100      	movs	r1, #0
 8001834:	2000      	movs	r0, #0
 8001836:	f000 fc9f 	bl	8002178 <SSD1306_GotoXY>
  SSD1306_Puts("SH1106", &Font_11x18, SSD1306_COLOR_WHITE);
 800183a:	2201      	movs	r2, #1
 800183c:	496c      	ldr	r1, [pc, #432]	; (80019f0 <main+0x258>)
 800183e:	486d      	ldr	r0, [pc, #436]	; (80019f4 <main+0x25c>)
 8001840:	f000 fd30 	bl	80022a4 <SSD1306_Puts>
  HAL_ADC_Start(&hadc1);
 8001844:	486c      	ldr	r0, [pc, #432]	; (80019f8 <main+0x260>)
 8001846:	f001 f941 	bl	8002acc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800184a:	f04f 31ff 	mov.w	r1, #4294967295
 800184e:	486a      	ldr	r0, [pc, #424]	; (80019f8 <main+0x260>)
 8001850:	f001 f9f0 	bl	8002c34 <HAL_ADC_PollForConversion>
  raw = HAL_ADC_GetValue(&hadc1);
 8001854:	4868      	ldr	r0, [pc, #416]	; (80019f8 <main+0x260>)
 8001856:	f001 fa78 	bl	8002d4a <HAL_ADC_GetValue>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <main+0x264>)
 8001860:	601a      	str	r2, [r3, #0]
  voltage = raw /  187.3 ; // Umcu = 3.375V
 8001862:	4b66      	ldr	r3, [pc, #408]	; (80019fc <main+0x264>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe74 	bl	8000554 <__aeabi_i2d>
 800186c:	a35a      	add	r3, pc, #360	; (adr r3, 80019d8 <main+0x240>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7ff f803 	bl	800087c <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f9cb 	bl	8000c18 <__aeabi_d2f>
 8001882:	4603      	mov	r3, r0
 8001884:	4a5e      	ldr	r2, [pc, #376]	; (8001a00 <main+0x268>)
 8001886:	6013      	str	r3, [r2, #0]
  sprintf(text, "%1.2f", voltage);
 8001888:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <main+0x268>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe73 	bl	8000578 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	495b      	ldr	r1, [pc, #364]	; (8001a04 <main+0x26c>)
 8001898:	485b      	ldr	r0, [pc, #364]	; (8001a08 <main+0x270>)
 800189a:	f005 f9f1 	bl	8006c80 <siprintf>
  SSD1306_GotoXY (0, 20);
 800189e:	2114      	movs	r1, #20
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 fc69 	bl	8002178 <SSD1306_GotoXY>
  SSD1306_Puts (text, &Font_11x18, 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	4951      	ldr	r1, [pc, #324]	; (80019f0 <main+0x258>)
 80018aa:	4857      	ldr	r0, [pc, #348]	; (8001a08 <main+0x270>)
 80018ac:	f000 fcfa 	bl	80022a4 <SSD1306_Puts>
  SSD1306_Puts ("V", &Font_11x18, 1);
 80018b0:	2201      	movs	r2, #1
 80018b2:	494f      	ldr	r1, [pc, #316]	; (80019f0 <main+0x258>)
 80018b4:	4855      	ldr	r0, [pc, #340]	; (8001a0c <main+0x274>)
 80018b6:	f000 fcf5 	bl	80022a4 <SSD1306_Puts>
//  SSD1306_dim(127);
  SSD1306_UpdateScreen(); // update screen
 80018ba:	f000 fbad 	bl	8002018 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 80018be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c2:	f001 f89b 	bl	80029fc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018cc:	4850      	ldr	r0, [pc, #320]	; (8001a10 <main+0x278>)
 80018ce:	f001 ff9f 	bl	8003810 <HAL_GPIO_WritePin>
	  while (motor_position != counter_position)
 80018d2:	e05e      	b.n	8001992 <main+0x1fa>
	  {
		  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018da:	4842      	ldr	r0, [pc, #264]	; (80019e4 <main+0x24c>)
 80018dc:	f001 ff98 	bl	8003810 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e6:	484a      	ldr	r0, [pc, #296]	; (8001a10 <main+0x278>)
 80018e8:	f001 ff92 	bl	8003810 <HAL_GPIO_WritePin>
		  if (motor_position < counter_position)
 80018ec:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <main+0x27c>)
 80018ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <main+0x280>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dd22      	ble.n	8001942 <main+0x1aa>
		  {

			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2104      	movs	r1, #4
 8001900:	4838      	ldr	r0, [pc, #224]	; (80019e4 <main+0x24c>)
 8001902:	f001 ff85 	bl	8003810 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	2102      	movs	r1, #2
 800190a:	4836      	ldr	r0, [pc, #216]	; (80019e4 <main+0x24c>)
 800190c:	f001 ff80 	bl	8003810 <HAL_GPIO_WritePin>
			  motor_position = motor_position + 1 ;
 8001910:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <main+0x280>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	4a40      	ldr	r2, [pc, #256]	; (8001a18 <main+0x280>)
 8001918:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2102      	movs	r1, #2
 800191e:	4831      	ldr	r0, [pc, #196]	; (80019e4 <main+0x24c>)
 8001920:	f001 ff76 	bl	8003810 <HAL_GPIO_WritePin>
			  us_delay = 7500;
 8001924:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <main+0x284>)
 8001926:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800192a:	601a      	str	r2, [r3, #0]
			  while (us_delay) { us_delay = us_delay - 1;}
 800192c:	e004      	b.n	8001938 <main+0x1a0>
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <main+0x284>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3b01      	subs	r3, #1
 8001934:	4a39      	ldr	r2, [pc, #228]	; (8001a1c <main+0x284>)
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <main+0x284>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f6      	bne.n	800192e <main+0x196>
 8001940:	e021      	b.n	8001986 <main+0x1ee>
		  }
		  else
		  {

			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2104      	movs	r1, #4
 8001946:	4827      	ldr	r0, [pc, #156]	; (80019e4 <main+0x24c>)
 8001948:	f001 ff62 	bl	8003810 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2102      	movs	r1, #2
 8001950:	4824      	ldr	r0, [pc, #144]	; (80019e4 <main+0x24c>)
 8001952:	f001 ff5d 	bl	8003810 <HAL_GPIO_WritePin>
			  motor_position = motor_position - 1 ;
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <main+0x280>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3b01      	subs	r3, #1
 800195c:	4a2e      	ldr	r2, [pc, #184]	; (8001a18 <main+0x280>)
 800195e:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2102      	movs	r1, #2
 8001964:	481f      	ldr	r0, [pc, #124]	; (80019e4 <main+0x24c>)
 8001966:	f001 ff53 	bl	8003810 <HAL_GPIO_WritePin>
			  us_delay = 7500;
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <main+0x284>)
 800196c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001970:	601a      	str	r2, [r3, #0]
			  while (us_delay) { us_delay = us_delay - 1;}
 8001972:	e004      	b.n	800197e <main+0x1e6>
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <main+0x284>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3b01      	subs	r3, #1
 800197a:	4a28      	ldr	r2, [pc, #160]	; (8001a1c <main+0x284>)
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <main+0x284>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f6      	bne.n	8001974 <main+0x1dc>
		  }
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198c:	4820      	ldr	r0, [pc, #128]	; (8001a10 <main+0x278>)
 800198e:	f001 ff3f 	bl	8003810 <HAL_GPIO_WritePin>
	  while (motor_position != counter_position)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <main+0x27c>)
 8001994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001998:	461a      	mov	r2, r3
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <main+0x280>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d198      	bne.n	80018d4 <main+0x13c>
//	  sprintf(text, "%5i", counter_position);
//	  SSD1306_GotoXY(0, 30);
//	  SSD1306_Puts (text, &Font_11x18, 1);
//	  SSD1306_UpdateScreen();

	  rec_rom_id = get_ROMid();
 80019a2:	f7ff fe01 	bl	80015a8 <get_ROMid>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <main+0x288>)
 80019aa:	6013      	str	r3, [r2, #0]
	  SSD1306_Fill(0);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f000 fb6b 	bl	8002088 <SSD1306_Fill>
	  SSD1306_GotoXY(0, 0);
 80019b2:	2100      	movs	r1, #0
 80019b4:	2000      	movs	r0, #0
 80019b6:	f000 fbdf 	bl	8002178 <SSD1306_GotoXY>
//	  sprintf(text, "%s %u", ow.ids);
	  //sprintf(textout1, "%s %u", name1, var1);
	  SSD1306_Puts (text, &Font_11x18, 1);
 80019ba:	2201      	movs	r2, #1
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <main+0x258>)
 80019be:	4812      	ldr	r0, [pc, #72]	; (8001a08 <main+0x270>)
 80019c0:	f000 fc70 	bl	80022a4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80019c4:	f000 fb28 	bl	8002018 <SSD1306_UpdateScreen>

	  HAL_Delay (1000);
 80019c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019cc:	f001 f816 	bl	80029fc <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80019d0:	e779      	b.n	80018c6 <main+0x12e>
 80019d2:	bf00      	nop
 80019d4:	f3af 8000 	nop.w
 80019d8:	9999999a 	.word	0x9999999a
 80019dc:	40676999 	.word	0x40676999
 80019e0:	20000310 	.word	0x20000310
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020000 	.word	0x40020000
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	20000004 	.word	0x20000004
 80019f4:	0800a8d4 	.word	0x0800a8d4
 80019f8:	20000274 	.word	0x20000274
 80019fc:	200003a0 	.word	0x200003a0
 8001a00:	200003a4 	.word	0x200003a4
 8001a04:	0800a8dc 	.word	0x0800a8dc
 8001a08:	20000018 	.word	0x20000018
 8001a0c:	0800a8e4 	.word	0x0800a8e4
 8001a10:	40020800 	.word	0x40020800
 8001a14:	200003ac 	.word	0x200003ac
 8001a18:	2000039c 	.word	0x2000039c
 8001a1c:	200003b0 	.word	0x200003b0
 8001a20:	200003b4 	.word	0x200003b4

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b094      	sub	sp, #80	; 0x50
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	2230      	movs	r2, #48	; 0x30
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fa9c 	bl	8005f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <SystemClock_Config+0xc8>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	4a26      	ldr	r2, [pc, #152]	; (8001aec <SystemClock_Config+0xc8>)
 8001a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a56:	6413      	str	r3, [r2, #64]	; 0x40
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <SystemClock_Config+0xc8>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <SystemClock_Config+0xcc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <SystemClock_Config+0xcc>)
 8001a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <SystemClock_Config+0xcc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a80:	2301      	movs	r3, #1
 8001a82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001a94:	230d      	movs	r3, #13
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 104;
 8001a98:	2368      	movs	r3, #104	; 0x68
 8001a9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 fb17 	bl	80040dc <HAL_RCC_OscConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ab4:	f000 f9b6 	bl	8001e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab8:	230f      	movs	r3, #15
 8001aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001abc:	2302      	movs	r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fd79 	bl	80045cc <HAL_RCC_ClockConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ae0:	f000 f9a0 	bl	8001e24 <Error_Handler>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3750      	adds	r7, #80	; 0x50
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40007000 	.word	0x40007000

08001af4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001afa:	463b      	mov	r3, r7
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b08:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <MX_ADC1_Init+0x9c>)
 8001b0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b36:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <MX_ADC1_Init+0xa0>)
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b56:	f000 ff75 	bl	8002a44 <HAL_ADC_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b60:	f000 f960 	bl	8001e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b70:	463b      	mov	r3, r7
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b76:	f001 f8f5 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b80:	f000 f950 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000274 	.word	0x20000274
 8001b90:	40012000 	.word	0x40012000
 8001b94:	0f000001 	.word	0x0f000001

08001b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001b9e:	4a13      	ldr	r2, [pc, #76]	; (8001bec <MX_I2C1_Init+0x54>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <MX_I2C1_Init+0x58>)
 8001ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bd6:	f001 fe35 	bl	8003844 <HAL_I2C_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be0:	f000 f920 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200002bc 	.word	0x200002bc
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	00061a80 	.word	0x00061a80

08001bf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	; 0x30
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 f9b4 	bl	8005f70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <MX_TIM3_Init+0xa4>)
 8001c14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480c      	ldr	r0, [pc, #48]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c62:	f002 fe93 	bl	800498c <HAL_TIM_Encoder_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c6c:	f000 f8da 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c7e:	f003 f9af 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c88:	f000 f8cc 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3730      	adds	r7, #48	; 0x30
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000310 	.word	0x20000310
 8001c98:	40000400 	.word	0x40000400

08001c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART2_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	f003 fa06 	bl	80050e4 <HAL_HalfDuplex_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f000 f8a1 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000358 	.word	0x20000358
 8001cec:	40004400 	.word	0x40004400

08001cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a33      	ldr	r2, [pc, #204]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <MX_GPIO_Init+0x124>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7c:	4826      	ldr	r0, [pc, #152]	; (8001e18 <MX_GPIO_Init+0x128>)
 8001d7e:	f001 fd47 	bl	8003810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S_SLEEP_Pin|STEP_Pin|DIR_Pin|S_ENABLE_Pin
 8001d82:	2200      	movs	r2, #0
 8001d84:	f24f 0107 	movw	r1, #61447	; 0xf007
 8001d88:	4824      	ldr	r0, [pc, #144]	; (8001e1c <MX_GPIO_Init+0x12c>)
 8001d8a:	f001 fd41 	bl	8003810 <HAL_GPIO_WritePin>
                          |MS1_Pin|MS2_Pin|MS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d94:	4822      	ldr	r0, [pc, #136]	; (8001e20 <MX_GPIO_Init+0x130>)
 8001d96:	f001 fd3b 	bl	8003810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4819      	ldr	r0, [pc, #100]	; (8001e18 <MX_GPIO_Init+0x128>)
 8001db4:	f001 fba8 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001db8:	2301      	movs	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4815      	ldr	r0, [pc, #84]	; (8001e20 <MX_GPIO_Init+0x130>)
 8001dcc:	f001 fb9c 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_SLEEP_Pin STEP_Pin DIR_Pin S_ENABLE_Pin
                           MS1_Pin MS2_Pin MS3_Pin */
  GPIO_InitStruct.Pin = S_SLEEP_Pin|STEP_Pin|DIR_Pin|S_ENABLE_Pin
 8001dd0:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001dd4:	617b      	str	r3, [r7, #20]
                          |MS1_Pin|MS2_Pin|MS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <MX_GPIO_Init+0x12c>)
 8001dea:	f001 fb8d 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_RESET_Pin */
  GPIO_InitStruct.Pin = S_RESET_Pin;
 8001dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S_RESET_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	4806      	ldr	r0, [pc, #24]	; (8001e20 <MX_GPIO_Init+0x130>)
 8001e08:	f001 fb7e 	bl	8003508 <HAL_GPIO_Init>

}
 8001e0c:	bf00      	nop
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020000 	.word	0x40020000

08001e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <Error_Handler+0x8>
	...

08001e30 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(OledHandleTypedef *mydev)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

    /* Init I2C */
    dev = mydev;
 8001e38:	4a75      	ldr	r2, [pc, #468]	; (8002010 <SSD1306_Init+0x1e0>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]

    /* A little delay */
    uint32_t p = 2500;
 8001e3e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001e42:	60fb      	str	r3, [r7, #12]
    while(p>0)
 8001e44:	e002      	b.n	8001e4c <SSD1306_Init+0x1c>
        p--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
    while(p>0)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f9      	bne.n	8001e46 <SSD1306_Init+0x16>

    /* Init LCD */
    SSD1306_WRITECOMMAND(0xAE); //display off
 8001e52:	21ae      	movs	r1, #174	; 0xae
 8001e54:	2000      	movs	r0, #0
 8001e56:	f000 faa9 	bl	80023ac <ssd1306_I2C_Write>

    if(dev->type == SSD1306_I2C) {
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <SSD1306_Init+0x1e0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <SSD1306_Init+0x44>
        SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001e64:	2120      	movs	r1, #32
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 faa0 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10); //00:Horizontal, 01:Vertical,10:Page, 11:Invalid
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 fa9c 	bl	80023ac <ssd1306_I2C_Write>
    }                           // Note: SH1106 has only Page mode

    SSD1306_WRITECOMMAND(0xB0); //Set Page Address for Page Addressing Mode,0-7
 8001e74:	21b0      	movs	r1, #176	; 0xb0
 8001e76:	2000      	movs	r0, #0
 8001e78:	f000 fa98 	bl	80023ac <ssd1306_I2C_Write>

    if(dev->type == SH1106_I2C) {
 8001e7c:	4b64      	ldr	r3, [pc, #400]	; (8002010 <SSD1306_Init+0x1e0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d104      	bne.n	8001e90 <SSD1306_Init+0x60>
        SSD1306_WRITECOMMAND(0x02); //---set low column address 	2: for SH1106 ***
 8001e86:	2102      	movs	r1, #2
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 fa8f 	bl	80023ac <ssd1306_I2C_Write>
 8001e8e:	e003      	b.n	8001e98 <SSD1306_Init+0x68>
    } else {
        SSD1306_WRITECOMMAND(0x00); //---set low column address 	0: for SSD1306 ***
 8001e90:	2100      	movs	r1, #0
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 fa8a 	bl	80023ac <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001e98:	2110      	movs	r1, #16
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f000 fa86 	bl	80023ac <ssd1306_I2C_Write>

    if(dev->orientation == 0) { //--- This is the "normal" direction
 8001ea0:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <SSD1306_Init+0x1e0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	885b      	ldrh	r3, [r3, #2]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d108      	bne.n	8001ebc <SSD1306_Init+0x8c>
        SSD1306_WRITECOMMAND(0xA0); //--set segment re-map 0 to 127
 8001eaa:	21a0      	movs	r1, #160	; 0xa0
 8001eac:	2000      	movs	r0, #0
 8001eae:	f000 fa7d 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xC0); //Set COM Output Scan Direction 0 to 63
 8001eb2:	21c0      	movs	r1, #192	; 0xc0
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f000 fa79 	bl	80023ac <ssd1306_I2C_Write>
 8001eba:	e007      	b.n	8001ecc <SSD1306_Init+0x9c>
    } else {                    //--- This is the "upside down" direction
        SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 127 to 0
 8001ebc:	21a1      	movs	r1, #161	; 0xa1
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 fa74 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction 63 to 0
 8001ec4:	21c8      	movs	r1, #200	; 0xc8
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 fa70 	bl	80023ac <ssd1306_I2C_Write>
    }
    if(dev->type == SH1106_I2C) {
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <SSD1306_Init+0x1e0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d103      	bne.n	8001ede <SSD1306_Init+0xae>
        SSD1306_WRITECOMMAND(0x32); //--set pump voltage value to 8.0V (SH1106 only)
 8001ed6:	2132      	movs	r1, #50	; 0x32
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f000 fa67 	bl	80023ac <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001ede:	2140      	movs	r1, #64	; 0x40
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f000 fa63 	bl	80023ac <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001ee6:	2181      	movs	r1, #129	; 0x81
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f000 fa5f 	bl	80023ac <ssd1306_I2C_Write>
    if(dev->type == SH1106_I2C) {
 8001eee:	4b48      	ldr	r3, [pc, #288]	; (8002010 <SSD1306_Init+0x1e0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d104      	bne.n	8001f02 <SSD1306_Init+0xd2>
        SSD1306_WRITECOMMAND(0x80); //  POR value = 80 for SH1106
 8001ef8:	2180      	movs	r1, #128	; 0x80
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 fa56 	bl	80023ac <ssd1306_I2C_Write>
 8001f00:	e003      	b.n	8001f0a <SSD1306_Init+0xda>
    } else if(SSD1306_HEIGHT == 32) {
        SSD1306_WRITECOMMAND(0x8F); // 0x8F for 32 line SSD1306
    } else {
        SSD1306_WRITECOMMAND(0xFF); // 0xFF for 64 line SSD1306
 8001f02:	21ff      	movs	r1, #255	; 0xff
 8001f04:	2000      	movs	r0, #0
 8001f06:	f000 fa51 	bl	80023ac <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0xA4); // 0xa4,normal output 0xa5,highlight all pixels
 8001f0a:	21a4      	movs	r1, #164	; 0xa4
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f000 fa4d 	bl	80023ac <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001f12:	21a6      	movs	r1, #166	; 0xa6
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 fa49 	bl	80023ac <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001f1a:	21a8      	movs	r1, #168	; 0xa8
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f000 fa45 	bl	80023ac <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_HEIGHT-1); //*** 31 or 63
 8001f22:	213f      	movs	r1, #63	; 0x3f
 8001f24:	2000      	movs	r0, #0
 8001f26:	f000 fa41 	bl	80023ac <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xD3); //--set display offset
 8001f2a:	21d3      	movs	r1, #211	; 0xd3
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 fa3d 	bl	80023ac <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00); //  no offset
 8001f32:	2100      	movs	r1, #0
 8001f34:	2000      	movs	r0, #0
 8001f36:	f000 fa39 	bl	80023ac <ssd1306_I2C_Write>

    if(dev->type == SH1106_I2C) { // SH1106 with 64 line display
 8001f3a:	4b35      	ldr	r3, [pc, #212]	; (8002010 <SSD1306_Init+0x1e0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d110      	bne.n	8001f66 <SSD1306_Init+0x136>
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f44:	21d5      	movs	r1, #213	; 0xd5
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 fa30 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x50); //  set frequency and divide ratio
 8001f4c:	2150      	movs	r1, #80	; 0x50
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 fa2c 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xD9); //--set dis-charge/pre-charge period
 8001f54:	21d9      	movs	r1, #217	; 0xd9
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 fa28 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x22); //
 8001f5c:	2122      	movs	r1, #34	; 0x22
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 fa24 	bl	80023ac <ssd1306_I2C_Write>
 8001f64:	e00f      	b.n	8001f86 <SSD1306_Init+0x156>
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
        SSD1306_WRITECOMMAND(0x80); //  set recommended divide ratio
        SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
        SSD1306_WRITECOMMAND(0xF1); //
    } else {                    // SSD1306 with 64 line display
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f66:	21d5      	movs	r1, #213	; 0xd5
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 fa1f 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xF0); //  set divide ratio
 8001f6e:	21f0      	movs	r1, #240	; 0xf0
 8001f70:	2000      	movs	r0, #0
 8001f72:	f000 fa1b 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001f76:	21d9      	movs	r1, #217	; 0xd9
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 fa17 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x22); //
 8001f7e:	2122      	movs	r1, #34	; 0x22
 8001f80:	2000      	movs	r0, #0
 8001f82:	f000 fa13 	bl	80023ac <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001f86:	21da      	movs	r1, #218	; 0xda
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 fa0f 	bl	80023ac <ssd1306_I2C_Write>
    if(SSD1306_HEIGHT == 64) {
        SSD1306_WRITECOMMAND(0x12); //*** 12:for 64 line
 8001f8e:	2112      	movs	r1, #18
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 fa0b 	bl	80023ac <ssd1306_I2C_Write>
    } else {
        SSD1306_WRITECOMMAND(0x02); //*** 02: for 32 line
    }

    SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001f96:	21db      	movs	r1, #219	; 0xdb
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f000 fa07 	bl	80023ac <ssd1306_I2C_Write>
    if(dev->type == SH1106_I2C) {
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <SSD1306_Init+0x1e0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d10c      	bne.n	8001fc2 <SSD1306_Init+0x192>
        SSD1306_WRITECOMMAND(0x35); //  SH1106: 0x35 0.77xVcc
 8001fa8:	2135      	movs	r1, #53	; 0x35
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 f9fe 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xAD); //--set DC-DC mode
 8001fb0:	21ad      	movs	r1, #173	; 0xad
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f000 f9fa 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x8B); //  DC-DC converter ON
 8001fb8:	218b      	movs	r1, #139	; 0x8b
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f000 f9f6 	bl	80023ac <ssd1306_I2C_Write>
 8001fc0:	e00f      	b.n	8001fe2 <SSD1306_Init+0x1b2>
    } else {
        SSD1306_WRITECOMMAND(0x20); //  SSD1306: 0x20 0.77xVcc
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f000 f9f1 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x8D); //--Charge Pump Setting
 8001fca:	218d      	movs	r1, #141	; 0x8d
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f000 f9ed 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x14);	//  Enable Charge Pump
 8001fd2:	2114      	movs	r1, #20
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f000 f9e9 	bl	80023ac <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x2E); //--Stop scrolling
 8001fda:	212e      	movs	r1, #46	; 0x2e
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f000 f9e5 	bl	80023ac <ssd1306_I2C_Write>
    }
    SSD1306_WRITECOMMAND(0xAF); //--turn on SH1106/SSD1306 panel
 8001fe2:	21af      	movs	r1, #175	; 0xaf
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f000 f9e1 	bl	80023ac <ssd1306_I2C_Write>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f84c 	bl	8002088 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 8001ff0:	f000 f812 	bl	8002018 <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <SSD1306_Init+0x1e4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <SSD1306_Init+0x1e4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SSD1306_Init+0x1e4>)
 8002002:	2201      	movs	r2, #1
 8002004:	715a      	strb	r2, [r3, #5]

    /* Return OK */
    return 1;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200007b8 	.word	0x200007b8
 8002014:	200007bc 	.word	0x200007bc

08002018 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
    uint8_t m;

    for (m = 0; m < 8; m++) {
 800201e:	2300      	movs	r3, #0
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	e024      	b.n	800206e <SSD1306_UpdateScreen+0x56>
        SSD1306_WRITECOMMAND(0xB0 + m);
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	3b50      	subs	r3, #80	; 0x50
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4619      	mov	r1, r3
 800202c:	2000      	movs	r0, #0
 800202e:	f000 f9bd 	bl	80023ac <ssd1306_I2C_Write>
        if(dev->type == SH1106_I2C) {
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <SSD1306_UpdateScreen+0x68>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d104      	bne.n	8002046 <SSD1306_UpdateScreen+0x2e>
            SSD1306_WRITECOMMAND(0x02); //---set low column address 	2: for SH1106 ***
 800203c:	2102      	movs	r1, #2
 800203e:	2000      	movs	r0, #0
 8002040:	f000 f9b4 	bl	80023ac <ssd1306_I2C_Write>
 8002044:	e003      	b.n	800204e <SSD1306_UpdateScreen+0x36>
        } else {
            SSD1306_WRITECOMMAND(0x00); //---set low column address 	0: for SSD1306+ ***
 8002046:	2100      	movs	r1, #0
 8002048:	2000      	movs	r0, #0
 800204a:	f000 f9af 	bl	80023ac <ssd1306_I2C_Write>
        }
        SSD1306_WRITECOMMAND(0x10);
 800204e:	2110      	movs	r1, #16
 8002050:	2000      	movs	r0, #0
 8002052:	f000 f9ab 	bl	80023ac <ssd1306_I2C_Write>
        /* Write multi data */
        ssd1306_I2C_WriteMulti(0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	01db      	lsls	r3, r3, #7
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <SSD1306_UpdateScreen+0x6c>)
 800205c:	4413      	add	r3, r2
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	4619      	mov	r1, r3
 8002062:	2040      	movs	r0, #64	; 0x40
 8002064:	f000 f944 	bl	80022f0 <ssd1306_I2C_WriteMulti>
    for (m = 0; m < 8; m++) {
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	3301      	adds	r3, #1
 800206c:	71fb      	strb	r3, [r7, #7]
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	2b07      	cmp	r3, #7
 8002072:	d9d7      	bls.n	8002024 <SSD1306_UpdateScreen+0xc>
    }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200007b8 	.word	0x200007b8
 8002084:	200003b8 	.word	0x200003b8

08002088 <SSD1306_Fill>:
        SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
    }
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <SSD1306_Fill+0x14>
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <SSD1306_Fill+0x16>
 800209c:	23ff      	movs	r3, #255	; 0xff
 800209e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a2:	4619      	mov	r1, r3
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <SSD1306_Fill+0x2c>)
 80020a6:	f003 ff63 	bl	8005f70 <memset>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200003b8 	.word	0x200003b8

080020b8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	460b      	mov	r3, r1
 80020c4:	80bb      	strh	r3, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	70fb      	strb	r3, [r7, #3]
    if (
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	2b7f      	cmp	r3, #127	; 0x7f
 80020ce:	d848      	bhi.n	8002162 <SSD1306_DrawPixel+0xaa>
        x >= SSD1306_WIDTH ||
 80020d0:	88bb      	ldrh	r3, [r7, #4]
 80020d2:	2b3f      	cmp	r3, #63	; 0x3f
 80020d4:	d845      	bhi.n	8002162 <SSD1306_DrawPixel+0xaa>
        /* Error */
        return;
    }

    /* Check if pixels are inverted */
    if (SSD1306.Inverted) {
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <SSD1306_DrawPixel+0xb8>)
 80020d8:	791b      	ldrb	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <SSD1306_DrawPixel+0x34>
        color = (SSD1306_COLOR_t)!color;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	70fb      	strb	r3, [r7, #3]
    }

    /* Set color */
    if (color == SSD1306_COLOR_WHITE) {
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d11a      	bne.n	8002128 <SSD1306_DrawPixel+0x70>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020f2:	88fa      	ldrh	r2, [r7, #6]
 80020f4:	88bb      	ldrh	r3, [r7, #4]
 80020f6:	08db      	lsrs	r3, r3, #3
 80020f8:	b298      	uxth	r0, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	01db      	lsls	r3, r3, #7
 80020fe:	4413      	add	r3, r2
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <SSD1306_DrawPixel+0xbc>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	b25a      	sxtb	r2, r3
 8002106:	88bb      	ldrh	r3, [r7, #4]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	2101      	movs	r1, #1
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	b25b      	sxtb	r3, r3
 8002114:	4313      	orrs	r3, r2
 8002116:	b259      	sxtb	r1, r3
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	4603      	mov	r3, r0
 800211c:	01db      	lsls	r3, r3, #7
 800211e:	4413      	add	r3, r2
 8002120:	b2c9      	uxtb	r1, r1
 8002122:	4a14      	ldr	r2, [pc, #80]	; (8002174 <SSD1306_DrawPixel+0xbc>)
 8002124:	54d1      	strb	r1, [r2, r3]
 8002126:	e01d      	b.n	8002164 <SSD1306_DrawPixel+0xac>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002128:	88fa      	ldrh	r2, [r7, #6]
 800212a:	88bb      	ldrh	r3, [r7, #4]
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	b298      	uxth	r0, r3
 8002130:	4603      	mov	r3, r0
 8002132:	01db      	lsls	r3, r3, #7
 8002134:	4413      	add	r3, r2
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <SSD1306_DrawPixel+0xbc>)
 8002138:	5cd3      	ldrb	r3, [r2, r3]
 800213a:	b25a      	sxtb	r2, r3
 800213c:	88bb      	ldrh	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	b25b      	sxtb	r3, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	b25b      	sxtb	r3, r3
 800214e:	4013      	ands	r3, r2
 8002150:	b259      	sxtb	r1, r3
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	4603      	mov	r3, r0
 8002156:	01db      	lsls	r3, r3, #7
 8002158:	4413      	add	r3, r2
 800215a:	b2c9      	uxtb	r1, r1
 800215c:	4a05      	ldr	r2, [pc, #20]	; (8002174 <SSD1306_DrawPixel+0xbc>)
 800215e:	54d1      	strb	r1, [r2, r3]
 8002160:	e000      	b.n	8002164 <SSD1306_DrawPixel+0xac>
        return;
 8002162:	bf00      	nop
    }
}
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200007bc 	.word	0x200007bc
 8002174:	200003b8 	.word	0x200003b8

08002178 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	460a      	mov	r2, r1
 8002182:	80fb      	strh	r3, [r7, #6]
 8002184:	4613      	mov	r3, r2
 8002186:	80bb      	strh	r3, [r7, #4]
    /* Set write pointers */
    SSD1306.CurrentX = x;
 8002188:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <SSD1306_GotoXY+0x28>)
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <SSD1306_GotoXY+0x28>)
 8002190:	88bb      	ldrh	r3, [r7, #4]
 8002192:	8053      	strh	r3, [r2, #2]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	200007bc 	.word	0x200007bc

080021a4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
 80021b0:	4613      	mov	r3, r2
 80021b2:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;

    /* Check available space in LCD */
    if (
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <SSD1306_Putc+0xfc>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
    if (
 80021c0:	2b7f      	cmp	r3, #127	; 0x7f
 80021c2:	dc07      	bgt.n	80021d4 <SSD1306_Putc+0x30>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <SSD1306_Putc+0xfc>)
 80021c6:	885b      	ldrh	r3, [r3, #2]
 80021c8:	461a      	mov	r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	785b      	ldrb	r3, [r3, #1]
 80021ce:	4413      	add	r3, r2
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80021d0:	2b3f      	cmp	r3, #63	; 0x3f
 80021d2:	dd01      	ble.n	80021d8 <SSD1306_Putc+0x34>
    ) {
        /* Error */
        return 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e05e      	b.n	8002296 <SSD1306_Putc+0xf2>
    }

    /* Go through font */
    for (i = 0; i < Font->FontHeight; i++) {
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e04b      	b.n	8002276 <SSD1306_Putc+0xd2>
        b = Font->data[(ch - 32) * Font->FontHeight + i];
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	3b20      	subs	r3, #32
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	7849      	ldrb	r1, [r1, #1]
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	440b      	add	r3, r1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < Font->FontWidth; j++) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e030      	b.n	8002264 <SSD1306_Putc+0xc0>
            if ((b << j) & 0x8000) {
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <SSD1306_Putc+0x90>
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <SSD1306_Putc+0xfc>)
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4413      	add	r3, r2
 800221c:	b298      	uxth	r0, r3
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <SSD1306_Putc+0xfc>)
 8002220:	885a      	ldrh	r2, [r3, #2]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	b29b      	uxth	r3, r3
 8002226:	4413      	add	r3, r2
 8002228:	b29b      	uxth	r3, r3
 800222a:	79ba      	ldrb	r2, [r7, #6]
 800222c:	4619      	mov	r1, r3
 800222e:	f7ff ff43 	bl	80020b8 <SSD1306_DrawPixel>
 8002232:	e014      	b.n	800225e <SSD1306_Putc+0xba>
            } else {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <SSD1306_Putc+0xfc>)
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	b29b      	uxth	r3, r3
 800223c:	4413      	add	r3, r2
 800223e:	b298      	uxth	r0, r3
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <SSD1306_Putc+0xfc>)
 8002242:	885a      	ldrh	r2, [r3, #2]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4413      	add	r3, r2
 800224a:	b299      	uxth	r1, r3
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	2b00      	cmp	r3, #0
 8002250:	bf0c      	ite	eq
 8002252:	2301      	moveq	r3, #1
 8002254:	2300      	movne	r3, #0
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	f7ff ff2d 	bl	80020b8 <SSD1306_DrawPixel>
        for (j = 0; j < Font->FontWidth; j++) {
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	3301      	adds	r3, #1
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4293      	cmp	r3, r2
 800226e:	d3c8      	bcc.n	8002202 <SSD1306_Putc+0x5e>
    for (i = 0; i < Font->FontHeight; i++) {
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	785b      	ldrb	r3, [r3, #1]
 800227a:	461a      	mov	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	4293      	cmp	r3, r2
 8002280:	d3ad      	bcc.n	80021de <SSD1306_Putc+0x3a>
            }
        }
    }

    /* Increase pointer */
    SSD1306.CurrentX += Font->FontWidth;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <SSD1306_Putc+0xfc>)
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4413      	add	r3, r2
 800228e:	b29a      	uxth	r2, r3
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <SSD1306_Putc+0xfc>)
 8002292:	801a      	strh	r2, [r3, #0]

    /* Return character written */
    return ch;
 8002294:	79fb      	ldrb	r3, [r7, #7]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200007bc 	.word	0x200007bc

080022a4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	4613      	mov	r3, r2
 80022b0:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str) {
 80022b2:	e012      	b.n	80022da <SSD1306_Puts+0x36>
        /* Write character by character */
        if (SSD1306_Putc(*str, Font, color) != *str) {
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	79fa      	ldrb	r2, [r7, #7]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff71 	bl	80021a4 <SSD1306_Putc>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d002      	beq.n	80022d4 <SSD1306_Puts+0x30>
            /* Return error */
            return *str;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	e008      	b.n	80022e6 <SSD1306_Puts+0x42>
        }

        /* Increase string pointer */
        str++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e8      	bne.n	80022b4 <SSD1306_Puts+0x10>
    }

    /* Everything OK, zero should be returned */
    return *str;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	781b      	ldrb	r3, [r3, #0]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <ssd1306_I2C_WriteMulti>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(uint8_t reg, uint8_t* data, uint16_t count)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b0c7      	sub	sp, #284	; 0x11c
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022fe:	6019      	str	r1, [r3, #0]
 8002300:	4611      	mov	r1, r2
 8002302:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002306:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800230a:	4602      	mov	r2, r0
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002312:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002316:	460a      	mov	r2, r1
 8002318:	801a      	strh	r2, [r3, #0]
    uint8_t dt[256];
    dt[0] = reg;
 800231a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800231e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002322:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002326:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 800232a:	7812      	ldrb	r2, [r2, #0]
 800232c:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for(i = 0; i < count; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002334:	e015      	b.n	8002362 <ssd1306_I2C_WriteMulti+0x72>
        dt[i+1] = data[i];
 8002336:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800233a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800233e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	441a      	add	r2, r3
 8002346:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800234a:	3301      	adds	r3, #1
 800234c:	7811      	ldrb	r1, [r2, #0]
 800234e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002352:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002356:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < count; i++)
 8002358:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800235c:	3301      	adds	r3, #1
 800235e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002362:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002366:	b29b      	uxth	r3, r3
 8002368:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800236c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002370:	8812      	ldrh	r2, [r2, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d8df      	bhi.n	8002336 <ssd1306_I2C_WriteMulti+0x46>
    HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_address, dt, count+1, 20);
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <ssd1306_I2C_WriteMulti+0xb8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6898      	ldr	r0, [r3, #8]
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <ssd1306_I2C_WriteMulti+0xb8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	8899      	ldrh	r1, [r3, #4]
 8002382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	b29b      	uxth	r3, r3
 8002390:	f107 020c 	add.w	r2, r7, #12
 8002394:	2414      	movs	r4, #20
 8002396:	9400      	str	r4, [sp, #0]
 8002398:	f001 fb98 	bl	8003acc <HAL_I2C_Master_Transmit>
//  I2C1_Write(address, dt, count+1, 10);
}
 800239c:	bf00      	nop
 800239e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd90      	pop	{r4, r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200007b8 	.word	0x200007b8

080023ac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t reg, uint8_t data)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	4603      	mov	r3, r0
 80023b4:	460a      	mov	r2, r1
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71bb      	strb	r3, [r7, #6]
    uint8_t dt[2];
    dt[0] = reg;
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	733b      	strb	r3, [r7, #12]
    dt[1] = data;
 80023c0:	79bb      	ldrb	r3, [r7, #6]
 80023c2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_address, dt, 2, 20);
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <ssd1306_I2C_Write+0x3c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6898      	ldr	r0, [r3, #8]
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <ssd1306_I2C_Write+0x3c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	8899      	ldrh	r1, [r3, #4]
 80023d0:	f107 020c 	add.w	r2, r7, #12
 80023d4:	2314      	movs	r3, #20
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2302      	movs	r3, #2
 80023da:	f001 fb77 	bl	8003acc <HAL_I2C_Master_Transmit>
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200007b8 	.word	0x200007b8

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_MspInit+0x4c>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_MspInit+0x4c>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_MspInit+0x4c>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_MspInit+0x4c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_MspInit+0x4c>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_MspInit+0x4c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800

0800243c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_ADC_MspInit+0x7c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d127      	bne.n	80024ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_ADC_MspInit+0x80>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a15      	ldr	r2, [pc, #84]	; (80024bc <HAL_ADC_MspInit+0x80>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_ADC_MspInit+0x80>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_ADC_MspInit+0x80>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_ADC_MspInit+0x80>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_ADC_MspInit+0x80>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002496:	2302      	movs	r3, #2
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249a:	2303      	movs	r3, #3
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <HAL_ADC_MspInit+0x84>)
 80024aa:	f001 f82d 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40012000 	.word	0x40012000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000

080024c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a19      	ldr	r2, [pc, #100]	; (8002548 <HAL_I2C_MspInit+0x84>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d12b      	bne.n	800253e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_I2C_MspInit+0x88>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a17      	ldr	r2, [pc, #92]	; (800254c <HAL_I2C_MspInit+0x88>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_I2C_MspInit+0x88>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002502:	23c0      	movs	r3, #192	; 0xc0
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002506:	2312      	movs	r3, #18
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002512:	2304      	movs	r3, #4
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <HAL_I2C_MspInit+0x8c>)
 800251e:	f000 fff3 	bl	8003508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_I2C_MspInit+0x88>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_I2C_MspInit+0x88>)
 800252c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_I2C_MspInit+0x88>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40005400 	.word	0x40005400
 800254c:	40023800 	.word	0x40023800
 8002550:	40020400 	.word	0x40020400

08002554 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d133      	bne.n	80025de <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_TIM_Encoder_MspInit+0x98>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_TIM_Encoder_MspInit+0x98>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_TIM_Encoder_MspInit+0x98>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_TIM_Encoder_MspInit+0x98>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a14      	ldr	r2, [pc, #80]	; (80025ec <HAL_TIM_Encoder_MspInit+0x98>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_TIM_Encoder_MspInit+0x98>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025ae:	23c0      	movs	r3, #192	; 0xc0
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025be:	2302      	movs	r3, #2
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	4809      	ldr	r0, [pc, #36]	; (80025f0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80025ca:	f000 ff9d 	bl	8003508 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	201d      	movs	r0, #29
 80025d4:	f000 fecf 	bl	8003376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025d8:	201d      	movs	r0, #29
 80025da:	f000 fee8 	bl	80033ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025de:	bf00      	nop
 80025e0:	3728      	adds	r7, #40	; 0x28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020000 	.word	0x40020000

080025f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_UART_MspInit+0x94>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d133      	bne.n	800267e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_UART_MspInit+0x98>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a1b      	ldr	r2, [pc, #108]	; (800268c <HAL_UART_MspInit+0x98>)
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_UART_MspInit+0x98>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_UART_MspInit+0x98>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_UART_MspInit+0x98>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_UART_MspInit+0x98>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800264e:	2304      	movs	r3, #4
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002652:	2312      	movs	r3, #18
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800265e:	2307      	movs	r3, #7
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4809      	ldr	r0, [pc, #36]	; (8002690 <HAL_UART_MspInit+0x9c>)
 800266a:	f000 ff4d 	bl	8003508 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	2100      	movs	r1, #0
 8002672:	2026      	movs	r0, #38	; 0x26
 8002674:	f000 fe7f 	bl	8003376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002678:	2026      	movs	r0, #38	; 0x26
 800267a:	f000 fe98 	bl	80033ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800267e:	bf00      	nop
 8002680:	3728      	adds	r7, #40	; 0x28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40004400 	.word	0x40004400
 800268c:	40023800 	.word	0x40023800
 8002690:	40020000 	.word	0x40020000

08002694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002698:	e7fe      	b.n	8002698 <NMI_Handler+0x4>

0800269a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269e:	e7fe      	b.n	800269e <HardFault_Handler+0x4>

080026a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <MemManage_Handler+0x4>

080026a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026aa:	e7fe      	b.n	80026aa <BusFault_Handler+0x4>

080026ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <UsageFault_Handler+0x4>

080026b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e0:	f000 f96c 	bl	80029bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <TIM3_IRQHandler+0x10>)
 80026ee:	f002 faa1 	bl	8004c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000310 	.word	0x20000310

080026fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	owReadHandler();
 8002700:	f7fe fd22 	bl	8001148 <owReadHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <USART2_IRQHandler+0x14>)
 8002706:	f002 fd43 	bl	8005190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000358 	.word	0x20000358

08002714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
	return 1;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_kill>:

int _kill(int pid, int sig)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800272e:	f003 fbf5 	bl	8005f1c <__errno>
 8002732:	4603      	mov	r3, r0
 8002734:	2216      	movs	r2, #22
 8002736:	601a      	str	r2, [r3, #0]
	return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_exit>:

void _exit (int status)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ffe7 	bl	8002724 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002756:	e7fe      	b.n	8002756 <_exit+0x12>

08002758 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e00a      	b.n	8002780 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800276a:	f3af 8000 	nop.w
 800276e:	4601      	mov	r1, r0
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	60ba      	str	r2, [r7, #8]
 8002776:	b2ca      	uxtb	r2, r1
 8002778:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3301      	adds	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	429a      	cmp	r2, r3
 8002786:	dbf0      	blt.n	800276a <_read+0x12>
	}

return len;
 8002788:	687b      	ldr	r3, [r7, #4]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e009      	b.n	80027b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	60ba      	str	r2, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	dbf1      	blt.n	80027a4 <_write+0x12>
	}
	return len;
 80027c0:	687b      	ldr	r3, [r7, #4]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_close>:

int _close(int file)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
	return -1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027f2:	605a      	str	r2, [r3, #4]
	return 0;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_isatty>:

int _isatty(int file)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
	return 1;
 800280a:	2301      	movs	r3, #1
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
	return 0;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800283c:	4a14      	ldr	r2, [pc, #80]	; (8002890 <_sbrk+0x5c>)
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <_sbrk+0x60>)
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <_sbrk+0x64>)
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <_sbrk+0x68>)
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <_sbrk+0x64>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d207      	bcs.n	8002874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002864:	f003 fb5a 	bl	8005f1c <__errno>
 8002868:	4603      	mov	r3, r0
 800286a:	220c      	movs	r2, #12
 800286c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e009      	b.n	8002888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	4a05      	ldr	r2, [pc, #20]	; (8002898 <_sbrk+0x64>)
 8002884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20020000 	.word	0x20020000
 8002894:	00000400 	.word	0x00000400
 8002898:	200007c4 	.word	0x200007c4
 800289c:	200007e0 	.word	0x200007e0

080028a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <SystemInit+0x20>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <SystemInit+0x20>)
 80028ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028c8:	480d      	ldr	r0, [pc, #52]	; (8002900 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028ca:	490e      	ldr	r1, [pc, #56]	; (8002904 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028cc:	4a0e      	ldr	r2, [pc, #56]	; (8002908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d0:	e002      	b.n	80028d8 <LoopCopyDataInit>

080028d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d6:	3304      	adds	r3, #4

080028d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028dc:	d3f9      	bcc.n	80028d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028de:	4a0b      	ldr	r2, [pc, #44]	; (800290c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028e0:	4c0b      	ldr	r4, [pc, #44]	; (8002910 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e4:	e001      	b.n	80028ea <LoopFillZerobss>

080028e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e8:	3204      	adds	r2, #4

080028ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ec:	d3fb      	bcc.n	80028e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028ee:	f7ff ffd7 	bl	80028a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028f2:	f003 fb19 	bl	8005f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f6:	f7fe ff4f 	bl	8001798 <main>
  bx  lr    
 80028fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002904:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002908:	0800bb14 	.word	0x0800bb14
  ldr r2, =_sbss
 800290c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002910:	200007dc 	.word	0x200007dc

08002914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002914:	e7fe      	b.n	8002914 <ADC_IRQHandler>
	...

08002918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_Init+0x40>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <HAL_Init+0x40>)
 8002922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <HAL_Init+0x40>)
 800292e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <HAL_Init+0x40>)
 800293a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002940:	2003      	movs	r0, #3
 8002942:	f000 fd0d 	bl	8003360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002946:	2000      	movs	r0, #0
 8002948:	f000 f808 	bl	800295c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800294c:	f7ff fd4e 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023c00 	.word	0x40023c00

0800295c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_InitTick+0x54>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_InitTick+0x58>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002972:	fbb3 f3f1 	udiv	r3, r3, r1
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fd25 	bl	80033ca <HAL_SYSTICK_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e00e      	b.n	80029a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b0f      	cmp	r3, #15
 800298e:	d80a      	bhi.n	80029a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002990:	2200      	movs	r2, #0
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f000 fced 	bl	8003376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800299c:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <HAL_InitTick+0x5c>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000024 	.word	0x20000024
 80029b4:	2000002c 	.word	0x2000002c
 80029b8:	20000028 	.word	0x20000028

080029bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_IncTick+0x20>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_IncTick+0x24>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <HAL_IncTick+0x24>)
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	2000002c 	.word	0x2000002c
 80029e0:	200007c8 	.word	0x200007c8

080029e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return uwTick;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <HAL_GetTick+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	200007c8 	.word	0x200007c8

080029fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a04:	f7ff ffee 	bl	80029e4 <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d005      	beq.n	8002a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_Delay+0x44>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a22:	bf00      	nop
 8002a24:	f7ff ffde 	bl	80029e4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d8f7      	bhi.n	8002a24 <HAL_Delay+0x28>
  {
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000002c 	.word	0x2000002c

08002a44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e033      	b.n	8002ac2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fcea 	bl	800243c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d118      	bne.n	8002ab4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a8a:	f023 0302 	bic.w	r3, r3, #2
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa96 	bl	8002fc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab2:	e001      	b.n	8002ab8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Start+0x1a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e097      	b.n	8002c16 <HAL_ADC_Start+0x14a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d018      	beq.n	8002b2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0c:	4b45      	ldr	r3, [pc, #276]	; (8002c24 <HAL_ADC_Start+0x158>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a45      	ldr	r2, [pc, #276]	; (8002c28 <HAL_ADC_Start+0x15c>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0c9a      	lsrs	r2, r3, #18
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d15f      	bne.n	8002bfc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7a:	d106      	bne.n	8002b8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	f023 0206 	bic.w	r2, r3, #6
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	645a      	str	r2, [r3, #68]	; 0x44
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b98:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_ADC_Start+0x160>)
 8002b9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ba4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d129      	bne.n	8002c14 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	e020      	b.n	8002c14 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <HAL_ADC_Start+0x164>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d11b      	bne.n	8002c14 <HAL_ADC_Start+0x148>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d114      	bne.n	8002c14 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	e00b      	b.n	8002c14 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0210 	orr.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000024 	.word	0x20000024
 8002c28:	431bde83 	.word	0x431bde83
 8002c2c:	40012300 	.word	0x40012300
 8002c30:	40012000 	.word	0x40012000

08002c34 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d113      	bne.n	8002c7a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c60:	d10b      	bne.n	8002c7a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e063      	b.n	8002d42 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c7a:	f7ff feb3 	bl	80029e4 <HAL_GetTick>
 8002c7e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c80:	e021      	b.n	8002cc6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d01d      	beq.n	8002cc6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_ADC_PollForConversion+0x6c>
 8002c90:	f7ff fea8 	bl	80029e4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d212      	bcs.n	8002cc6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d00b      	beq.n	8002cc6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f043 0204 	orr.w	r2, r3, #4
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e03d      	b.n	8002d42 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d1d6      	bne.n	8002c82 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0212 	mvn.w	r2, #18
 8002cdc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d123      	bne.n	8002d40 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11f      	bne.n	8002d40 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d111      	bne.n	8002d40 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x1c>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e113      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x244>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b09      	cmp	r3, #9
 8002d8e:	d925      	bls.n	8002ddc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68d9      	ldr	r1, [r3, #12]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	3b1e      	subs	r3, #30
 8002da6:	2207      	movs	r2, #7
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43da      	mvns	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	400a      	ands	r2, r1
 8002db4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68d9      	ldr	r1, [r3, #12]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	4603      	mov	r3, r0
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4403      	add	r3, r0
 8002dce:	3b1e      	subs	r3, #30
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	e022      	b.n	8002e22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6919      	ldr	r1, [r3, #16]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	2207      	movs	r2, #7
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6919      	ldr	r1, [r3, #16]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4618      	mov	r0, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4403      	add	r3, r0
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d824      	bhi.n	8002e74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b05      	subs	r3, #5
 8002e3c:	221f      	movs	r2, #31
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	400a      	ands	r2, r1
 8002e4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	3b05      	subs	r3, #5
 8002e66:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
 8002e72:	e04c      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d824      	bhi.n	8002ec6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b23      	subs	r3, #35	; 0x23
 8002e8e:	221f      	movs	r2, #31
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43da      	mvns	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3b23      	subs	r3, #35	; 0x23
 8002eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec4:	e023      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3b41      	subs	r3, #65	; 0x41
 8002ed8:	221f      	movs	r2, #31
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	3b41      	subs	r3, #65	; 0x41
 8002f02:	fa00 f203 	lsl.w	r2, r0, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_ADC_ConfigChannel+0x250>)
 8002f10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <HAL_ADC_ConfigChannel+0x254>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d10f      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1d8>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b12      	cmp	r3, #18
 8002f22:	d10b      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <HAL_ADC_ConfigChannel+0x254>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d12b      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x23a>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <HAL_ADC_ConfigChannel+0x258>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <HAL_ADC_ConfigChannel+0x1f4>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b11      	cmp	r3, #17
 8002f56:	d122      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <HAL_ADC_ConfigChannel+0x258>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d111      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_ADC_ConfigChannel+0x25c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <HAL_ADC_ConfigChannel+0x260>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	0c9a      	lsrs	r2, r3, #18
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f90:	e002      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f9      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	40012300 	.word	0x40012300
 8002fb8:	40012000 	.word	0x40012000
 8002fbc:	10000012 	.word	0x10000012
 8002fc0:	20000024 	.word	0x20000024
 8002fc4:	431bde83 	.word	0x431bde83

08002fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd0:	4b79      	ldr	r3, [pc, #484]	; (80031b8 <ADC_Init+0x1f0>)
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	021a      	lsls	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6899      	ldr	r1, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	4a58      	ldr	r2, [pc, #352]	; (80031bc <ADC_Init+0x1f4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800306e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6899      	ldr	r1, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6899      	ldr	r1, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	e00f      	b.n	80030c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0202 	bic.w	r2, r2, #2
 80030d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7e1b      	ldrb	r3, [r3, #24]
 80030e0:	005a      	lsls	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01b      	beq.n	800312c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003102:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	3b01      	subs	r3, #1
 8003120:	035a      	lsls	r2, r3, #13
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	e007      	b.n	800313c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	3b01      	subs	r3, #1
 8003158:	051a      	lsls	r2, r3, #20
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6899      	ldr	r1, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800317e:	025a      	lsls	r2, r3, #9
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6899      	ldr	r1, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	029a      	lsls	r2, r3, #10
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40012300 	.word	0x40012300
 80031bc:	0f000001 	.word	0x0f000001

080031c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <__NVIC_SetPriorityGrouping+0x44>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031dc:	4013      	ands	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f2:	4a04      	ldr	r2, [pc, #16]	; (8003204 <__NVIC_SetPriorityGrouping+0x44>)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	60d3      	str	r3, [r2, #12]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <__NVIC_GetPriorityGrouping+0x18>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	f003 0307 	and.w	r3, r3, #7
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	2b00      	cmp	r3, #0
 8003234:	db0b      	blt.n	800324e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	f003 021f 	and.w	r2, r3, #31
 800323c:	4907      	ldr	r1, [pc, #28]	; (800325c <__NVIC_EnableIRQ+0x38>)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2001      	movs	r0, #1
 8003246:	fa00 f202 	lsl.w	r2, r0, r2
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000e100 	.word	0xe000e100

08003260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	2b00      	cmp	r3, #0
 8003272:	db0a      	blt.n	800328a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	490c      	ldr	r1, [pc, #48]	; (80032ac <__NVIC_SetPriority+0x4c>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	440b      	add	r3, r1
 8003284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003288:	e00a      	b.n	80032a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4908      	ldr	r1, [pc, #32]	; (80032b0 <__NVIC_SetPriority+0x50>)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	3b04      	subs	r3, #4
 8003298:	0112      	lsls	r2, r2, #4
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	440b      	add	r3, r1
 800329e:	761a      	strb	r2, [r3, #24]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000e100 	.word	0xe000e100
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f1c3 0307 	rsb	r3, r3, #7
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	bf28      	it	cs
 80032d2:	2304      	movcs	r3, #4
 80032d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3304      	adds	r3, #4
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d902      	bls.n	80032e4 <NVIC_EncodePriority+0x30>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3b03      	subs	r3, #3
 80032e2:	e000      	b.n	80032e6 <NVIC_EncodePriority+0x32>
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	401a      	ands	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43d9      	mvns	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	4313      	orrs	r3, r2
         );
}
 800330e:	4618      	mov	r0, r3
 8003310:	3724      	adds	r7, #36	; 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800332c:	d301      	bcc.n	8003332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332e:	2301      	movs	r3, #1
 8003330:	e00f      	b.n	8003352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <SysTick_Config+0x40>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333a:	210f      	movs	r1, #15
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f7ff ff8e 	bl	8003260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <SysTick_Config+0x40>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <SysTick_Config+0x40>)
 800334c:	2207      	movs	r2, #7
 800334e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	e000e010 	.word	0xe000e010

08003360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ff29 	bl	80031c0 <__NVIC_SetPriorityGrouping>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003376:	b580      	push	{r7, lr}
 8003378:	b086      	sub	sp, #24
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003388:	f7ff ff3e 	bl	8003208 <__NVIC_GetPriorityGrouping>
 800338c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	6978      	ldr	r0, [r7, #20]
 8003394:	f7ff ff8e 	bl	80032b4 <NVIC_EncodePriority>
 8003398:	4602      	mov	r2, r0
 800339a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff5d 	bl	8003260 <__NVIC_SetPriority>
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	4603      	mov	r3, r0
 80033b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff31 	bl	8003224 <__NVIC_EnableIRQ>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ffa2 	bl	800331c <SysTick_Config>
 80033d8:	4603      	mov	r3, r0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033f0:	f7ff faf8 	bl	80029e4 <HAL_GetTick>
 80033f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d008      	beq.n	8003414 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e052      	b.n	80034ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0216 	bic.w	r2, r2, #22
 8003422:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003432:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d103      	bne.n	8003444 <HAL_DMA_Abort+0x62>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0208 	bic.w	r2, r2, #8
 8003452:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003464:	e013      	b.n	800348e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003466:	f7ff fabd 	bl	80029e4 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b05      	cmp	r3, #5
 8003472:	d90c      	bls.n	800348e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e015      	b.n	80034ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e4      	bne.n	8003466 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	223f      	movs	r2, #63	; 0x3f
 80034a2:	409a      	lsls	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d004      	beq.n	80034e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2280      	movs	r2, #128	; 0x80
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e00c      	b.n	80034fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2205      	movs	r2, #5
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	e159      	b.n	80037d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003524:	2201      	movs	r2, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	429a      	cmp	r2, r3
 800353e:	f040 8148 	bne.w	80037d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d005      	beq.n	800355a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003556:	2b02      	cmp	r3, #2
 8003558:	d130      	bne.n	80035bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 0201 	and.w	r2, r3, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d017      	beq.n	80035f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2203      	movs	r2, #3
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d123      	bne.n	800364c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	08da      	lsrs	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3208      	adds	r2, #8
 800360c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	220f      	movs	r2, #15
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	08da      	lsrs	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3208      	adds	r2, #8
 8003646:	69b9      	ldr	r1, [r7, #24]
 8003648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0203 	and.w	r2, r3, #3
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80a2 	beq.w	80037d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4b57      	ldr	r3, [pc, #348]	; (80037f0 <HAL_GPIO_Init+0x2e8>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	4a56      	ldr	r2, [pc, #344]	; (80037f0 <HAL_GPIO_Init+0x2e8>)
 8003698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800369c:	6453      	str	r3, [r2, #68]	; 0x44
 800369e:	4b54      	ldr	r3, [pc, #336]	; (80037f0 <HAL_GPIO_Init+0x2e8>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036aa:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_GPIO_Init+0x2ec>)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	3302      	adds	r3, #2
 80036b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	220f      	movs	r2, #15
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a49      	ldr	r2, [pc, #292]	; (80037f8 <HAL_GPIO_Init+0x2f0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d019      	beq.n	800370a <HAL_GPIO_Init+0x202>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a48      	ldr	r2, [pc, #288]	; (80037fc <HAL_GPIO_Init+0x2f4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_GPIO_Init+0x1fe>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a47      	ldr	r2, [pc, #284]	; (8003800 <HAL_GPIO_Init+0x2f8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00d      	beq.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a46      	ldr	r2, [pc, #280]	; (8003804 <HAL_GPIO_Init+0x2fc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <HAL_GPIO_Init+0x1f6>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a45      	ldr	r2, [pc, #276]	; (8003808 <HAL_GPIO_Init+0x300>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_GPIO_Init+0x1f2>
 80036f6:	2304      	movs	r3, #4
 80036f8:	e008      	b.n	800370c <HAL_GPIO_Init+0x204>
 80036fa:	2307      	movs	r3, #7
 80036fc:	e006      	b.n	800370c <HAL_GPIO_Init+0x204>
 80036fe:	2303      	movs	r3, #3
 8003700:	e004      	b.n	800370c <HAL_GPIO_Init+0x204>
 8003702:	2302      	movs	r3, #2
 8003704:	e002      	b.n	800370c <HAL_GPIO_Init+0x204>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_GPIO_Init+0x204>
 800370a:	2300      	movs	r3, #0
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	f002 0203 	and.w	r2, r2, #3
 8003712:	0092      	lsls	r2, r2, #2
 8003714:	4093      	lsls	r3, r2
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800371c:	4935      	ldr	r1, [pc, #212]	; (80037f4 <HAL_GPIO_Init+0x2ec>)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	3302      	adds	r3, #2
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800372a:	4b38      	ldr	r3, [pc, #224]	; (800380c <HAL_GPIO_Init+0x304>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800374e:	4a2f      	ldr	r2, [pc, #188]	; (800380c <HAL_GPIO_Init+0x304>)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003754:	4b2d      	ldr	r3, [pc, #180]	; (800380c <HAL_GPIO_Init+0x304>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003778:	4a24      	ldr	r2, [pc, #144]	; (800380c <HAL_GPIO_Init+0x304>)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800377e:	4b23      	ldr	r3, [pc, #140]	; (800380c <HAL_GPIO_Init+0x304>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037a2:	4a1a      	ldr	r2, [pc, #104]	; (800380c <HAL_GPIO_Init+0x304>)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a8:	4b18      	ldr	r3, [pc, #96]	; (800380c <HAL_GPIO_Init+0x304>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037cc:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_GPIO_Init+0x304>)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3301      	adds	r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	2b0f      	cmp	r3, #15
 80037dc:	f67f aea2 	bls.w	8003524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3724      	adds	r7, #36	; 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40013800 	.word	0x40013800
 80037f8:	40020000 	.word	0x40020000
 80037fc:	40020400 	.word	0x40020400
 8003800:	40020800 	.word	0x40020800
 8003804:	40020c00 	.word	0x40020c00
 8003808:	40021000 	.word	0x40021000
 800380c:	40013c00 	.word	0x40013c00

08003810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	807b      	strh	r3, [r7, #2]
 800381c:	4613      	mov	r3, r2
 800381e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003820:	787b      	ldrb	r3, [r7, #1]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003826:	887a      	ldrh	r2, [r7, #2]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800382c:	e003      	b.n	8003836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800382e:	887b      	ldrh	r3, [r7, #2]
 8003830:	041a      	lsls	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	619a      	str	r2, [r3, #24]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e12b      	b.n	8003aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fe fe2a 	bl	80024c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2224      	movs	r2, #36	; 0x24
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038a8:	f001 f848 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 80038ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4a81      	ldr	r2, [pc, #516]	; (8003ab8 <HAL_I2C_Init+0x274>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d807      	bhi.n	80038c8 <HAL_I2C_Init+0x84>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a80      	ldr	r2, [pc, #512]	; (8003abc <HAL_I2C_Init+0x278>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	bf94      	ite	ls
 80038c0:	2301      	movls	r3, #1
 80038c2:	2300      	movhi	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e006      	b.n	80038d6 <HAL_I2C_Init+0x92>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a7d      	ldr	r2, [pc, #500]	; (8003ac0 <HAL_I2C_Init+0x27c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bf94      	ite	ls
 80038d0:	2301      	movls	r3, #1
 80038d2:	2300      	movhi	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0e7      	b.n	8003aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a78      	ldr	r2, [pc, #480]	; (8003ac4 <HAL_I2C_Init+0x280>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0c9b      	lsrs	r3, r3, #18
 80038e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a6a      	ldr	r2, [pc, #424]	; (8003ab8 <HAL_I2C_Init+0x274>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d802      	bhi.n	8003918 <HAL_I2C_Init+0xd4>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	3301      	adds	r3, #1
 8003916:	e009      	b.n	800392c <HAL_I2C_Init+0xe8>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	4a69      	ldr	r2, [pc, #420]	; (8003ac8 <HAL_I2C_Init+0x284>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	3301      	adds	r3, #1
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	430b      	orrs	r3, r1
 8003932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800393e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	495c      	ldr	r1, [pc, #368]	; (8003ab8 <HAL_I2C_Init+0x274>)
 8003948:	428b      	cmp	r3, r1
 800394a:	d819      	bhi.n	8003980 <HAL_I2C_Init+0x13c>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e59      	subs	r1, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fbb1 f3f3 	udiv	r3, r1, r3
 800395a:	1c59      	adds	r1, r3, #1
 800395c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003960:	400b      	ands	r3, r1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_I2C_Init+0x138>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1e59      	subs	r1, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fbb1 f3f3 	udiv	r3, r1, r3
 8003974:	3301      	adds	r3, #1
 8003976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397a:	e051      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 800397c:	2304      	movs	r3, #4
 800397e:	e04f      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d111      	bne.n	80039ac <HAL_I2C_Init+0x168>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	440b      	add	r3, r1
 8003996:	fbb0 f3f3 	udiv	r3, r0, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e012      	b.n	80039d2 <HAL_I2C_Init+0x18e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e58      	subs	r0, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	0099      	lsls	r1, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Init+0x196>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e022      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <HAL_I2C_Init+0x1bc>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e58      	subs	r0, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	440b      	add	r3, r1
 80039f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fe:	e00f      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	0099      	lsls	r1, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6809      	ldr	r1, [r1, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6911      	ldr	r1, [r2, #16]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	4311      	orrs	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	000186a0 	.word	0x000186a0
 8003abc:	001e847f 	.word	0x001e847f
 8003ac0:	003d08ff 	.word	0x003d08ff
 8003ac4:	431bde83 	.word	0x431bde83
 8003ac8:	10624dd3 	.word	0x10624dd3

08003acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
 8003adc:	4613      	mov	r3, r2
 8003ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7fe ff80 	bl	80029e4 <HAL_GetTick>
 8003ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 80e0 	bne.w	8003cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	4970      	ldr	r1, [pc, #448]	; (8003cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f964 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e0d3      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_I2C_Master_Transmit+0x50>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0cc      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d007      	beq.n	8003b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a50      	ldr	r2, [pc, #320]	; (8003cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b84:	8979      	ldrh	r1, [r7, #10]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f89c 	bl	8003cc8 <I2C_MasterRequestWrite>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e08d      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bb0:	e066      	b.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f9de 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06b      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d11b      	bne.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	6a39      	ldr	r1, [r7, #32]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f9ce 	bl	8003ffa <I2C_WaitOnBTFFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d107      	bne.n	8003c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e01a      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d194      	bne.n	8003bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	00100002 	.word	0x00100002
 8003cc4:	ffff0000 	.word	0xffff0000

08003cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d006      	beq.n	8003cf2 <I2C_MasterRequestWrite+0x2a>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d003      	beq.n	8003cf2 <I2C_MasterRequestWrite+0x2a>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cf0:	d108      	bne.n	8003d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e00b      	b.n	8003d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2b12      	cmp	r3, #18
 8003d0a:	d107      	bne.n	8003d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f84f 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d42:	d103      	bne.n	8003d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e035      	b.n	8003dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d58:	d108      	bne.n	8003d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d68:	611a      	str	r2, [r3, #16]
 8003d6a:	e01b      	b.n	8003da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d6c:	897b      	ldrh	r3, [r7, #10]
 8003d6e:	11db      	asrs	r3, r3, #7
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f003 0306 	and.w	r3, r3, #6
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f063 030f 	orn	r3, r3, #15
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <I2C_MasterRequestWrite+0xfc>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f875 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e010      	b.n	8003dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d9a:	897b      	ldrh	r3, [r7, #10]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <I2C_MasterRequestWrite+0x100>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f865 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	00010008 	.word	0x00010008
 8003dc8:	00010002 	.word	0x00010002

08003dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ddc:	e025      	b.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d021      	beq.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fe fdfd 	bl	80029e4 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d116      	bne.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e023      	b.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	e00c      	b.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	43da      	mvns	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d0b6      	beq.n	8003dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e88:	e051      	b.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d123      	bne.n	8003ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e046      	b.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d021      	beq.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fe fd7b 	bl	80029e4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d116      	bne.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e020      	b.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10c      	bne.n	8003f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e00b      	b.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d18d      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f84:	e02d      	b.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f878 	bl	800407c <I2C_IsAcknowledgeFailed>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e02d      	b.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d021      	beq.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7fe fd21 	bl	80029e4 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d116      	bne.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e007      	b.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d1ca      	bne.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004006:	e02d      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f837 	bl	800407c <I2C_IsAcknowledgeFailed>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e02d      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d021      	beq.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004020:	f7fe fce0 	bl	80029e4 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e007      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d1ca      	bne.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004092:	d11b      	bne.n	80040cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f043 0204 	orr.w	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e267      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d075      	beq.n	80041e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040fa:	4b88      	ldr	r3, [pc, #544]	; (800431c <HAL_RCC_OscConfig+0x240>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b04      	cmp	r3, #4
 8004104:	d00c      	beq.n	8004120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4b85      	ldr	r3, [pc, #532]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410e:	2b08      	cmp	r3, #8
 8004110:	d112      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004112:	4b82      	ldr	r3, [pc, #520]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411e:	d10b      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	4b7e      	ldr	r3, [pc, #504]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05b      	beq.n	80041e4 <HAL_RCC_OscConfig+0x108>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d157      	bne.n	80041e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e242      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d106      	bne.n	8004150 <HAL_RCC_OscConfig+0x74>
 8004142:	4b76      	ldr	r3, [pc, #472]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a75      	ldr	r2, [pc, #468]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e01d      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0x98>
 800415a:	4b70      	ldr	r3, [pc, #448]	; (800431c <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6f      	ldr	r2, [pc, #444]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b6d      	ldr	r3, [pc, #436]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a6c      	ldr	r2, [pc, #432]	; (800431c <HAL_RCC_OscConfig+0x240>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e00b      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004174:	4b69      	ldr	r3, [pc, #420]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a68      	ldr	r2, [pc, #416]	; (800431c <HAL_RCC_OscConfig+0x240>)
 800417a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b66      	ldr	r3, [pc, #408]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fe fc26 	bl	80029e4 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419c:	f7fe fc22 	bl	80029e4 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e207      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	4b5b      	ldr	r3, [pc, #364]	; (800431c <HAL_RCC_OscConfig+0x240>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0xc0>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fe fc12 	bl	80029e4 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fe fc0e 	bl	80029e4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1f3      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	4b51      	ldr	r3, [pc, #324]	; (800431c <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0xe8>
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d063      	beq.n	80042ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f2:	4b4a      	ldr	r3, [pc, #296]	; (800431c <HAL_RCC_OscConfig+0x240>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b47      	ldr	r3, [pc, #284]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004206:	2b08      	cmp	r3, #8
 8004208:	d11c      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420a:	4b44      	ldr	r3, [pc, #272]	; (800431c <HAL_RCC_OscConfig+0x240>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d116      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e1c7      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422e:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4937      	ldr	r1, [pc, #220]	; (800431c <HAL_RCC_OscConfig+0x240>)
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	e03a      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800424c:	4b34      	ldr	r3, [pc, #208]	; (8004320 <HAL_RCC_OscConfig+0x244>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fe fbc7 	bl	80029e4 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425a:	f7fe fbc3 	bl	80029e4 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1a8      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426c:	4b2b      	ldr	r3, [pc, #172]	; (800431c <HAL_RCC_OscConfig+0x240>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b28      	ldr	r3, [pc, #160]	; (800431c <HAL_RCC_OscConfig+0x240>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4925      	ldr	r1, [pc, #148]	; (800431c <HAL_RCC_OscConfig+0x240>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
 800428c:	e015      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <HAL_RCC_OscConfig+0x244>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe fba6 	bl	80029e4 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429c:	f7fe fba2 	bl	80029e4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e187      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ae:	4b1b      	ldr	r3, [pc, #108]	; (800431c <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d036      	beq.n	8004334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_RCC_OscConfig+0x248>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fe fb86 	bl	80029e4 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fe fb82 	bl	80029e4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e167      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_OscConfig+0x240>)
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x200>
 80042fa:	e01b      	b.n	8004334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <HAL_RCC_OscConfig+0x248>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004302:	f7fe fb6f 	bl	80029e4 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	e00e      	b.n	8004328 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800430a:	f7fe fb6b 	bl	80029e4 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d907      	bls.n	8004328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e150      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
 800431c:	40023800 	.word	0x40023800
 8004320:	42470000 	.word	0x42470000
 8004324:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004328:	4b88      	ldr	r3, [pc, #544]	; (800454c <HAL_RCC_OscConfig+0x470>)
 800432a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1ea      	bne.n	800430a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8097 	beq.w	8004470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004346:	4b81      	ldr	r3, [pc, #516]	; (800454c <HAL_RCC_OscConfig+0x470>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	4b7d      	ldr	r3, [pc, #500]	; (800454c <HAL_RCC_OscConfig+0x470>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	4a7c      	ldr	r2, [pc, #496]	; (800454c <HAL_RCC_OscConfig+0x470>)
 800435c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004360:	6413      	str	r3, [r2, #64]	; 0x40
 8004362:	4b7a      	ldr	r3, [pc, #488]	; (800454c <HAL_RCC_OscConfig+0x470>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800436e:	2301      	movs	r3, #1
 8004370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b77      	ldr	r3, [pc, #476]	; (8004550 <HAL_RCC_OscConfig+0x474>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d118      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800437e:	4b74      	ldr	r3, [pc, #464]	; (8004550 <HAL_RCC_OscConfig+0x474>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a73      	ldr	r2, [pc, #460]	; (8004550 <HAL_RCC_OscConfig+0x474>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438a:	f7fe fb2b 	bl	80029e4 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004392:	f7fe fb27 	bl	80029e4 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e10c      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a4:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_RCC_OscConfig+0x474>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x2ea>
 80043b8:	4b64      	ldr	r3, [pc, #400]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a63      	ldr	r2, [pc, #396]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
 80043c4:	e01c      	b.n	8004400 <HAL_RCC_OscConfig+0x324>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x30c>
 80043ce:	4b5f      	ldr	r3, [pc, #380]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	4a5e      	ldr	r2, [pc, #376]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
 80043da:	4b5c      	ldr	r3, [pc, #368]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	4a5b      	ldr	r2, [pc, #364]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	6713      	str	r3, [r2, #112]	; 0x70
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0x324>
 80043e8:	4b58      	ldr	r3, [pc, #352]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	4a57      	ldr	r2, [pc, #348]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	6713      	str	r3, [r2, #112]	; 0x70
 80043f4:	4b55      	ldr	r3, [pc, #340]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	4a54      	ldr	r2, [pc, #336]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80043fa:	f023 0304 	bic.w	r3, r3, #4
 80043fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d015      	beq.n	8004434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fe faec 	bl	80029e4 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440e:	e00a      	b.n	8004426 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004410:	f7fe fae8 	bl	80029e4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	; 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e0cb      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004426:	4b49      	ldr	r3, [pc, #292]	; (800454c <HAL_RCC_OscConfig+0x470>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0ee      	beq.n	8004410 <HAL_RCC_OscConfig+0x334>
 8004432:	e014      	b.n	800445e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004434:	f7fe fad6 	bl	80029e4 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443a:	e00a      	b.n	8004452 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fe fad2 	bl	80029e4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0b5      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004452:	4b3e      	ldr	r3, [pc, #248]	; (800454c <HAL_RCC_OscConfig+0x470>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1ee      	bne.n	800443c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d105      	bne.n	8004470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004464:	4b39      	ldr	r3, [pc, #228]	; (800454c <HAL_RCC_OscConfig+0x470>)
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	4a38      	ldr	r2, [pc, #224]	; (800454c <HAL_RCC_OscConfig+0x470>)
 800446a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800446e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80a1 	beq.w	80045bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800447a:	4b34      	ldr	r3, [pc, #208]	; (800454c <HAL_RCC_OscConfig+0x470>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b08      	cmp	r3, #8
 8004484:	d05c      	beq.n	8004540 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d141      	bne.n	8004512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448e:	4b31      	ldr	r3, [pc, #196]	; (8004554 <HAL_RCC_OscConfig+0x478>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fe faa6 	bl	80029e4 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449c:	f7fe faa2 	bl	80029e4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e087      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	4b27      	ldr	r3, [pc, #156]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	019b      	lsls	r3, r3, #6
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	3b01      	subs	r3, #1
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	061b      	lsls	r3, r3, #24
 80044de:	491b      	ldr	r1, [pc, #108]	; (800454c <HAL_RCC_OscConfig+0x470>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_RCC_OscConfig+0x478>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ea:	f7fe fa7b 	bl	80029e4 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f2:	f7fe fa77 	bl	80029e4 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e05c      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <HAL_RCC_OscConfig+0x470>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x416>
 8004510:	e054      	b.n	80045bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <HAL_RCC_OscConfig+0x478>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004518:	f7fe fa64 	bl	80029e4 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004520:	f7fe fa60 	bl	80029e4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e045      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_OscConfig+0x470>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x444>
 800453e:	e03d      	b.n	80045bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d107      	bne.n	8004558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e038      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
 800454c:	40023800 	.word	0x40023800
 8004550:	40007000 	.word	0x40007000
 8004554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d028      	beq.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d121      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d11a      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004588:	4013      	ands	r3, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800458e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004590:	4293      	cmp	r3, r2
 8004592:	d111      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	085b      	lsrs	r3, r3, #1
 80045a0:	3b01      	subs	r3, #1
 80045a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800

080045cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0cc      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b68      	ldr	r3, [pc, #416]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d90c      	bls.n	8004608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b65      	ldr	r3, [pc, #404]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b63      	ldr	r3, [pc, #396]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0b8      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004620:	4b59      	ldr	r3, [pc, #356]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a58      	ldr	r2, [pc, #352]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800462a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004638:	4b53      	ldr	r3, [pc, #332]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b50      	ldr	r3, [pc, #320]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	494d      	ldr	r1, [pc, #308]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d044      	beq.n	80046ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b47      	ldr	r3, [pc, #284]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d119      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e07f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d003      	beq.n	800468a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004686:	2b03      	cmp	r3, #3
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469a:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e067      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046aa:	4b37      	ldr	r3, [pc, #220]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f023 0203 	bic.w	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4934      	ldr	r1, [pc, #208]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046bc:	f7fe f992 	bl	80029e4 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	e00a      	b.n	80046da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c4:	f7fe f98e 	bl	80029e4 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e04f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 020c 	and.w	r2, r3, #12
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d1eb      	bne.n	80046c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d20c      	bcs.n	8004714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e032      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4916      	ldr	r1, [pc, #88]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	490e      	ldr	r1, [pc, #56]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004752:	f000 f821 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004756:	4602      	mov	r2, r0
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	490a      	ldr	r1, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	5ccb      	ldrb	r3, [r1, r3]
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x1c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe f8f2 	bl	800295c <HAL_InitTick>

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023c00 	.word	0x40023c00
 8004788:	40023800 	.word	0x40023800
 800478c:	0800b644 	.word	0x0800b644
 8004790:	20000024 	.word	0x20000024
 8004794:	20000028 	.word	0x20000028

08004798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800479c:	b090      	sub	sp, #64	; 0x40
 800479e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
 80047a4:	2300      	movs	r3, #0
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a8:	2300      	movs	r3, #0
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b0:	4b59      	ldr	r3, [pc, #356]	; (8004918 <HAL_RCC_GetSysClockFreq+0x180>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d00d      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x40>
 80047bc:	2b08      	cmp	r3, #8
 80047be:	f200 80a1 	bhi.w	8004904 <HAL_RCC_GetSysClockFreq+0x16c>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x34>
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ca:	e09b      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_GetSysClockFreq+0x184>)
 80047ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80047d0:	e09b      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047d2:	4b53      	ldr	r3, [pc, #332]	; (8004920 <HAL_RCC_GetSysClockFreq+0x188>)
 80047d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047d6:	e098      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d8:	4b4f      	ldr	r3, [pc, #316]	; (8004918 <HAL_RCC_GetSysClockFreq+0x180>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047e2:	4b4d      	ldr	r3, [pc, #308]	; (8004918 <HAL_RCC_GetSysClockFreq+0x180>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d028      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ee:	4b4a      	ldr	r3, [pc, #296]	; (8004918 <HAL_RCC_GetSysClockFreq+0x180>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	2200      	movs	r2, #0
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	627a      	str	r2, [r7, #36]	; 0x24
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004800:	2100      	movs	r1, #0
 8004802:	4b47      	ldr	r3, [pc, #284]	; (8004920 <HAL_RCC_GetSysClockFreq+0x188>)
 8004804:	fb03 f201 	mul.w	r2, r3, r1
 8004808:	2300      	movs	r3, #0
 800480a:	fb00 f303 	mul.w	r3, r0, r3
 800480e:	4413      	add	r3, r2
 8004810:	4a43      	ldr	r2, [pc, #268]	; (8004920 <HAL_RCC_GetSysClockFreq+0x188>)
 8004812:	fba0 1202 	umull	r1, r2, r0, r2
 8004816:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004818:	460a      	mov	r2, r1
 800481a:	62ba      	str	r2, [r7, #40]	; 0x28
 800481c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481e:	4413      	add	r3, r2
 8004820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	2200      	movs	r2, #0
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	61fa      	str	r2, [r7, #28]
 800482a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800482e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004832:	f7fc fa41 	bl	8000cb8 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4613      	mov	r3, r2
 800483c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483e:	e053      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004840:	4b35      	ldr	r3, [pc, #212]	; (8004918 <HAL_RCC_GetSysClockFreq+0x180>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	2200      	movs	r2, #0
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	617a      	str	r2, [r7, #20]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004852:	f04f 0b00 	mov.w	fp, #0
 8004856:	4652      	mov	r2, sl
 8004858:	465b      	mov	r3, fp
 800485a:	f04f 0000 	mov.w	r0, #0
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	0159      	lsls	r1, r3, #5
 8004864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004868:	0150      	lsls	r0, r2, #5
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	ebb2 080a 	subs.w	r8, r2, sl
 8004872:	eb63 090b 	sbc.w	r9, r3, fp
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004882:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004886:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800488a:	ebb2 0408 	subs.w	r4, r2, r8
 800488e:	eb63 0509 	sbc.w	r5, r3, r9
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	00eb      	lsls	r3, r5, #3
 800489c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048a0:	00e2      	lsls	r2, r4, #3
 80048a2:	4614      	mov	r4, r2
 80048a4:	461d      	mov	r5, r3
 80048a6:	eb14 030a 	adds.w	r3, r4, sl
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	eb45 030b 	adc.w	r3, r5, fp
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048be:	4629      	mov	r1, r5
 80048c0:	028b      	lsls	r3, r1, #10
 80048c2:	4621      	mov	r1, r4
 80048c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048c8:	4621      	mov	r1, r4
 80048ca:	028a      	lsls	r2, r1, #10
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d2:	2200      	movs	r2, #0
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	60fa      	str	r2, [r7, #12]
 80048d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048dc:	f7fc f9ec 	bl	8000cb8 <__aeabi_uldivmod>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4613      	mov	r3, r2
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	0c1b      	lsrs	r3, r3, #16
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	3301      	adds	r3, #1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80048f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004902:	e002      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_RCC_GetSysClockFreq+0x184>)
 8004906:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800490c:	4618      	mov	r0, r3
 800490e:	3740      	adds	r7, #64	; 0x40
 8004910:	46bd      	mov	sp, r7
 8004912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800
 800491c:	00f42400 	.word	0x00f42400
 8004920:	017d7840 	.word	0x017d7840

08004924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004928:	4b03      	ldr	r3, [pc, #12]	; (8004938 <HAL_RCC_GetHCLKFreq+0x14>)
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000024 	.word	0x20000024

0800493c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004940:	f7ff fff0 	bl	8004924 <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0a9b      	lsrs	r3, r3, #10
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	0800b654 	.word	0x0800b654

08004964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004968:	f7ff ffdc 	bl	8004924 <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	0b5b      	lsrs	r3, r3, #13
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4903      	ldr	r1, [pc, #12]	; (8004988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40023800 	.word	0x40023800
 8004988:	0800b654 	.word	0x0800b654

0800498c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e097      	b.n	8004ad0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7fd fdcd 	bl	8002554 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d0:	f023 0307 	bic.w	r3, r3, #7
 80049d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f000 fa57 	bl	8004e94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a2c:	f023 030c 	bic.w	r3, r3, #12
 8004a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	011a      	lsls	r2, r3, #4
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	031b      	lsls	r3, r3, #12
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004af0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004af8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d110      	bne.n	8004b2a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d102      	bne.n	8004b14 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b0e:	7b7b      	ldrb	r3, [r7, #13]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e089      	b.n	8004c2c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b28:	e031      	b.n	8004b8e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d110      	bne.n	8004b52 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b30:	7bbb      	ldrb	r3, [r7, #14]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d102      	bne.n	8004b3c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b36:	7b3b      	ldrb	r3, [r7, #12]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d001      	beq.n	8004b40 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e075      	b.n	8004c2c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b50:	e01d      	b.n	8004b8e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d108      	bne.n	8004b6a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b58:	7bbb      	ldrb	r3, [r7, #14]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d105      	bne.n	8004b6a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b5e:	7b7b      	ldrb	r3, [r7, #13]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d102      	bne.n	8004b6a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b64:	7b3b      	ldrb	r3, [r7, #12]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e05e      	b.n	8004c2c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d010      	beq.n	8004bbc <HAL_TIM_Encoder_Start_IT+0xe4>
 8004b9a:	e01f      	b.n	8004bdc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f9f5 	bl	8004f94 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0202 	orr.w	r2, r2, #2
 8004bb8:	60da      	str	r2, [r3, #12]
      break;
 8004bba:	e02e      	b.n	8004c1a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	2104      	movs	r1, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f9e5 	bl	8004f94 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0204 	orr.w	r2, r2, #4
 8004bd8:	60da      	str	r2, [r3, #12]
      break;
 8004bda:	e01e      	b.n	8004c1a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2201      	movs	r2, #1
 8004be2:	2100      	movs	r1, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 f9d5 	bl	8004f94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	2104      	movs	r1, #4
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f9ce 	bl	8004f94 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0202 	orr.w	r2, r2, #2
 8004c06:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0204 	orr.w	r2, r2, #4
 8004c16:	60da      	str	r2, [r3, #12]
      break;
 8004c18:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d122      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d11b      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0202 	mvn.w	r2, #2
 8004c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fc fd54 	bl	8001724 <HAL_TIM_IC_CaptureCallback>
 8004c7c:	e005      	b.n	8004c8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8ea 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f8f1 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d122      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d11b      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0204 	mvn.w	r2, #4
 8004cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fc fd2a 	bl	8001724 <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f8c0 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f8c7 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d122      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d11b      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0208 	mvn.w	r2, #8
 8004d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc fd00 	bl	8001724 <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f896 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f89d 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	2b10      	cmp	r3, #16
 8004d44:	d122      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d11b      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0210 	mvn.w	r2, #16
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2208      	movs	r2, #8
 8004d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc fcd6 	bl	8001724 <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f86c 	bl	8004e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f873 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d10e      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d107      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0201 	mvn.w	r2, #1
 8004db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f846 	bl	8004e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d10e      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d107      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f976 	bl	80050d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d10e      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d107      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f838 	bl	8004e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d10e      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d107      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0220 	mvn.w	r2, #32
 8004e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f940 	bl	80050bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a34      	ldr	r2, [pc, #208]	; (8004f78 <TIM_Base_SetConfig+0xe4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00f      	beq.n	8004ecc <TIM_Base_SetConfig+0x38>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d00b      	beq.n	8004ecc <TIM_Base_SetConfig+0x38>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a31      	ldr	r2, [pc, #196]	; (8004f7c <TIM_Base_SetConfig+0xe8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d007      	beq.n	8004ecc <TIM_Base_SetConfig+0x38>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a30      	ldr	r2, [pc, #192]	; (8004f80 <TIM_Base_SetConfig+0xec>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0x38>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <TIM_Base_SetConfig+0xf0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d108      	bne.n	8004ede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <TIM_Base_SetConfig+0xe4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01b      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eec:	d017      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <TIM_Base_SetConfig+0xe8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <TIM_Base_SetConfig+0xec>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00f      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a20      	ldr	r2, [pc, #128]	; (8004f84 <TIM_Base_SetConfig+0xf0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00b      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <TIM_Base_SetConfig+0xf4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <TIM_Base_SetConfig+0xf8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <TIM_Base_SetConfig+0xfc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d108      	bne.n	8004f30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <TIM_Base_SetConfig+0xe4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d103      	bne.n	8004f64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	615a      	str	r2, [r3, #20]
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800

08004f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e050      	b.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d018      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005044:	d013      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00e      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d009      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10c      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4313      	orrs	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40014000 	.word	0x40014000

080050bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e047      	b.n	8005186 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fd fa72 	bl	80025f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	; 0x24
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005126:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fc83 	bl	8005a34 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800514c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0208 	orr.w	r2, r2, #8
 800515c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800516c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b0ba      	sub	sp, #232	; 0xe8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <HAL_UART_IRQHandler+0x66>
 80051e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fb65 	bl	80058be <UART_Receive_IT>
      return;
 80051f4:	e256      	b.n	80056a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80de 	beq.w	80053bc <HAL_UART_IRQHandler+0x22c>
 8005200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800520c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005210:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80d1 	beq.w	80053bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800521a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <HAL_UART_IRQHandler+0xae>
 8005226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f043 0201 	orr.w	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800523e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00b      	beq.n	8005262 <HAL_UART_IRQHandler+0xd2>
 800524a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f043 0202 	orr.w	r2, r3, #2
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <HAL_UART_IRQHandler+0xf6>
 800526e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d011      	beq.n	80052b6 <HAL_UART_IRQHandler+0x126>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d105      	bne.n	80052aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800529e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f043 0208 	orr.w	r2, r3, #8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 81ed 	beq.w	800569a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_UART_IRQHandler+0x14e>
 80052cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 faf0 	bl	80058be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d103      	bne.n	800530a <HAL_UART_IRQHandler+0x17a>
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d04f      	beq.n	80053aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9f8 	bl	8005700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d141      	bne.n	80053a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800534a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800534e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1d9      	bne.n	800531e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	2b00      	cmp	r3, #0
 8005370:	d013      	beq.n	800539a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	4a7d      	ldr	r2, [pc, #500]	; (800556c <HAL_UART_IRQHandler+0x3dc>)
 8005378:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe f89f 	bl	80034c2 <HAL_DMA_Abort_IT>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	e00e      	b.n	80053b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f99a 	bl	80056d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	e00a      	b.n	80053b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f996 	bl	80056d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	e006      	b.n	80053b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f992 	bl	80056d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053b6:	e170      	b.n	800569a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b8:	bf00      	nop
    return;
 80053ba:	e16e      	b.n	800569a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	f040 814a 	bne.w	800565a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8143 	beq.w	800565a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 813c 	beq.w	800565a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	f040 80b4 	bne.w	8005570 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005414:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8140 	beq.w	800569e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005426:	429a      	cmp	r2, r3
 8005428:	f080 8139 	bcs.w	800569e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005432:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543e:	f000 8088 	beq.w	8005552 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800545c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800546e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800547a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1d9      	bne.n	8005442 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800549e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3314      	adds	r3, #20
 80054ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e1      	bne.n	800548e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3314      	adds	r3, #20
 80054d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3314      	adds	r3, #20
 80054ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e3      	bne.n	80054ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005522:	f023 0310 	bic.w	r3, r3, #16
 8005526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005534:	65ba      	str	r2, [r7, #88]	; 0x58
 8005536:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800553a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e3      	bne.n	8005510 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	4618      	mov	r0, r3
 800554e:	f7fd ff48 	bl	80033e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800555a:	b29b      	uxth	r3, r3
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	b29b      	uxth	r3, r3
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f8c0 	bl	80056e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005568:	e099      	b.n	800569e <HAL_UART_IRQHandler+0x50e>
 800556a:	bf00      	nop
 800556c:	080057c7 	.word	0x080057c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005578:	b29b      	uxth	r3, r3
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 808b 	beq.w	80056a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800558c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8086 	beq.w	80056a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055ba:	647a      	str	r2, [r7, #68]	; 0x44
 80055bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e3      	bne.n	8005596 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3314      	adds	r3, #20
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	623b      	str	r3, [r7, #32]
   return(result);
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3314      	adds	r3, #20
 80055ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055f2:	633a      	str	r2, [r7, #48]	; 0x30
 80055f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e3      	bne.n	80055ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	60fb      	str	r3, [r7, #12]
   return(result);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0310 	bic.w	r3, r3, #16
 800562a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005638:	61fa      	str	r2, [r7, #28]
 800563a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	69b9      	ldr	r1, [r7, #24]
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	617b      	str	r3, [r7, #20]
   return(result);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e3      	bne.n	8005614 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800564c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f848 	bl	80056e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005658:	e023      	b.n	80056a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800565a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <HAL_UART_IRQHandler+0x4ea>
 8005666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8bb 	bl	80057ee <UART_Transmit_IT>
    return;
 8005678:	e014      	b.n	80056a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800567a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00e      	beq.n	80056a4 <HAL_UART_IRQHandler+0x514>
 8005686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d008      	beq.n	80056a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f8fb 	bl	800588e <UART_EndTransmit_IT>
    return;
 8005698:	e004      	b.n	80056a4 <HAL_UART_IRQHandler+0x514>
    return;
 800569a:	bf00      	nop
 800569c:	e002      	b.n	80056a4 <HAL_UART_IRQHandler+0x514>
      return;
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <HAL_UART_IRQHandler+0x514>
      return;
 80056a2:	bf00      	nop
  }
}
 80056a4:	37e8      	adds	r7, #232	; 0xe8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop

080056ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005700:	b480      	push	{r7}
 8005702:	b095      	sub	sp, #84	; 0x54
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005728:	643a      	str	r2, [r7, #64]	; 0x40
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800572e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3314      	adds	r3, #20
 8005742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	61fb      	str	r3, [r7, #28]
   return(result);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	64bb      	str	r3, [r7, #72]	; 0x48
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3314      	adds	r3, #20
 800575a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800575c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	2b01      	cmp	r3, #1
 8005776:	d119      	bne.n	80057ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	60bb      	str	r3, [r7, #8]
   return(result);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f023 0310 	bic.w	r3, r3, #16
 800578e:	647b      	str	r3, [r7, #68]	; 0x44
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005798:	61ba      	str	r2, [r7, #24]
 800579a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6979      	ldr	r1, [r7, #20]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	613b      	str	r3, [r7, #16]
   return(result);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e5      	bne.n	8005778 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057ba:	bf00      	nop
 80057bc:	3754      	adds	r7, #84	; 0x54
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7ff ff77 	bl	80056d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b21      	cmp	r3, #33	; 0x21
 8005800:	d13e      	bne.n	8005880 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580a:	d114      	bne.n	8005836 <UART_Transmit_IT+0x48>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d110      	bne.n	8005836 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005828:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	1c9a      	adds	r2, r3, #2
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	621a      	str	r2, [r3, #32]
 8005834:	e008      	b.n	8005848 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	1c59      	adds	r1, r3, #1
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6211      	str	r1, [r2, #32]
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29b      	uxth	r3, r3
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4619      	mov	r1, r3
 8005856:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10f      	bne.n	800587c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800586a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800587a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff fefc 	bl	80056ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b08c      	sub	sp, #48	; 0x30
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b22      	cmp	r3, #34	; 0x22
 80058d0:	f040 80ab 	bne.w	8005a2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058dc:	d117      	bne.n	800590e <UART_Receive_IT+0x50>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d113      	bne.n	800590e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	1c9a      	adds	r2, r3, #2
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	629a      	str	r2, [r3, #40]	; 0x28
 800590c:	e026      	b.n	800595c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005920:	d007      	beq.n	8005932 <UART_Receive_IT+0x74>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <UART_Receive_IT+0x82>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	b2da      	uxtb	r2, r3
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	e008      	b.n	8005952 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594c:	b2da      	uxtb	r2, r3
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29b      	uxth	r3, r3
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4619      	mov	r1, r3
 800596a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800596c:	2b00      	cmp	r3, #0
 800596e:	d15a      	bne.n	8005a26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0220 	bic.w	r2, r2, #32
 800597e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800598e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d135      	bne.n	8005a1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	330c      	adds	r3, #12
 80059bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	613b      	str	r3, [r7, #16]
   return(result);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f023 0310 	bic.w	r3, r3, #16
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d6:	623a      	str	r2, [r7, #32]
 80059d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	69f9      	ldr	r1, [r7, #28]
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e5      	bne.n	80059b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d10a      	bne.n	8005a0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fe67 	bl	80056e8 <HAL_UARTEx_RxEventCallback>
 8005a1a:	e002      	b.n	8005a22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fe4f 	bl	80056c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e002      	b.n	8005a2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e000      	b.n	8005a2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a2a:	2302      	movs	r3, #2
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3730      	adds	r7, #48	; 0x30
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a38:	b0c0      	sub	sp, #256	; 0x100
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a50:	68d9      	ldr	r1, [r3, #12]
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	ea40 0301 	orr.w	r3, r0, r1
 8005a5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a8c:	f021 010c 	bic.w	r1, r1, #12
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aae:	6999      	ldr	r1, [r3, #24]
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	ea40 0301 	orr.w	r3, r0, r1
 8005aba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b8f      	ldr	r3, [pc, #572]	; (8005d00 <UART_SetConfig+0x2cc>)
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d005      	beq.n	8005ad4 <UART_SetConfig+0xa0>
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b8d      	ldr	r3, [pc, #564]	; (8005d04 <UART_SetConfig+0x2d0>)
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d104      	bne.n	8005ade <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ad4:	f7fe ff46 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 8005ad8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005adc:	e003      	b.n	8005ae6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ade:	f7fe ff2d 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8005ae2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af0:	f040 810c 	bne.w	8005d0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005afe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b06:	4622      	mov	r2, r4
 8005b08:	462b      	mov	r3, r5
 8005b0a:	1891      	adds	r1, r2, r2
 8005b0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b0e:	415b      	adcs	r3, r3
 8005b10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b16:	4621      	mov	r1, r4
 8005b18:	eb12 0801 	adds.w	r8, r2, r1
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	eb43 0901 	adc.w	r9, r3, r1
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b36:	4690      	mov	r8, r2
 8005b38:	4699      	mov	r9, r3
 8005b3a:	4623      	mov	r3, r4
 8005b3c:	eb18 0303 	adds.w	r3, r8, r3
 8005b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b44:	462b      	mov	r3, r5
 8005b46:	eb49 0303 	adc.w	r3, r9, r3
 8005b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b62:	460b      	mov	r3, r1
 8005b64:	18db      	adds	r3, r3, r3
 8005b66:	653b      	str	r3, [r7, #80]	; 0x50
 8005b68:	4613      	mov	r3, r2
 8005b6a:	eb42 0303 	adc.w	r3, r2, r3
 8005b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b78:	f7fb f89e 	bl	8000cb8 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4b61      	ldr	r3, [pc, #388]	; (8005d08 <UART_SetConfig+0x2d4>)
 8005b82:	fba3 2302 	umull	r2, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	011c      	lsls	r4, r3, #4
 8005b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bac:	4641      	mov	r1, r8
 8005bae:	eb12 0a01 	adds.w	sl, r2, r1
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	eb43 0b01 	adc.w	fp, r3, r1
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bcc:	4692      	mov	sl, r2
 8005bce:	469b      	mov	fp, r3
 8005bd0:	4643      	mov	r3, r8
 8005bd2:	eb1a 0303 	adds.w	r3, sl, r3
 8005bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	eb4b 0303 	adc.w	r3, fp, r3
 8005be0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	18db      	adds	r3, r3, r3
 8005bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bfe:	4613      	mov	r3, r2
 8005c00:	eb42 0303 	adc.w	r3, r2, r3
 8005c04:	647b      	str	r3, [r7, #68]	; 0x44
 8005c06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c0e:	f7fb f853 	bl	8000cb8 <__aeabi_uldivmod>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4611      	mov	r1, r2
 8005c18:	4b3b      	ldr	r3, [pc, #236]	; (8005d08 <UART_SetConfig+0x2d4>)
 8005c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	2264      	movs	r2, #100	; 0x64
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	1acb      	subs	r3, r1, r3
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c2e:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <UART_SetConfig+0x2d4>)
 8005c30:	fba3 2302 	umull	r2, r3, r3, r2
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c3c:	441c      	add	r4, r3
 8005c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	1891      	adds	r1, r2, r2
 8005c56:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c58:	415b      	adcs	r3, r3
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c60:	4641      	mov	r1, r8
 8005c62:	1851      	adds	r1, r2, r1
 8005c64:	6339      	str	r1, [r7, #48]	; 0x30
 8005c66:	4649      	mov	r1, r9
 8005c68:	414b      	adcs	r3, r1
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c78:	4659      	mov	r1, fp
 8005c7a:	00cb      	lsls	r3, r1, #3
 8005c7c:	4651      	mov	r1, sl
 8005c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c82:	4651      	mov	r1, sl
 8005c84:	00ca      	lsls	r2, r1, #3
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4642      	mov	r2, r8
 8005c8e:	189b      	adds	r3, r3, r2
 8005c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c94:	464b      	mov	r3, r9
 8005c96:	460a      	mov	r2, r1
 8005c98:	eb42 0303 	adc.w	r3, r2, r3
 8005c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	18db      	adds	r3, r3, r3
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cba:	4613      	mov	r3, r2
 8005cbc:	eb42 0303 	adc.w	r3, r2, r3
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cca:	f7fa fff5 	bl	8000cb8 <__aeabi_uldivmod>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <UART_SetConfig+0x2d4>)
 8005cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	2164      	movs	r1, #100	; 0x64
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	3332      	adds	r3, #50	; 0x32
 8005ce6:	4a08      	ldr	r2, [pc, #32]	; (8005d08 <UART_SetConfig+0x2d4>)
 8005ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	f003 0207 	and.w	r2, r3, #7
 8005cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4422      	add	r2, r4
 8005cfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cfc:	e105      	b.n	8005f0a <UART_SetConfig+0x4d6>
 8005cfe:	bf00      	nop
 8005d00:	40011000 	.word	0x40011000
 8005d04:	40011400 	.word	0x40011400
 8005d08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d1e:	4642      	mov	r2, r8
 8005d20:	464b      	mov	r3, r9
 8005d22:	1891      	adds	r1, r2, r2
 8005d24:	6239      	str	r1, [r7, #32]
 8005d26:	415b      	adcs	r3, r3
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d2e:	4641      	mov	r1, r8
 8005d30:	1854      	adds	r4, r2, r1
 8005d32:	4649      	mov	r1, r9
 8005d34:	eb43 0501 	adc.w	r5, r3, r1
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	00eb      	lsls	r3, r5, #3
 8005d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d46:	00e2      	lsls	r2, r4, #3
 8005d48:	4614      	mov	r4, r2
 8005d4a:	461d      	mov	r5, r3
 8005d4c:	4643      	mov	r3, r8
 8005d4e:	18e3      	adds	r3, r4, r3
 8005d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d54:	464b      	mov	r3, r9
 8005d56:	eb45 0303 	adc.w	r3, r5, r3
 8005d5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	008b      	lsls	r3, r1, #2
 8005d7e:	4621      	mov	r1, r4
 8005d80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d84:	4621      	mov	r1, r4
 8005d86:	008a      	lsls	r2, r1, #2
 8005d88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d8c:	f7fa ff94 	bl	8000cb8 <__aeabi_uldivmod>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4b60      	ldr	r3, [pc, #384]	; (8005f18 <UART_SetConfig+0x4e4>)
 8005d96:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	011c      	lsls	r4, r3, #4
 8005d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005da8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005dac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	1891      	adds	r1, r2, r2
 8005db6:	61b9      	str	r1, [r7, #24]
 8005db8:	415b      	adcs	r3, r3
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	1851      	adds	r1, r2, r1
 8005dc4:	6139      	str	r1, [r7, #16]
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	414b      	adcs	r3, r1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dd8:	4659      	mov	r1, fp
 8005dda:	00cb      	lsls	r3, r1, #3
 8005ddc:	4651      	mov	r1, sl
 8005dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de2:	4651      	mov	r1, sl
 8005de4:	00ca      	lsls	r2, r1, #3
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	4642      	mov	r2, r8
 8005dee:	189b      	adds	r3, r3, r2
 8005df0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005df4:	464b      	mov	r3, r9
 8005df6:	460a      	mov	r2, r1
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e18:	4649      	mov	r1, r9
 8005e1a:	008b      	lsls	r3, r1, #2
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e22:	4641      	mov	r1, r8
 8005e24:	008a      	lsls	r2, r1, #2
 8005e26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e2a:	f7fa ff45 	bl	8000cb8 <__aeabi_uldivmod>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4b39      	ldr	r3, [pc, #228]	; (8005f18 <UART_SetConfig+0x4e4>)
 8005e34:	fba3 1302 	umull	r1, r3, r3, r2
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	2164      	movs	r1, #100	; 0x64
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	3332      	adds	r3, #50	; 0x32
 8005e46:	4a34      	ldr	r2, [pc, #208]	; (8005f18 <UART_SetConfig+0x4e4>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e52:	441c      	add	r4, r3
 8005e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e58:	2200      	movs	r2, #0
 8005e5a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e5c:	677a      	str	r2, [r7, #116]	; 0x74
 8005e5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e62:	4642      	mov	r2, r8
 8005e64:	464b      	mov	r3, r9
 8005e66:	1891      	adds	r1, r2, r2
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	415b      	adcs	r3, r3
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e72:	4641      	mov	r1, r8
 8005e74:	1851      	adds	r1, r2, r1
 8005e76:	6039      	str	r1, [r7, #0]
 8005e78:	4649      	mov	r1, r9
 8005e7a:	414b      	adcs	r3, r1
 8005e7c:	607b      	str	r3, [r7, #4]
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e8a:	4659      	mov	r1, fp
 8005e8c:	00cb      	lsls	r3, r1, #3
 8005e8e:	4651      	mov	r1, sl
 8005e90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e94:	4651      	mov	r1, sl
 8005e96:	00ca      	lsls	r2, r1, #3
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4642      	mov	r2, r8
 8005ea0:	189b      	adds	r3, r3, r2
 8005ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	eb42 0303 	adc.w	r3, r2, r3
 8005eac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8005eb8:	667a      	str	r2, [r7, #100]	; 0x64
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	008b      	lsls	r3, r1, #2
 8005eca:	4641      	mov	r1, r8
 8005ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	008a      	lsls	r2, r1, #2
 8005ed4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ed8:	f7fa feee 	bl	8000cb8 <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <UART_SetConfig+0x4e4>)
 8005ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	2164      	movs	r1, #100	; 0x64
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	3332      	adds	r3, #50	; 0x32
 8005ef4:	4a08      	ldr	r2, [pc, #32]	; (8005f18 <UART_SetConfig+0x4e4>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	f003 020f 	and.w	r2, r3, #15
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4422      	add	r2, r4
 8005f08:	609a      	str	r2, [r3, #8]
}
 8005f0a:	bf00      	nop
 8005f0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f10:	46bd      	mov	sp, r7
 8005f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f16:	bf00      	nop
 8005f18:	51eb851f 	.word	0x51eb851f

08005f1c <__errno>:
 8005f1c:	4b01      	ldr	r3, [pc, #4]	; (8005f24 <__errno+0x8>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000030 	.word	0x20000030

08005f28 <__libc_init_array>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4d0d      	ldr	r5, [pc, #52]	; (8005f60 <__libc_init_array+0x38>)
 8005f2c:	4c0d      	ldr	r4, [pc, #52]	; (8005f64 <__libc_init_array+0x3c>)
 8005f2e:	1b64      	subs	r4, r4, r5
 8005f30:	10a4      	asrs	r4, r4, #2
 8005f32:	2600      	movs	r6, #0
 8005f34:	42a6      	cmp	r6, r4
 8005f36:	d109      	bne.n	8005f4c <__libc_init_array+0x24>
 8005f38:	4d0b      	ldr	r5, [pc, #44]	; (8005f68 <__libc_init_array+0x40>)
 8005f3a:	4c0c      	ldr	r4, [pc, #48]	; (8005f6c <__libc_init_array+0x44>)
 8005f3c:	f004 fc90 	bl	800a860 <_init>
 8005f40:	1b64      	subs	r4, r4, r5
 8005f42:	10a4      	asrs	r4, r4, #2
 8005f44:	2600      	movs	r6, #0
 8005f46:	42a6      	cmp	r6, r4
 8005f48:	d105      	bne.n	8005f56 <__libc_init_array+0x2e>
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f50:	4798      	blx	r3
 8005f52:	3601      	adds	r6, #1
 8005f54:	e7ee      	b.n	8005f34 <__libc_init_array+0xc>
 8005f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5a:	4798      	blx	r3
 8005f5c:	3601      	adds	r6, #1
 8005f5e:	e7f2      	b.n	8005f46 <__libc_init_array+0x1e>
 8005f60:	0800bb0c 	.word	0x0800bb0c
 8005f64:	0800bb0c 	.word	0x0800bb0c
 8005f68:	0800bb0c 	.word	0x0800bb0c
 8005f6c:	0800bb10 	.word	0x0800bb10

08005f70 <memset>:
 8005f70:	4402      	add	r2, r0
 8005f72:	4603      	mov	r3, r0
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d100      	bne.n	8005f7a <memset+0xa>
 8005f78:	4770      	bx	lr
 8005f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7e:	e7f9      	b.n	8005f74 <memset+0x4>

08005f80 <__cvt>:
 8005f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	ec55 4b10 	vmov	r4, r5, d0
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	460e      	mov	r6, r1
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	462b      	mov	r3, r5
 8005f90:	bfbb      	ittet	lt
 8005f92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f96:	461d      	movlt	r5, r3
 8005f98:	2300      	movge	r3, #0
 8005f9a:	232d      	movlt	r3, #45	; 0x2d
 8005f9c:	700b      	strb	r3, [r1, #0]
 8005f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005fa4:	4691      	mov	r9, r2
 8005fa6:	f023 0820 	bic.w	r8, r3, #32
 8005faa:	bfbc      	itt	lt
 8005fac:	4622      	movlt	r2, r4
 8005fae:	4614      	movlt	r4, r2
 8005fb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fb4:	d005      	beq.n	8005fc2 <__cvt+0x42>
 8005fb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005fba:	d100      	bne.n	8005fbe <__cvt+0x3e>
 8005fbc:	3601      	adds	r6, #1
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	e000      	b.n	8005fc4 <__cvt+0x44>
 8005fc2:	2103      	movs	r1, #3
 8005fc4:	ab03      	add	r3, sp, #12
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	ab02      	add	r3, sp, #8
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	ec45 4b10 	vmov	d0, r4, r5
 8005fd0:	4653      	mov	r3, sl
 8005fd2:	4632      	mov	r2, r6
 8005fd4:	f001 fdac 	bl	8007b30 <_dtoa_r>
 8005fd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fdc:	4607      	mov	r7, r0
 8005fde:	d102      	bne.n	8005fe6 <__cvt+0x66>
 8005fe0:	f019 0f01 	tst.w	r9, #1
 8005fe4:	d022      	beq.n	800602c <__cvt+0xac>
 8005fe6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fea:	eb07 0906 	add.w	r9, r7, r6
 8005fee:	d110      	bne.n	8006012 <__cvt+0x92>
 8005ff0:	783b      	ldrb	r3, [r7, #0]
 8005ff2:	2b30      	cmp	r3, #48	; 0x30
 8005ff4:	d10a      	bne.n	800600c <__cvt+0x8c>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f7fa fd7b 	bl	8000af8 <__aeabi_dcmpeq>
 8006002:	b918      	cbnz	r0, 800600c <__cvt+0x8c>
 8006004:	f1c6 0601 	rsb	r6, r6, #1
 8006008:	f8ca 6000 	str.w	r6, [sl]
 800600c:	f8da 3000 	ldr.w	r3, [sl]
 8006010:	4499      	add	r9, r3
 8006012:	2200      	movs	r2, #0
 8006014:	2300      	movs	r3, #0
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fd6d 	bl	8000af8 <__aeabi_dcmpeq>
 800601e:	b108      	cbz	r0, 8006024 <__cvt+0xa4>
 8006020:	f8cd 900c 	str.w	r9, [sp, #12]
 8006024:	2230      	movs	r2, #48	; 0x30
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	454b      	cmp	r3, r9
 800602a:	d307      	bcc.n	800603c <__cvt+0xbc>
 800602c:	9b03      	ldr	r3, [sp, #12]
 800602e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006030:	1bdb      	subs	r3, r3, r7
 8006032:	4638      	mov	r0, r7
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	b004      	add	sp, #16
 8006038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603c:	1c59      	adds	r1, r3, #1
 800603e:	9103      	str	r1, [sp, #12]
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	e7f0      	b.n	8006026 <__cvt+0xa6>

08006044 <__exponent>:
 8006044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006046:	4603      	mov	r3, r0
 8006048:	2900      	cmp	r1, #0
 800604a:	bfb8      	it	lt
 800604c:	4249      	neglt	r1, r1
 800604e:	f803 2b02 	strb.w	r2, [r3], #2
 8006052:	bfb4      	ite	lt
 8006054:	222d      	movlt	r2, #45	; 0x2d
 8006056:	222b      	movge	r2, #43	; 0x2b
 8006058:	2909      	cmp	r1, #9
 800605a:	7042      	strb	r2, [r0, #1]
 800605c:	dd2a      	ble.n	80060b4 <__exponent+0x70>
 800605e:	f10d 0407 	add.w	r4, sp, #7
 8006062:	46a4      	mov	ip, r4
 8006064:	270a      	movs	r7, #10
 8006066:	46a6      	mov	lr, r4
 8006068:	460a      	mov	r2, r1
 800606a:	fb91 f6f7 	sdiv	r6, r1, r7
 800606e:	fb07 1516 	mls	r5, r7, r6, r1
 8006072:	3530      	adds	r5, #48	; 0x30
 8006074:	2a63      	cmp	r2, #99	; 0x63
 8006076:	f104 34ff 	add.w	r4, r4, #4294967295
 800607a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800607e:	4631      	mov	r1, r6
 8006080:	dcf1      	bgt.n	8006066 <__exponent+0x22>
 8006082:	3130      	adds	r1, #48	; 0x30
 8006084:	f1ae 0502 	sub.w	r5, lr, #2
 8006088:	f804 1c01 	strb.w	r1, [r4, #-1]
 800608c:	1c44      	adds	r4, r0, #1
 800608e:	4629      	mov	r1, r5
 8006090:	4561      	cmp	r1, ip
 8006092:	d30a      	bcc.n	80060aa <__exponent+0x66>
 8006094:	f10d 0209 	add.w	r2, sp, #9
 8006098:	eba2 020e 	sub.w	r2, r2, lr
 800609c:	4565      	cmp	r5, ip
 800609e:	bf88      	it	hi
 80060a0:	2200      	movhi	r2, #0
 80060a2:	4413      	add	r3, r2
 80060a4:	1a18      	subs	r0, r3, r0
 80060a6:	b003      	add	sp, #12
 80060a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80060b2:	e7ed      	b.n	8006090 <__exponent+0x4c>
 80060b4:	2330      	movs	r3, #48	; 0x30
 80060b6:	3130      	adds	r1, #48	; 0x30
 80060b8:	7083      	strb	r3, [r0, #2]
 80060ba:	70c1      	strb	r1, [r0, #3]
 80060bc:	1d03      	adds	r3, r0, #4
 80060be:	e7f1      	b.n	80060a4 <__exponent+0x60>

080060c0 <_printf_float>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	ed2d 8b02 	vpush	{d8}
 80060c8:	b08d      	sub	sp, #52	; 0x34
 80060ca:	460c      	mov	r4, r1
 80060cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060d0:	4616      	mov	r6, r2
 80060d2:	461f      	mov	r7, r3
 80060d4:	4605      	mov	r5, r0
 80060d6:	f002 fe89 	bl	8008dec <_localeconv_r>
 80060da:	f8d0 a000 	ldr.w	sl, [r0]
 80060de:	4650      	mov	r0, sl
 80060e0:	f7fa f888 	bl	80001f4 <strlen>
 80060e4:	2300      	movs	r3, #0
 80060e6:	930a      	str	r3, [sp, #40]	; 0x28
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	9305      	str	r3, [sp, #20]
 80060ec:	f8d8 3000 	ldr.w	r3, [r8]
 80060f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060f4:	3307      	adds	r3, #7
 80060f6:	f023 0307 	bic.w	r3, r3, #7
 80060fa:	f103 0208 	add.w	r2, r3, #8
 80060fe:	f8c8 2000 	str.w	r2, [r8]
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800610a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800610e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006112:	9307      	str	r3, [sp, #28]
 8006114:	f8cd 8018 	str.w	r8, [sp, #24]
 8006118:	ee08 0a10 	vmov	s16, r0
 800611c:	4b9f      	ldr	r3, [pc, #636]	; (800639c <_printf_float+0x2dc>)
 800611e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006122:	f04f 32ff 	mov.w	r2, #4294967295
 8006126:	f7fa fd19 	bl	8000b5c <__aeabi_dcmpun>
 800612a:	bb88      	cbnz	r0, 8006190 <_printf_float+0xd0>
 800612c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006130:	4b9a      	ldr	r3, [pc, #616]	; (800639c <_printf_float+0x2dc>)
 8006132:	f04f 32ff 	mov.w	r2, #4294967295
 8006136:	f7fa fcf3 	bl	8000b20 <__aeabi_dcmple>
 800613a:	bb48      	cbnz	r0, 8006190 <_printf_float+0xd0>
 800613c:	2200      	movs	r2, #0
 800613e:	2300      	movs	r3, #0
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa fce2 	bl	8000b0c <__aeabi_dcmplt>
 8006148:	b110      	cbz	r0, 8006150 <_printf_float+0x90>
 800614a:	232d      	movs	r3, #45	; 0x2d
 800614c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006150:	4b93      	ldr	r3, [pc, #588]	; (80063a0 <_printf_float+0x2e0>)
 8006152:	4894      	ldr	r0, [pc, #592]	; (80063a4 <_printf_float+0x2e4>)
 8006154:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006158:	bf94      	ite	ls
 800615a:	4698      	movls	r8, r3
 800615c:	4680      	movhi	r8, r0
 800615e:	2303      	movs	r3, #3
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	9b05      	ldr	r3, [sp, #20]
 8006164:	f023 0204 	bic.w	r2, r3, #4
 8006168:	6022      	str	r2, [r4, #0]
 800616a:	f04f 0900 	mov.w	r9, #0
 800616e:	9700      	str	r7, [sp, #0]
 8006170:	4633      	mov	r3, r6
 8006172:	aa0b      	add	r2, sp, #44	; 0x2c
 8006174:	4621      	mov	r1, r4
 8006176:	4628      	mov	r0, r5
 8006178:	f000 f9d8 	bl	800652c <_printf_common>
 800617c:	3001      	adds	r0, #1
 800617e:	f040 8090 	bne.w	80062a2 <_printf_float+0x1e2>
 8006182:	f04f 30ff 	mov.w	r0, #4294967295
 8006186:	b00d      	add	sp, #52	; 0x34
 8006188:	ecbd 8b02 	vpop	{d8}
 800618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	4640      	mov	r0, r8
 8006196:	4649      	mov	r1, r9
 8006198:	f7fa fce0 	bl	8000b5c <__aeabi_dcmpun>
 800619c:	b140      	cbz	r0, 80061b0 <_printf_float+0xf0>
 800619e:	464b      	mov	r3, r9
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bfbc      	itt	lt
 80061a4:	232d      	movlt	r3, #45	; 0x2d
 80061a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80061aa:	487f      	ldr	r0, [pc, #508]	; (80063a8 <_printf_float+0x2e8>)
 80061ac:	4b7f      	ldr	r3, [pc, #508]	; (80063ac <_printf_float+0x2ec>)
 80061ae:	e7d1      	b.n	8006154 <_printf_float+0x94>
 80061b0:	6863      	ldr	r3, [r4, #4]
 80061b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80061b6:	9206      	str	r2, [sp, #24]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	d13f      	bne.n	800623c <_printf_float+0x17c>
 80061bc:	2306      	movs	r3, #6
 80061be:	6063      	str	r3, [r4, #4]
 80061c0:	9b05      	ldr	r3, [sp, #20]
 80061c2:	6861      	ldr	r1, [r4, #4]
 80061c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061c8:	2300      	movs	r3, #0
 80061ca:	9303      	str	r3, [sp, #12]
 80061cc:	ab0a      	add	r3, sp, #40	; 0x28
 80061ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061d2:	ab09      	add	r3, sp, #36	; 0x24
 80061d4:	ec49 8b10 	vmov	d0, r8, r9
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	6022      	str	r2, [r4, #0]
 80061dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061e0:	4628      	mov	r0, r5
 80061e2:	f7ff fecd 	bl	8005f80 <__cvt>
 80061e6:	9b06      	ldr	r3, [sp, #24]
 80061e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061ea:	2b47      	cmp	r3, #71	; 0x47
 80061ec:	4680      	mov	r8, r0
 80061ee:	d108      	bne.n	8006202 <_printf_float+0x142>
 80061f0:	1cc8      	adds	r0, r1, #3
 80061f2:	db02      	blt.n	80061fa <_printf_float+0x13a>
 80061f4:	6863      	ldr	r3, [r4, #4]
 80061f6:	4299      	cmp	r1, r3
 80061f8:	dd41      	ble.n	800627e <_printf_float+0x1be>
 80061fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80061fe:	fa5f fb8b 	uxtb.w	fp, fp
 8006202:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006206:	d820      	bhi.n	800624a <_printf_float+0x18a>
 8006208:	3901      	subs	r1, #1
 800620a:	465a      	mov	r2, fp
 800620c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006210:	9109      	str	r1, [sp, #36]	; 0x24
 8006212:	f7ff ff17 	bl	8006044 <__exponent>
 8006216:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006218:	1813      	adds	r3, r2, r0
 800621a:	2a01      	cmp	r2, #1
 800621c:	4681      	mov	r9, r0
 800621e:	6123      	str	r3, [r4, #16]
 8006220:	dc02      	bgt.n	8006228 <_printf_float+0x168>
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	07d2      	lsls	r2, r2, #31
 8006226:	d501      	bpl.n	800622c <_printf_float+0x16c>
 8006228:	3301      	adds	r3, #1
 800622a:	6123      	str	r3, [r4, #16]
 800622c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006230:	2b00      	cmp	r3, #0
 8006232:	d09c      	beq.n	800616e <_printf_float+0xae>
 8006234:	232d      	movs	r3, #45	; 0x2d
 8006236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623a:	e798      	b.n	800616e <_printf_float+0xae>
 800623c:	9a06      	ldr	r2, [sp, #24]
 800623e:	2a47      	cmp	r2, #71	; 0x47
 8006240:	d1be      	bne.n	80061c0 <_printf_float+0x100>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1bc      	bne.n	80061c0 <_printf_float+0x100>
 8006246:	2301      	movs	r3, #1
 8006248:	e7b9      	b.n	80061be <_printf_float+0xfe>
 800624a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800624e:	d118      	bne.n	8006282 <_printf_float+0x1c2>
 8006250:	2900      	cmp	r1, #0
 8006252:	6863      	ldr	r3, [r4, #4]
 8006254:	dd0b      	ble.n	800626e <_printf_float+0x1ae>
 8006256:	6121      	str	r1, [r4, #16]
 8006258:	b913      	cbnz	r3, 8006260 <_printf_float+0x1a0>
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	07d0      	lsls	r0, r2, #31
 800625e:	d502      	bpl.n	8006266 <_printf_float+0x1a6>
 8006260:	3301      	adds	r3, #1
 8006262:	440b      	add	r3, r1
 8006264:	6123      	str	r3, [r4, #16]
 8006266:	65a1      	str	r1, [r4, #88]	; 0x58
 8006268:	f04f 0900 	mov.w	r9, #0
 800626c:	e7de      	b.n	800622c <_printf_float+0x16c>
 800626e:	b913      	cbnz	r3, 8006276 <_printf_float+0x1b6>
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	07d2      	lsls	r2, r2, #31
 8006274:	d501      	bpl.n	800627a <_printf_float+0x1ba>
 8006276:	3302      	adds	r3, #2
 8006278:	e7f4      	b.n	8006264 <_printf_float+0x1a4>
 800627a:	2301      	movs	r3, #1
 800627c:	e7f2      	b.n	8006264 <_printf_float+0x1a4>
 800627e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006284:	4299      	cmp	r1, r3
 8006286:	db05      	blt.n	8006294 <_printf_float+0x1d4>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	6121      	str	r1, [r4, #16]
 800628c:	07d8      	lsls	r0, r3, #31
 800628e:	d5ea      	bpl.n	8006266 <_printf_float+0x1a6>
 8006290:	1c4b      	adds	r3, r1, #1
 8006292:	e7e7      	b.n	8006264 <_printf_float+0x1a4>
 8006294:	2900      	cmp	r1, #0
 8006296:	bfd4      	ite	le
 8006298:	f1c1 0202 	rsble	r2, r1, #2
 800629c:	2201      	movgt	r2, #1
 800629e:	4413      	add	r3, r2
 80062a0:	e7e0      	b.n	8006264 <_printf_float+0x1a4>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	055a      	lsls	r2, r3, #21
 80062a6:	d407      	bmi.n	80062b8 <_printf_float+0x1f8>
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	4642      	mov	r2, r8
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	47b8      	blx	r7
 80062b2:	3001      	adds	r0, #1
 80062b4:	d12c      	bne.n	8006310 <_printf_float+0x250>
 80062b6:	e764      	b.n	8006182 <_printf_float+0xc2>
 80062b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062bc:	f240 80e0 	bls.w	8006480 <_printf_float+0x3c0>
 80062c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062c4:	2200      	movs	r2, #0
 80062c6:	2300      	movs	r3, #0
 80062c8:	f7fa fc16 	bl	8000af8 <__aeabi_dcmpeq>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d034      	beq.n	800633a <_printf_float+0x27a>
 80062d0:	4a37      	ldr	r2, [pc, #220]	; (80063b0 <_printf_float+0x2f0>)
 80062d2:	2301      	movs	r3, #1
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af51 	beq.w	8006182 <_printf_float+0xc2>
 80062e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062e4:	429a      	cmp	r2, r3
 80062e6:	db02      	blt.n	80062ee <_printf_float+0x22e>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	07d8      	lsls	r0, r3, #31
 80062ec:	d510      	bpl.n	8006310 <_printf_float+0x250>
 80062ee:	ee18 3a10 	vmov	r3, s16
 80062f2:	4652      	mov	r2, sl
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	f43f af41 	beq.w	8006182 <_printf_float+0xc2>
 8006300:	f04f 0800 	mov.w	r8, #0
 8006304:	f104 091a 	add.w	r9, r4, #26
 8006308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630a:	3b01      	subs	r3, #1
 800630c:	4543      	cmp	r3, r8
 800630e:	dc09      	bgt.n	8006324 <_printf_float+0x264>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	079b      	lsls	r3, r3, #30
 8006314:	f100 8105 	bmi.w	8006522 <_printf_float+0x462>
 8006318:	68e0      	ldr	r0, [r4, #12]
 800631a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800631c:	4298      	cmp	r0, r3
 800631e:	bfb8      	it	lt
 8006320:	4618      	movlt	r0, r3
 8006322:	e730      	b.n	8006186 <_printf_float+0xc6>
 8006324:	2301      	movs	r3, #1
 8006326:	464a      	mov	r2, r9
 8006328:	4631      	mov	r1, r6
 800632a:	4628      	mov	r0, r5
 800632c:	47b8      	blx	r7
 800632e:	3001      	adds	r0, #1
 8006330:	f43f af27 	beq.w	8006182 <_printf_float+0xc2>
 8006334:	f108 0801 	add.w	r8, r8, #1
 8006338:	e7e6      	b.n	8006308 <_printf_float+0x248>
 800633a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	dc39      	bgt.n	80063b4 <_printf_float+0x2f4>
 8006340:	4a1b      	ldr	r2, [pc, #108]	; (80063b0 <_printf_float+0x2f0>)
 8006342:	2301      	movs	r3, #1
 8006344:	4631      	mov	r1, r6
 8006346:	4628      	mov	r0, r5
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	f43f af19 	beq.w	8006182 <_printf_float+0xc2>
 8006350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006354:	4313      	orrs	r3, r2
 8006356:	d102      	bne.n	800635e <_printf_float+0x29e>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	07d9      	lsls	r1, r3, #31
 800635c:	d5d8      	bpl.n	8006310 <_printf_float+0x250>
 800635e:	ee18 3a10 	vmov	r3, s16
 8006362:	4652      	mov	r2, sl
 8006364:	4631      	mov	r1, r6
 8006366:	4628      	mov	r0, r5
 8006368:	47b8      	blx	r7
 800636a:	3001      	adds	r0, #1
 800636c:	f43f af09 	beq.w	8006182 <_printf_float+0xc2>
 8006370:	f04f 0900 	mov.w	r9, #0
 8006374:	f104 0a1a 	add.w	sl, r4, #26
 8006378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637a:	425b      	negs	r3, r3
 800637c:	454b      	cmp	r3, r9
 800637e:	dc01      	bgt.n	8006384 <_printf_float+0x2c4>
 8006380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006382:	e792      	b.n	80062aa <_printf_float+0x1ea>
 8006384:	2301      	movs	r3, #1
 8006386:	4652      	mov	r2, sl
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f aef7 	beq.w	8006182 <_printf_float+0xc2>
 8006394:	f109 0901 	add.w	r9, r9, #1
 8006398:	e7ee      	b.n	8006378 <_printf_float+0x2b8>
 800639a:	bf00      	nop
 800639c:	7fefffff 	.word	0x7fefffff
 80063a0:	0800b660 	.word	0x0800b660
 80063a4:	0800b664 	.word	0x0800b664
 80063a8:	0800b66c 	.word	0x0800b66c
 80063ac:	0800b668 	.word	0x0800b668
 80063b0:	0800b670 	.word	0x0800b670
 80063b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063b8:	429a      	cmp	r2, r3
 80063ba:	bfa8      	it	ge
 80063bc:	461a      	movge	r2, r3
 80063be:	2a00      	cmp	r2, #0
 80063c0:	4691      	mov	r9, r2
 80063c2:	dc37      	bgt.n	8006434 <_printf_float+0x374>
 80063c4:	f04f 0b00 	mov.w	fp, #0
 80063c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063cc:	f104 021a 	add.w	r2, r4, #26
 80063d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063d2:	9305      	str	r3, [sp, #20]
 80063d4:	eba3 0309 	sub.w	r3, r3, r9
 80063d8:	455b      	cmp	r3, fp
 80063da:	dc33      	bgt.n	8006444 <_printf_float+0x384>
 80063dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063e0:	429a      	cmp	r2, r3
 80063e2:	db3b      	blt.n	800645c <_printf_float+0x39c>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	07da      	lsls	r2, r3, #31
 80063e8:	d438      	bmi.n	800645c <_printf_float+0x39c>
 80063ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ec:	9a05      	ldr	r2, [sp, #20]
 80063ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063f0:	1a9a      	subs	r2, r3, r2
 80063f2:	eba3 0901 	sub.w	r9, r3, r1
 80063f6:	4591      	cmp	r9, r2
 80063f8:	bfa8      	it	ge
 80063fa:	4691      	movge	r9, r2
 80063fc:	f1b9 0f00 	cmp.w	r9, #0
 8006400:	dc35      	bgt.n	800646e <_printf_float+0x3ae>
 8006402:	f04f 0800 	mov.w	r8, #0
 8006406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800640a:	f104 0a1a 	add.w	sl, r4, #26
 800640e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	eba3 0309 	sub.w	r3, r3, r9
 8006418:	4543      	cmp	r3, r8
 800641a:	f77f af79 	ble.w	8006310 <_printf_float+0x250>
 800641e:	2301      	movs	r3, #1
 8006420:	4652      	mov	r2, sl
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	f43f aeaa 	beq.w	8006182 <_printf_float+0xc2>
 800642e:	f108 0801 	add.w	r8, r8, #1
 8006432:	e7ec      	b.n	800640e <_printf_float+0x34e>
 8006434:	4613      	mov	r3, r2
 8006436:	4631      	mov	r1, r6
 8006438:	4642      	mov	r2, r8
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	d1c0      	bne.n	80063c4 <_printf_float+0x304>
 8006442:	e69e      	b.n	8006182 <_printf_float+0xc2>
 8006444:	2301      	movs	r3, #1
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	9205      	str	r2, [sp, #20]
 800644c:	47b8      	blx	r7
 800644e:	3001      	adds	r0, #1
 8006450:	f43f ae97 	beq.w	8006182 <_printf_float+0xc2>
 8006454:	9a05      	ldr	r2, [sp, #20]
 8006456:	f10b 0b01 	add.w	fp, fp, #1
 800645a:	e7b9      	b.n	80063d0 <_printf_float+0x310>
 800645c:	ee18 3a10 	vmov	r3, s16
 8006460:	4652      	mov	r2, sl
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	47b8      	blx	r7
 8006468:	3001      	adds	r0, #1
 800646a:	d1be      	bne.n	80063ea <_printf_float+0x32a>
 800646c:	e689      	b.n	8006182 <_printf_float+0xc2>
 800646e:	9a05      	ldr	r2, [sp, #20]
 8006470:	464b      	mov	r3, r9
 8006472:	4442      	add	r2, r8
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	d1c1      	bne.n	8006402 <_printf_float+0x342>
 800647e:	e680      	b.n	8006182 <_printf_float+0xc2>
 8006480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006482:	2a01      	cmp	r2, #1
 8006484:	dc01      	bgt.n	800648a <_printf_float+0x3ca>
 8006486:	07db      	lsls	r3, r3, #31
 8006488:	d538      	bpl.n	80064fc <_printf_float+0x43c>
 800648a:	2301      	movs	r3, #1
 800648c:	4642      	mov	r2, r8
 800648e:	4631      	mov	r1, r6
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	f43f ae74 	beq.w	8006182 <_printf_float+0xc2>
 800649a:	ee18 3a10 	vmov	r3, s16
 800649e:	4652      	mov	r2, sl
 80064a0:	4631      	mov	r1, r6
 80064a2:	4628      	mov	r0, r5
 80064a4:	47b8      	blx	r7
 80064a6:	3001      	adds	r0, #1
 80064a8:	f43f ae6b 	beq.w	8006182 <_printf_float+0xc2>
 80064ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064b0:	2200      	movs	r2, #0
 80064b2:	2300      	movs	r3, #0
 80064b4:	f7fa fb20 	bl	8000af8 <__aeabi_dcmpeq>
 80064b8:	b9d8      	cbnz	r0, 80064f2 <_printf_float+0x432>
 80064ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064bc:	f108 0201 	add.w	r2, r8, #1
 80064c0:	3b01      	subs	r3, #1
 80064c2:	4631      	mov	r1, r6
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b8      	blx	r7
 80064c8:	3001      	adds	r0, #1
 80064ca:	d10e      	bne.n	80064ea <_printf_float+0x42a>
 80064cc:	e659      	b.n	8006182 <_printf_float+0xc2>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4652      	mov	r2, sl
 80064d2:	4631      	mov	r1, r6
 80064d4:	4628      	mov	r0, r5
 80064d6:	47b8      	blx	r7
 80064d8:	3001      	adds	r0, #1
 80064da:	f43f ae52 	beq.w	8006182 <_printf_float+0xc2>
 80064de:	f108 0801 	add.w	r8, r8, #1
 80064e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e4:	3b01      	subs	r3, #1
 80064e6:	4543      	cmp	r3, r8
 80064e8:	dcf1      	bgt.n	80064ce <_printf_float+0x40e>
 80064ea:	464b      	mov	r3, r9
 80064ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064f0:	e6dc      	b.n	80062ac <_printf_float+0x1ec>
 80064f2:	f04f 0800 	mov.w	r8, #0
 80064f6:	f104 0a1a 	add.w	sl, r4, #26
 80064fa:	e7f2      	b.n	80064e2 <_printf_float+0x422>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4642      	mov	r2, r8
 8006500:	e7df      	b.n	80064c2 <_printf_float+0x402>
 8006502:	2301      	movs	r3, #1
 8006504:	464a      	mov	r2, r9
 8006506:	4631      	mov	r1, r6
 8006508:	4628      	mov	r0, r5
 800650a:	47b8      	blx	r7
 800650c:	3001      	adds	r0, #1
 800650e:	f43f ae38 	beq.w	8006182 <_printf_float+0xc2>
 8006512:	f108 0801 	add.w	r8, r8, #1
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800651a:	1a5b      	subs	r3, r3, r1
 800651c:	4543      	cmp	r3, r8
 800651e:	dcf0      	bgt.n	8006502 <_printf_float+0x442>
 8006520:	e6fa      	b.n	8006318 <_printf_float+0x258>
 8006522:	f04f 0800 	mov.w	r8, #0
 8006526:	f104 0919 	add.w	r9, r4, #25
 800652a:	e7f4      	b.n	8006516 <_printf_float+0x456>

0800652c <_printf_common>:
 800652c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	4616      	mov	r6, r2
 8006532:	4699      	mov	r9, r3
 8006534:	688a      	ldr	r2, [r1, #8]
 8006536:	690b      	ldr	r3, [r1, #16]
 8006538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800653c:	4293      	cmp	r3, r2
 800653e:	bfb8      	it	lt
 8006540:	4613      	movlt	r3, r2
 8006542:	6033      	str	r3, [r6, #0]
 8006544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006548:	4607      	mov	r7, r0
 800654a:	460c      	mov	r4, r1
 800654c:	b10a      	cbz	r2, 8006552 <_printf_common+0x26>
 800654e:	3301      	adds	r3, #1
 8006550:	6033      	str	r3, [r6, #0]
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	0699      	lsls	r1, r3, #26
 8006556:	bf42      	ittt	mi
 8006558:	6833      	ldrmi	r3, [r6, #0]
 800655a:	3302      	addmi	r3, #2
 800655c:	6033      	strmi	r3, [r6, #0]
 800655e:	6825      	ldr	r5, [r4, #0]
 8006560:	f015 0506 	ands.w	r5, r5, #6
 8006564:	d106      	bne.n	8006574 <_printf_common+0x48>
 8006566:	f104 0a19 	add.w	sl, r4, #25
 800656a:	68e3      	ldr	r3, [r4, #12]
 800656c:	6832      	ldr	r2, [r6, #0]
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	42ab      	cmp	r3, r5
 8006572:	dc26      	bgt.n	80065c2 <_printf_common+0x96>
 8006574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006578:	1e13      	subs	r3, r2, #0
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	bf18      	it	ne
 800657e:	2301      	movne	r3, #1
 8006580:	0692      	lsls	r2, r2, #26
 8006582:	d42b      	bmi.n	80065dc <_printf_common+0xb0>
 8006584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006588:	4649      	mov	r1, r9
 800658a:	4638      	mov	r0, r7
 800658c:	47c0      	blx	r8
 800658e:	3001      	adds	r0, #1
 8006590:	d01e      	beq.n	80065d0 <_printf_common+0xa4>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	68e5      	ldr	r5, [r4, #12]
 8006596:	6832      	ldr	r2, [r6, #0]
 8006598:	f003 0306 	and.w	r3, r3, #6
 800659c:	2b04      	cmp	r3, #4
 800659e:	bf08      	it	eq
 80065a0:	1aad      	subeq	r5, r5, r2
 80065a2:	68a3      	ldr	r3, [r4, #8]
 80065a4:	6922      	ldr	r2, [r4, #16]
 80065a6:	bf0c      	ite	eq
 80065a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065ac:	2500      	movne	r5, #0
 80065ae:	4293      	cmp	r3, r2
 80065b0:	bfc4      	itt	gt
 80065b2:	1a9b      	subgt	r3, r3, r2
 80065b4:	18ed      	addgt	r5, r5, r3
 80065b6:	2600      	movs	r6, #0
 80065b8:	341a      	adds	r4, #26
 80065ba:	42b5      	cmp	r5, r6
 80065bc:	d11a      	bne.n	80065f4 <_printf_common+0xc8>
 80065be:	2000      	movs	r0, #0
 80065c0:	e008      	b.n	80065d4 <_printf_common+0xa8>
 80065c2:	2301      	movs	r3, #1
 80065c4:	4652      	mov	r2, sl
 80065c6:	4649      	mov	r1, r9
 80065c8:	4638      	mov	r0, r7
 80065ca:	47c0      	blx	r8
 80065cc:	3001      	adds	r0, #1
 80065ce:	d103      	bne.n	80065d8 <_printf_common+0xac>
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295
 80065d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d8:	3501      	adds	r5, #1
 80065da:	e7c6      	b.n	800656a <_printf_common+0x3e>
 80065dc:	18e1      	adds	r1, r4, r3
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	2030      	movs	r0, #48	; 0x30
 80065e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065e6:	4422      	add	r2, r4
 80065e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f0:	3302      	adds	r3, #2
 80065f2:	e7c7      	b.n	8006584 <_printf_common+0x58>
 80065f4:	2301      	movs	r3, #1
 80065f6:	4622      	mov	r2, r4
 80065f8:	4649      	mov	r1, r9
 80065fa:	4638      	mov	r0, r7
 80065fc:	47c0      	blx	r8
 80065fe:	3001      	adds	r0, #1
 8006600:	d0e6      	beq.n	80065d0 <_printf_common+0xa4>
 8006602:	3601      	adds	r6, #1
 8006604:	e7d9      	b.n	80065ba <_printf_common+0x8e>
	...

08006608 <_printf_i>:
 8006608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	7e0f      	ldrb	r7, [r1, #24]
 800660e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006610:	2f78      	cmp	r7, #120	; 0x78
 8006612:	4691      	mov	r9, r2
 8006614:	4680      	mov	r8, r0
 8006616:	460c      	mov	r4, r1
 8006618:	469a      	mov	sl, r3
 800661a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800661e:	d807      	bhi.n	8006630 <_printf_i+0x28>
 8006620:	2f62      	cmp	r7, #98	; 0x62
 8006622:	d80a      	bhi.n	800663a <_printf_i+0x32>
 8006624:	2f00      	cmp	r7, #0
 8006626:	f000 80d8 	beq.w	80067da <_printf_i+0x1d2>
 800662a:	2f58      	cmp	r7, #88	; 0x58
 800662c:	f000 80a3 	beq.w	8006776 <_printf_i+0x16e>
 8006630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006638:	e03a      	b.n	80066b0 <_printf_i+0xa8>
 800663a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800663e:	2b15      	cmp	r3, #21
 8006640:	d8f6      	bhi.n	8006630 <_printf_i+0x28>
 8006642:	a101      	add	r1, pc, #4	; (adr r1, 8006648 <_printf_i+0x40>)
 8006644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006648:	080066a1 	.word	0x080066a1
 800664c:	080066b5 	.word	0x080066b5
 8006650:	08006631 	.word	0x08006631
 8006654:	08006631 	.word	0x08006631
 8006658:	08006631 	.word	0x08006631
 800665c:	08006631 	.word	0x08006631
 8006660:	080066b5 	.word	0x080066b5
 8006664:	08006631 	.word	0x08006631
 8006668:	08006631 	.word	0x08006631
 800666c:	08006631 	.word	0x08006631
 8006670:	08006631 	.word	0x08006631
 8006674:	080067c1 	.word	0x080067c1
 8006678:	080066e5 	.word	0x080066e5
 800667c:	080067a3 	.word	0x080067a3
 8006680:	08006631 	.word	0x08006631
 8006684:	08006631 	.word	0x08006631
 8006688:	080067e3 	.word	0x080067e3
 800668c:	08006631 	.word	0x08006631
 8006690:	080066e5 	.word	0x080066e5
 8006694:	08006631 	.word	0x08006631
 8006698:	08006631 	.word	0x08006631
 800669c:	080067ab 	.word	0x080067ab
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	1d1a      	adds	r2, r3, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	602a      	str	r2, [r5, #0]
 80066a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0a3      	b.n	80067fc <_printf_i+0x1f4>
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	6829      	ldr	r1, [r5, #0]
 80066b8:	0606      	lsls	r6, r0, #24
 80066ba:	f101 0304 	add.w	r3, r1, #4
 80066be:	d50a      	bpl.n	80066d6 <_printf_i+0xce>
 80066c0:	680e      	ldr	r6, [r1, #0]
 80066c2:	602b      	str	r3, [r5, #0]
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	da03      	bge.n	80066d0 <_printf_i+0xc8>
 80066c8:	232d      	movs	r3, #45	; 0x2d
 80066ca:	4276      	negs	r6, r6
 80066cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d0:	485e      	ldr	r0, [pc, #376]	; (800684c <_printf_i+0x244>)
 80066d2:	230a      	movs	r3, #10
 80066d4:	e019      	b.n	800670a <_printf_i+0x102>
 80066d6:	680e      	ldr	r6, [r1, #0]
 80066d8:	602b      	str	r3, [r5, #0]
 80066da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066de:	bf18      	it	ne
 80066e0:	b236      	sxthne	r6, r6
 80066e2:	e7ef      	b.n	80066c4 <_printf_i+0xbc>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	1d19      	adds	r1, r3, #4
 80066ea:	6029      	str	r1, [r5, #0]
 80066ec:	0601      	lsls	r1, r0, #24
 80066ee:	d501      	bpl.n	80066f4 <_printf_i+0xec>
 80066f0:	681e      	ldr	r6, [r3, #0]
 80066f2:	e002      	b.n	80066fa <_printf_i+0xf2>
 80066f4:	0646      	lsls	r6, r0, #25
 80066f6:	d5fb      	bpl.n	80066f0 <_printf_i+0xe8>
 80066f8:	881e      	ldrh	r6, [r3, #0]
 80066fa:	4854      	ldr	r0, [pc, #336]	; (800684c <_printf_i+0x244>)
 80066fc:	2f6f      	cmp	r7, #111	; 0x6f
 80066fe:	bf0c      	ite	eq
 8006700:	2308      	moveq	r3, #8
 8006702:	230a      	movne	r3, #10
 8006704:	2100      	movs	r1, #0
 8006706:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800670a:	6865      	ldr	r5, [r4, #4]
 800670c:	60a5      	str	r5, [r4, #8]
 800670e:	2d00      	cmp	r5, #0
 8006710:	bfa2      	ittt	ge
 8006712:	6821      	ldrge	r1, [r4, #0]
 8006714:	f021 0104 	bicge.w	r1, r1, #4
 8006718:	6021      	strge	r1, [r4, #0]
 800671a:	b90e      	cbnz	r6, 8006720 <_printf_i+0x118>
 800671c:	2d00      	cmp	r5, #0
 800671e:	d04d      	beq.n	80067bc <_printf_i+0x1b4>
 8006720:	4615      	mov	r5, r2
 8006722:	fbb6 f1f3 	udiv	r1, r6, r3
 8006726:	fb03 6711 	mls	r7, r3, r1, r6
 800672a:	5dc7      	ldrb	r7, [r0, r7]
 800672c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006730:	4637      	mov	r7, r6
 8006732:	42bb      	cmp	r3, r7
 8006734:	460e      	mov	r6, r1
 8006736:	d9f4      	bls.n	8006722 <_printf_i+0x11a>
 8006738:	2b08      	cmp	r3, #8
 800673a:	d10b      	bne.n	8006754 <_printf_i+0x14c>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	07de      	lsls	r6, r3, #31
 8006740:	d508      	bpl.n	8006754 <_printf_i+0x14c>
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	6861      	ldr	r1, [r4, #4]
 8006746:	4299      	cmp	r1, r3
 8006748:	bfde      	ittt	le
 800674a:	2330      	movle	r3, #48	; 0x30
 800674c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006750:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006754:	1b52      	subs	r2, r2, r5
 8006756:	6122      	str	r2, [r4, #16]
 8006758:	f8cd a000 	str.w	sl, [sp]
 800675c:	464b      	mov	r3, r9
 800675e:	aa03      	add	r2, sp, #12
 8006760:	4621      	mov	r1, r4
 8006762:	4640      	mov	r0, r8
 8006764:	f7ff fee2 	bl	800652c <_printf_common>
 8006768:	3001      	adds	r0, #1
 800676a:	d14c      	bne.n	8006806 <_printf_i+0x1fe>
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	b004      	add	sp, #16
 8006772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006776:	4835      	ldr	r0, [pc, #212]	; (800684c <_printf_i+0x244>)
 8006778:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800677c:	6829      	ldr	r1, [r5, #0]
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f851 6b04 	ldr.w	r6, [r1], #4
 8006784:	6029      	str	r1, [r5, #0]
 8006786:	061d      	lsls	r5, r3, #24
 8006788:	d514      	bpl.n	80067b4 <_printf_i+0x1ac>
 800678a:	07df      	lsls	r7, r3, #31
 800678c:	bf44      	itt	mi
 800678e:	f043 0320 	orrmi.w	r3, r3, #32
 8006792:	6023      	strmi	r3, [r4, #0]
 8006794:	b91e      	cbnz	r6, 800679e <_printf_i+0x196>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	f023 0320 	bic.w	r3, r3, #32
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	2310      	movs	r3, #16
 80067a0:	e7b0      	b.n	8006704 <_printf_i+0xfc>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	f043 0320 	orr.w	r3, r3, #32
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	2378      	movs	r3, #120	; 0x78
 80067ac:	4828      	ldr	r0, [pc, #160]	; (8006850 <_printf_i+0x248>)
 80067ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067b2:	e7e3      	b.n	800677c <_printf_i+0x174>
 80067b4:	0659      	lsls	r1, r3, #25
 80067b6:	bf48      	it	mi
 80067b8:	b2b6      	uxthmi	r6, r6
 80067ba:	e7e6      	b.n	800678a <_printf_i+0x182>
 80067bc:	4615      	mov	r5, r2
 80067be:	e7bb      	b.n	8006738 <_printf_i+0x130>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	6826      	ldr	r6, [r4, #0]
 80067c4:	6961      	ldr	r1, [r4, #20]
 80067c6:	1d18      	adds	r0, r3, #4
 80067c8:	6028      	str	r0, [r5, #0]
 80067ca:	0635      	lsls	r5, r6, #24
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	d501      	bpl.n	80067d4 <_printf_i+0x1cc>
 80067d0:	6019      	str	r1, [r3, #0]
 80067d2:	e002      	b.n	80067da <_printf_i+0x1d2>
 80067d4:	0670      	lsls	r0, r6, #25
 80067d6:	d5fb      	bpl.n	80067d0 <_printf_i+0x1c8>
 80067d8:	8019      	strh	r1, [r3, #0]
 80067da:	2300      	movs	r3, #0
 80067dc:	6123      	str	r3, [r4, #16]
 80067de:	4615      	mov	r5, r2
 80067e0:	e7ba      	b.n	8006758 <_printf_i+0x150>
 80067e2:	682b      	ldr	r3, [r5, #0]
 80067e4:	1d1a      	adds	r2, r3, #4
 80067e6:	602a      	str	r2, [r5, #0]
 80067e8:	681d      	ldr	r5, [r3, #0]
 80067ea:	6862      	ldr	r2, [r4, #4]
 80067ec:	2100      	movs	r1, #0
 80067ee:	4628      	mov	r0, r5
 80067f0:	f7f9 fd0e 	bl	8000210 <memchr>
 80067f4:	b108      	cbz	r0, 80067fa <_printf_i+0x1f2>
 80067f6:	1b40      	subs	r0, r0, r5
 80067f8:	6060      	str	r0, [r4, #4]
 80067fa:	6863      	ldr	r3, [r4, #4]
 80067fc:	6123      	str	r3, [r4, #16]
 80067fe:	2300      	movs	r3, #0
 8006800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006804:	e7a8      	b.n	8006758 <_printf_i+0x150>
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	462a      	mov	r2, r5
 800680a:	4649      	mov	r1, r9
 800680c:	4640      	mov	r0, r8
 800680e:	47d0      	blx	sl
 8006810:	3001      	adds	r0, #1
 8006812:	d0ab      	beq.n	800676c <_printf_i+0x164>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	079b      	lsls	r3, r3, #30
 8006818:	d413      	bmi.n	8006842 <_printf_i+0x23a>
 800681a:	68e0      	ldr	r0, [r4, #12]
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	4298      	cmp	r0, r3
 8006820:	bfb8      	it	lt
 8006822:	4618      	movlt	r0, r3
 8006824:	e7a4      	b.n	8006770 <_printf_i+0x168>
 8006826:	2301      	movs	r3, #1
 8006828:	4632      	mov	r2, r6
 800682a:	4649      	mov	r1, r9
 800682c:	4640      	mov	r0, r8
 800682e:	47d0      	blx	sl
 8006830:	3001      	adds	r0, #1
 8006832:	d09b      	beq.n	800676c <_printf_i+0x164>
 8006834:	3501      	adds	r5, #1
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	9903      	ldr	r1, [sp, #12]
 800683a:	1a5b      	subs	r3, r3, r1
 800683c:	42ab      	cmp	r3, r5
 800683e:	dcf2      	bgt.n	8006826 <_printf_i+0x21e>
 8006840:	e7eb      	b.n	800681a <_printf_i+0x212>
 8006842:	2500      	movs	r5, #0
 8006844:	f104 0619 	add.w	r6, r4, #25
 8006848:	e7f5      	b.n	8006836 <_printf_i+0x22e>
 800684a:	bf00      	nop
 800684c:	0800b672 	.word	0x0800b672
 8006850:	0800b683 	.word	0x0800b683

08006854 <_scanf_float>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	b087      	sub	sp, #28
 800685a:	4617      	mov	r7, r2
 800685c:	9303      	str	r3, [sp, #12]
 800685e:	688b      	ldr	r3, [r1, #8]
 8006860:	1e5a      	subs	r2, r3, #1
 8006862:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006866:	bf83      	ittte	hi
 8006868:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800686c:	195b      	addhi	r3, r3, r5
 800686e:	9302      	strhi	r3, [sp, #8]
 8006870:	2300      	movls	r3, #0
 8006872:	bf86      	itte	hi
 8006874:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006878:	608b      	strhi	r3, [r1, #8]
 800687a:	9302      	strls	r3, [sp, #8]
 800687c:	680b      	ldr	r3, [r1, #0]
 800687e:	468b      	mov	fp, r1
 8006880:	2500      	movs	r5, #0
 8006882:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006886:	f84b 3b1c 	str.w	r3, [fp], #28
 800688a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800688e:	4680      	mov	r8, r0
 8006890:	460c      	mov	r4, r1
 8006892:	465e      	mov	r6, fp
 8006894:	46aa      	mov	sl, r5
 8006896:	46a9      	mov	r9, r5
 8006898:	9501      	str	r5, [sp, #4]
 800689a:	68a2      	ldr	r2, [r4, #8]
 800689c:	b152      	cbz	r2, 80068b4 <_scanf_float+0x60>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b4e      	cmp	r3, #78	; 0x4e
 80068a4:	d864      	bhi.n	8006970 <_scanf_float+0x11c>
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d83c      	bhi.n	8006924 <_scanf_float+0xd0>
 80068aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80068ae:	b2c8      	uxtb	r0, r1
 80068b0:	280e      	cmp	r0, #14
 80068b2:	d93a      	bls.n	800692a <_scanf_float+0xd6>
 80068b4:	f1b9 0f00 	cmp.w	r9, #0
 80068b8:	d003      	beq.n	80068c2 <_scanf_float+0x6e>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068c6:	f1ba 0f01 	cmp.w	sl, #1
 80068ca:	f200 8113 	bhi.w	8006af4 <_scanf_float+0x2a0>
 80068ce:	455e      	cmp	r6, fp
 80068d0:	f200 8105 	bhi.w	8006ade <_scanf_float+0x28a>
 80068d4:	2501      	movs	r5, #1
 80068d6:	4628      	mov	r0, r5
 80068d8:	b007      	add	sp, #28
 80068da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80068e2:	2a0d      	cmp	r2, #13
 80068e4:	d8e6      	bhi.n	80068b4 <_scanf_float+0x60>
 80068e6:	a101      	add	r1, pc, #4	; (adr r1, 80068ec <_scanf_float+0x98>)
 80068e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068ec:	08006a2b 	.word	0x08006a2b
 80068f0:	080068b5 	.word	0x080068b5
 80068f4:	080068b5 	.word	0x080068b5
 80068f8:	080068b5 	.word	0x080068b5
 80068fc:	08006a8b 	.word	0x08006a8b
 8006900:	08006a63 	.word	0x08006a63
 8006904:	080068b5 	.word	0x080068b5
 8006908:	080068b5 	.word	0x080068b5
 800690c:	08006a39 	.word	0x08006a39
 8006910:	080068b5 	.word	0x080068b5
 8006914:	080068b5 	.word	0x080068b5
 8006918:	080068b5 	.word	0x080068b5
 800691c:	080068b5 	.word	0x080068b5
 8006920:	080069f1 	.word	0x080069f1
 8006924:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006928:	e7db      	b.n	80068e2 <_scanf_float+0x8e>
 800692a:	290e      	cmp	r1, #14
 800692c:	d8c2      	bhi.n	80068b4 <_scanf_float+0x60>
 800692e:	a001      	add	r0, pc, #4	; (adr r0, 8006934 <_scanf_float+0xe0>)
 8006930:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006934:	080069e3 	.word	0x080069e3
 8006938:	080068b5 	.word	0x080068b5
 800693c:	080069e3 	.word	0x080069e3
 8006940:	08006a77 	.word	0x08006a77
 8006944:	080068b5 	.word	0x080068b5
 8006948:	08006991 	.word	0x08006991
 800694c:	080069cd 	.word	0x080069cd
 8006950:	080069cd 	.word	0x080069cd
 8006954:	080069cd 	.word	0x080069cd
 8006958:	080069cd 	.word	0x080069cd
 800695c:	080069cd 	.word	0x080069cd
 8006960:	080069cd 	.word	0x080069cd
 8006964:	080069cd 	.word	0x080069cd
 8006968:	080069cd 	.word	0x080069cd
 800696c:	080069cd 	.word	0x080069cd
 8006970:	2b6e      	cmp	r3, #110	; 0x6e
 8006972:	d809      	bhi.n	8006988 <_scanf_float+0x134>
 8006974:	2b60      	cmp	r3, #96	; 0x60
 8006976:	d8b2      	bhi.n	80068de <_scanf_float+0x8a>
 8006978:	2b54      	cmp	r3, #84	; 0x54
 800697a:	d077      	beq.n	8006a6c <_scanf_float+0x218>
 800697c:	2b59      	cmp	r3, #89	; 0x59
 800697e:	d199      	bne.n	80068b4 <_scanf_float+0x60>
 8006980:	2d07      	cmp	r5, #7
 8006982:	d197      	bne.n	80068b4 <_scanf_float+0x60>
 8006984:	2508      	movs	r5, #8
 8006986:	e029      	b.n	80069dc <_scanf_float+0x188>
 8006988:	2b74      	cmp	r3, #116	; 0x74
 800698a:	d06f      	beq.n	8006a6c <_scanf_float+0x218>
 800698c:	2b79      	cmp	r3, #121	; 0x79
 800698e:	e7f6      	b.n	800697e <_scanf_float+0x12a>
 8006990:	6821      	ldr	r1, [r4, #0]
 8006992:	05c8      	lsls	r0, r1, #23
 8006994:	d51a      	bpl.n	80069cc <_scanf_float+0x178>
 8006996:	9b02      	ldr	r3, [sp, #8]
 8006998:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800699c:	6021      	str	r1, [r4, #0]
 800699e:	f109 0901 	add.w	r9, r9, #1
 80069a2:	b11b      	cbz	r3, 80069ac <_scanf_float+0x158>
 80069a4:	3b01      	subs	r3, #1
 80069a6:	3201      	adds	r2, #1
 80069a8:	9302      	str	r3, [sp, #8]
 80069aa:	60a2      	str	r2, [r4, #8]
 80069ac:	68a3      	ldr	r3, [r4, #8]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	60a3      	str	r3, [r4, #8]
 80069b2:	6923      	ldr	r3, [r4, #16]
 80069b4:	3301      	adds	r3, #1
 80069b6:	6123      	str	r3, [r4, #16]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	607b      	str	r3, [r7, #4]
 80069c0:	f340 8084 	ble.w	8006acc <_scanf_float+0x278>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	3301      	adds	r3, #1
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	e766      	b.n	800689a <_scanf_float+0x46>
 80069cc:	eb1a 0f05 	cmn.w	sl, r5
 80069d0:	f47f af70 	bne.w	80068b4 <_scanf_float+0x60>
 80069d4:	6822      	ldr	r2, [r4, #0]
 80069d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80069da:	6022      	str	r2, [r4, #0]
 80069dc:	f806 3b01 	strb.w	r3, [r6], #1
 80069e0:	e7e4      	b.n	80069ac <_scanf_float+0x158>
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	0610      	lsls	r0, r2, #24
 80069e6:	f57f af65 	bpl.w	80068b4 <_scanf_float+0x60>
 80069ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ee:	e7f4      	b.n	80069da <_scanf_float+0x186>
 80069f0:	f1ba 0f00 	cmp.w	sl, #0
 80069f4:	d10e      	bne.n	8006a14 <_scanf_float+0x1c0>
 80069f6:	f1b9 0f00 	cmp.w	r9, #0
 80069fa:	d10e      	bne.n	8006a1a <_scanf_float+0x1c6>
 80069fc:	6822      	ldr	r2, [r4, #0]
 80069fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a06:	d108      	bne.n	8006a1a <_scanf_float+0x1c6>
 8006a08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a0c:	6022      	str	r2, [r4, #0]
 8006a0e:	f04f 0a01 	mov.w	sl, #1
 8006a12:	e7e3      	b.n	80069dc <_scanf_float+0x188>
 8006a14:	f1ba 0f02 	cmp.w	sl, #2
 8006a18:	d055      	beq.n	8006ac6 <_scanf_float+0x272>
 8006a1a:	2d01      	cmp	r5, #1
 8006a1c:	d002      	beq.n	8006a24 <_scanf_float+0x1d0>
 8006a1e:	2d04      	cmp	r5, #4
 8006a20:	f47f af48 	bne.w	80068b4 <_scanf_float+0x60>
 8006a24:	3501      	adds	r5, #1
 8006a26:	b2ed      	uxtb	r5, r5
 8006a28:	e7d8      	b.n	80069dc <_scanf_float+0x188>
 8006a2a:	f1ba 0f01 	cmp.w	sl, #1
 8006a2e:	f47f af41 	bne.w	80068b4 <_scanf_float+0x60>
 8006a32:	f04f 0a02 	mov.w	sl, #2
 8006a36:	e7d1      	b.n	80069dc <_scanf_float+0x188>
 8006a38:	b97d      	cbnz	r5, 8006a5a <_scanf_float+0x206>
 8006a3a:	f1b9 0f00 	cmp.w	r9, #0
 8006a3e:	f47f af3c 	bne.w	80068ba <_scanf_float+0x66>
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a4c:	f47f af39 	bne.w	80068c2 <_scanf_float+0x6e>
 8006a50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a54:	6022      	str	r2, [r4, #0]
 8006a56:	2501      	movs	r5, #1
 8006a58:	e7c0      	b.n	80069dc <_scanf_float+0x188>
 8006a5a:	2d03      	cmp	r5, #3
 8006a5c:	d0e2      	beq.n	8006a24 <_scanf_float+0x1d0>
 8006a5e:	2d05      	cmp	r5, #5
 8006a60:	e7de      	b.n	8006a20 <_scanf_float+0x1cc>
 8006a62:	2d02      	cmp	r5, #2
 8006a64:	f47f af26 	bne.w	80068b4 <_scanf_float+0x60>
 8006a68:	2503      	movs	r5, #3
 8006a6a:	e7b7      	b.n	80069dc <_scanf_float+0x188>
 8006a6c:	2d06      	cmp	r5, #6
 8006a6e:	f47f af21 	bne.w	80068b4 <_scanf_float+0x60>
 8006a72:	2507      	movs	r5, #7
 8006a74:	e7b2      	b.n	80069dc <_scanf_float+0x188>
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	0591      	lsls	r1, r2, #22
 8006a7a:	f57f af1b 	bpl.w	80068b4 <_scanf_float+0x60>
 8006a7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a82:	6022      	str	r2, [r4, #0]
 8006a84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a88:	e7a8      	b.n	80069dc <_scanf_float+0x188>
 8006a8a:	6822      	ldr	r2, [r4, #0]
 8006a8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a94:	d006      	beq.n	8006aa4 <_scanf_float+0x250>
 8006a96:	0550      	lsls	r0, r2, #21
 8006a98:	f57f af0c 	bpl.w	80068b4 <_scanf_float+0x60>
 8006a9c:	f1b9 0f00 	cmp.w	r9, #0
 8006aa0:	f43f af0f 	beq.w	80068c2 <_scanf_float+0x6e>
 8006aa4:	0591      	lsls	r1, r2, #22
 8006aa6:	bf58      	it	pl
 8006aa8:	9901      	ldrpl	r1, [sp, #4]
 8006aaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006aae:	bf58      	it	pl
 8006ab0:	eba9 0101 	subpl.w	r1, r9, r1
 8006ab4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006ab8:	bf58      	it	pl
 8006aba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006abe:	6022      	str	r2, [r4, #0]
 8006ac0:	f04f 0900 	mov.w	r9, #0
 8006ac4:	e78a      	b.n	80069dc <_scanf_float+0x188>
 8006ac6:	f04f 0a03 	mov.w	sl, #3
 8006aca:	e787      	b.n	80069dc <_scanf_float+0x188>
 8006acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4798      	blx	r3
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	f43f aedf 	beq.w	800689a <_scanf_float+0x46>
 8006adc:	e6ea      	b.n	80068b4 <_scanf_float+0x60>
 8006ade:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ae2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ae6:	463a      	mov	r2, r7
 8006ae8:	4640      	mov	r0, r8
 8006aea:	4798      	blx	r3
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	6123      	str	r3, [r4, #16]
 8006af2:	e6ec      	b.n	80068ce <_scanf_float+0x7a>
 8006af4:	1e6b      	subs	r3, r5, #1
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d825      	bhi.n	8006b46 <_scanf_float+0x2f2>
 8006afa:	2d02      	cmp	r5, #2
 8006afc:	d836      	bhi.n	8006b6c <_scanf_float+0x318>
 8006afe:	455e      	cmp	r6, fp
 8006b00:	f67f aee8 	bls.w	80068d4 <_scanf_float+0x80>
 8006b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b0c:	463a      	mov	r2, r7
 8006b0e:	4640      	mov	r0, r8
 8006b10:	4798      	blx	r3
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	e7f1      	b.n	8006afe <_scanf_float+0x2aa>
 8006b1a:	9802      	ldr	r0, [sp, #8]
 8006b1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b24:	9002      	str	r0, [sp, #8]
 8006b26:	463a      	mov	r2, r7
 8006b28:	4640      	mov	r0, r8
 8006b2a:	4798      	blx	r3
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	6123      	str	r3, [r4, #16]
 8006b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b36:	fa5f fa8a 	uxtb.w	sl, sl
 8006b3a:	f1ba 0f02 	cmp.w	sl, #2
 8006b3e:	d1ec      	bne.n	8006b1a <_scanf_float+0x2c6>
 8006b40:	3d03      	subs	r5, #3
 8006b42:	b2ed      	uxtb	r5, r5
 8006b44:	1b76      	subs	r6, r6, r5
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	05da      	lsls	r2, r3, #23
 8006b4a:	d52f      	bpl.n	8006bac <_scanf_float+0x358>
 8006b4c:	055b      	lsls	r3, r3, #21
 8006b4e:	d510      	bpl.n	8006b72 <_scanf_float+0x31e>
 8006b50:	455e      	cmp	r6, fp
 8006b52:	f67f aebf 	bls.w	80068d4 <_scanf_float+0x80>
 8006b56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b5e:	463a      	mov	r2, r7
 8006b60:	4640      	mov	r0, r8
 8006b62:	4798      	blx	r3
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	e7f1      	b.n	8006b50 <_scanf_float+0x2fc>
 8006b6c:	46aa      	mov	sl, r5
 8006b6e:	9602      	str	r6, [sp, #8]
 8006b70:	e7df      	b.n	8006b32 <_scanf_float+0x2de>
 8006b72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b76:	6923      	ldr	r3, [r4, #16]
 8006b78:	2965      	cmp	r1, #101	; 0x65
 8006b7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b82:	6123      	str	r3, [r4, #16]
 8006b84:	d00c      	beq.n	8006ba0 <_scanf_float+0x34c>
 8006b86:	2945      	cmp	r1, #69	; 0x45
 8006b88:	d00a      	beq.n	8006ba0 <_scanf_float+0x34c>
 8006b8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b8e:	463a      	mov	r2, r7
 8006b90:	4640      	mov	r0, r8
 8006b92:	4798      	blx	r3
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	1eb5      	subs	r5, r6, #2
 8006b9e:	6123      	str	r3, [r4, #16]
 8006ba0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ba4:	463a      	mov	r2, r7
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	4798      	blx	r3
 8006baa:	462e      	mov	r6, r5
 8006bac:	6825      	ldr	r5, [r4, #0]
 8006bae:	f015 0510 	ands.w	r5, r5, #16
 8006bb2:	d159      	bne.n	8006c68 <_scanf_float+0x414>
 8006bb4:	7035      	strb	r5, [r6, #0]
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc0:	d11b      	bne.n	8006bfa <_scanf_float+0x3a6>
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	454b      	cmp	r3, r9
 8006bc6:	eba3 0209 	sub.w	r2, r3, r9
 8006bca:	d123      	bne.n	8006c14 <_scanf_float+0x3c0>
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4659      	mov	r1, fp
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	f000 fe97 	bl	8007904 <_strtod_r>
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	9b03      	ldr	r3, [sp, #12]
 8006bda:	f012 0f02 	tst.w	r2, #2
 8006bde:	ec57 6b10 	vmov	r6, r7, d0
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	d021      	beq.n	8006c2a <_scanf_float+0x3d6>
 8006be6:	9903      	ldr	r1, [sp, #12]
 8006be8:	1d1a      	adds	r2, r3, #4
 8006bea:	600a      	str	r2, [r1, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	e9c3 6700 	strd	r6, r7, [r3]
 8006bf2:	68e3      	ldr	r3, [r4, #12]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60e3      	str	r3, [r4, #12]
 8006bf8:	e66d      	b.n	80068d6 <_scanf_float+0x82>
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0e5      	beq.n	8006bcc <_scanf_float+0x378>
 8006c00:	9905      	ldr	r1, [sp, #20]
 8006c02:	230a      	movs	r3, #10
 8006c04:	462a      	mov	r2, r5
 8006c06:	3101      	adds	r1, #1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	f000 ff03 	bl	8007a14 <_strtol_r>
 8006c0e:	9b04      	ldr	r3, [sp, #16]
 8006c10:	9e05      	ldr	r6, [sp, #20]
 8006c12:	1ac2      	subs	r2, r0, r3
 8006c14:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c18:	429e      	cmp	r6, r3
 8006c1a:	bf28      	it	cs
 8006c1c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c20:	4912      	ldr	r1, [pc, #72]	; (8006c6c <_scanf_float+0x418>)
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f82c 	bl	8006c80 <siprintf>
 8006c28:	e7d0      	b.n	8006bcc <_scanf_float+0x378>
 8006c2a:	9903      	ldr	r1, [sp, #12]
 8006c2c:	f012 0f04 	tst.w	r2, #4
 8006c30:	f103 0204 	add.w	r2, r3, #4
 8006c34:	600a      	str	r2, [r1, #0]
 8006c36:	d1d9      	bne.n	8006bec <_scanf_float+0x398>
 8006c38:	f8d3 8000 	ldr.w	r8, [r3]
 8006c3c:	ee10 2a10 	vmov	r2, s0
 8006c40:	ee10 0a10 	vmov	r0, s0
 8006c44:	463b      	mov	r3, r7
 8006c46:	4639      	mov	r1, r7
 8006c48:	f7f9 ff88 	bl	8000b5c <__aeabi_dcmpun>
 8006c4c:	b128      	cbz	r0, 8006c5a <_scanf_float+0x406>
 8006c4e:	4808      	ldr	r0, [pc, #32]	; (8006c70 <_scanf_float+0x41c>)
 8006c50:	f000 f810 	bl	8006c74 <nanf>
 8006c54:	ed88 0a00 	vstr	s0, [r8]
 8006c58:	e7cb      	b.n	8006bf2 <_scanf_float+0x39e>
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	f7f9 ffdb 	bl	8000c18 <__aeabi_d2f>
 8006c62:	f8c8 0000 	str.w	r0, [r8]
 8006c66:	e7c4      	b.n	8006bf2 <_scanf_float+0x39e>
 8006c68:	2500      	movs	r5, #0
 8006c6a:	e634      	b.n	80068d6 <_scanf_float+0x82>
 8006c6c:	0800b694 	.word	0x0800b694
 8006c70:	0800baa0 	.word	0x0800baa0

08006c74 <nanf>:
 8006c74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c7c <nanf+0x8>
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	7fc00000 	.word	0x7fc00000

08006c80 <siprintf>:
 8006c80:	b40e      	push	{r1, r2, r3}
 8006c82:	b500      	push	{lr}
 8006c84:	b09c      	sub	sp, #112	; 0x70
 8006c86:	ab1d      	add	r3, sp, #116	; 0x74
 8006c88:	9002      	str	r0, [sp, #8]
 8006c8a:	9006      	str	r0, [sp, #24]
 8006c8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c90:	4809      	ldr	r0, [pc, #36]	; (8006cb8 <siprintf+0x38>)
 8006c92:	9107      	str	r1, [sp, #28]
 8006c94:	9104      	str	r1, [sp, #16]
 8006c96:	4909      	ldr	r1, [pc, #36]	; (8006cbc <siprintf+0x3c>)
 8006c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c9c:	9105      	str	r1, [sp, #20]
 8006c9e:	6800      	ldr	r0, [r0, #0]
 8006ca0:	9301      	str	r3, [sp, #4]
 8006ca2:	a902      	add	r1, sp, #8
 8006ca4:	f002 fee2 	bl	8009a6c <_svfiprintf_r>
 8006ca8:	9b02      	ldr	r3, [sp, #8]
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	b01c      	add	sp, #112	; 0x70
 8006cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb4:	b003      	add	sp, #12
 8006cb6:	4770      	bx	lr
 8006cb8:	20000030 	.word	0x20000030
 8006cbc:	ffff0208 	.word	0xffff0208

08006cc0 <sulp>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	ec45 4b10 	vmov	d0, r4, r5
 8006cca:	4616      	mov	r6, r2
 8006ccc:	f002 fc2c 	bl	8009528 <__ulp>
 8006cd0:	ec51 0b10 	vmov	r0, r1, d0
 8006cd4:	b17e      	cbz	r6, 8006cf6 <sulp+0x36>
 8006cd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dd09      	ble.n	8006cf6 <sulp+0x36>
 8006ce2:	051b      	lsls	r3, r3, #20
 8006ce4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ce8:	2400      	movs	r4, #0
 8006cea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cee:	4622      	mov	r2, r4
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	f7f9 fc99 	bl	8000628 <__aeabi_dmul>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}

08006cf8 <_strtod_l>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	ed2d 8b02 	vpush	{d8}
 8006d00:	b09d      	sub	sp, #116	; 0x74
 8006d02:	461f      	mov	r7, r3
 8006d04:	2300      	movs	r3, #0
 8006d06:	9318      	str	r3, [sp, #96]	; 0x60
 8006d08:	4ba2      	ldr	r3, [pc, #648]	; (8006f94 <_strtod_l+0x29c>)
 8006d0a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	9305      	str	r3, [sp, #20]
 8006d10:	4604      	mov	r4, r0
 8006d12:	4618      	mov	r0, r3
 8006d14:	4688      	mov	r8, r1
 8006d16:	f7f9 fa6d 	bl	80001f4 <strlen>
 8006d1a:	f04f 0a00 	mov.w	sl, #0
 8006d1e:	4605      	mov	r5, r0
 8006d20:	f04f 0b00 	mov.w	fp, #0
 8006d24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	2a2b      	cmp	r2, #43	; 0x2b
 8006d2e:	d04e      	beq.n	8006dce <_strtod_l+0xd6>
 8006d30:	d83b      	bhi.n	8006daa <_strtod_l+0xb2>
 8006d32:	2a0d      	cmp	r2, #13
 8006d34:	d834      	bhi.n	8006da0 <_strtod_l+0xa8>
 8006d36:	2a08      	cmp	r2, #8
 8006d38:	d834      	bhi.n	8006da4 <_strtod_l+0xac>
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	d03e      	beq.n	8006dbc <_strtod_l+0xc4>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	930a      	str	r3, [sp, #40]	; 0x28
 8006d42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d44:	7833      	ldrb	r3, [r6, #0]
 8006d46:	2b30      	cmp	r3, #48	; 0x30
 8006d48:	f040 80b0 	bne.w	8006eac <_strtod_l+0x1b4>
 8006d4c:	7873      	ldrb	r3, [r6, #1]
 8006d4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d52:	2b58      	cmp	r3, #88	; 0x58
 8006d54:	d168      	bne.n	8006e28 <_strtod_l+0x130>
 8006d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	ab18      	add	r3, sp, #96	; 0x60
 8006d5c:	9702      	str	r7, [sp, #8]
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	4a8d      	ldr	r2, [pc, #564]	; (8006f98 <_strtod_l+0x2a0>)
 8006d62:	ab19      	add	r3, sp, #100	; 0x64
 8006d64:	a917      	add	r1, sp, #92	; 0x5c
 8006d66:	4620      	mov	r0, r4
 8006d68:	f001 fd38 	bl	80087dc <__gethex>
 8006d6c:	f010 0707 	ands.w	r7, r0, #7
 8006d70:	4605      	mov	r5, r0
 8006d72:	d005      	beq.n	8006d80 <_strtod_l+0x88>
 8006d74:	2f06      	cmp	r7, #6
 8006d76:	d12c      	bne.n	8006dd2 <_strtod_l+0xda>
 8006d78:	3601      	adds	r6, #1
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f040 8590 	bne.w	80078a8 <_strtod_l+0xbb0>
 8006d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8a:	b1eb      	cbz	r3, 8006dc8 <_strtod_l+0xd0>
 8006d8c:	4652      	mov	r2, sl
 8006d8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d92:	ec43 2b10 	vmov	d0, r2, r3
 8006d96:	b01d      	add	sp, #116	; 0x74
 8006d98:	ecbd 8b02 	vpop	{d8}
 8006d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da0:	2a20      	cmp	r2, #32
 8006da2:	d1cc      	bne.n	8006d3e <_strtod_l+0x46>
 8006da4:	3301      	adds	r3, #1
 8006da6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006da8:	e7be      	b.n	8006d28 <_strtod_l+0x30>
 8006daa:	2a2d      	cmp	r2, #45	; 0x2d
 8006dac:	d1c7      	bne.n	8006d3e <_strtod_l+0x46>
 8006dae:	2201      	movs	r2, #1
 8006db0:	920a      	str	r2, [sp, #40]	; 0x28
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1c2      	bne.n	8006d42 <_strtod_l+0x4a>
 8006dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dbe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f040 856e 	bne.w	80078a4 <_strtod_l+0xbac>
 8006dc8:	4652      	mov	r2, sl
 8006dca:	465b      	mov	r3, fp
 8006dcc:	e7e1      	b.n	8006d92 <_strtod_l+0x9a>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	e7ee      	b.n	8006db0 <_strtod_l+0xb8>
 8006dd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006dd4:	b13a      	cbz	r2, 8006de6 <_strtod_l+0xee>
 8006dd6:	2135      	movs	r1, #53	; 0x35
 8006dd8:	a81a      	add	r0, sp, #104	; 0x68
 8006dda:	f002 fcb0 	bl	800973e <__copybits>
 8006dde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006de0:	4620      	mov	r0, r4
 8006de2:	f002 f86f 	bl	8008ec4 <_Bfree>
 8006de6:	3f01      	subs	r7, #1
 8006de8:	2f04      	cmp	r7, #4
 8006dea:	d806      	bhi.n	8006dfa <_strtod_l+0x102>
 8006dec:	e8df f007 	tbb	[pc, r7]
 8006df0:	1714030a 	.word	0x1714030a
 8006df4:	0a          	.byte	0x0a
 8006df5:	00          	.byte	0x00
 8006df6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006dfa:	0728      	lsls	r0, r5, #28
 8006dfc:	d5c0      	bpl.n	8006d80 <_strtod_l+0x88>
 8006dfe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006e02:	e7bd      	b.n	8006d80 <_strtod_l+0x88>
 8006e04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006e08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e16:	e7f0      	b.n	8006dfa <_strtod_l+0x102>
 8006e18:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006f9c <_strtod_l+0x2a4>
 8006e1c:	e7ed      	b.n	8006dfa <_strtod_l+0x102>
 8006e1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e22:	f04f 3aff 	mov.w	sl, #4294967295
 8006e26:	e7e8      	b.n	8006dfa <_strtod_l+0x102>
 8006e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b30      	cmp	r3, #48	; 0x30
 8006e32:	d0f9      	beq.n	8006e28 <_strtod_l+0x130>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0a3      	beq.n	8006d80 <_strtod_l+0x88>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f04f 0900 	mov.w	r9, #0
 8006e3e:	9304      	str	r3, [sp, #16]
 8006e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e42:	9308      	str	r3, [sp, #32]
 8006e44:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e48:	464f      	mov	r7, r9
 8006e4a:	220a      	movs	r2, #10
 8006e4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e4e:	7806      	ldrb	r6, [r0, #0]
 8006e50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e54:	b2d9      	uxtb	r1, r3
 8006e56:	2909      	cmp	r1, #9
 8006e58:	d92a      	bls.n	8006eb0 <_strtod_l+0x1b8>
 8006e5a:	9905      	ldr	r1, [sp, #20]
 8006e5c:	462a      	mov	r2, r5
 8006e5e:	f002 ff1f 	bl	8009ca0 <strncmp>
 8006e62:	b398      	cbz	r0, 8006ecc <_strtod_l+0x1d4>
 8006e64:	2000      	movs	r0, #0
 8006e66:	4632      	mov	r2, r6
 8006e68:	463d      	mov	r5, r7
 8006e6a:	9005      	str	r0, [sp, #20]
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2a65      	cmp	r2, #101	; 0x65
 8006e70:	d001      	beq.n	8006e76 <_strtod_l+0x17e>
 8006e72:	2a45      	cmp	r2, #69	; 0x45
 8006e74:	d118      	bne.n	8006ea8 <_strtod_l+0x1b0>
 8006e76:	b91d      	cbnz	r5, 8006e80 <_strtod_l+0x188>
 8006e78:	9a04      	ldr	r2, [sp, #16]
 8006e7a:	4302      	orrs	r2, r0
 8006e7c:	d09e      	beq.n	8006dbc <_strtod_l+0xc4>
 8006e7e:	2500      	movs	r5, #0
 8006e80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006e84:	f108 0201 	add.w	r2, r8, #1
 8006e88:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e8a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006e8e:	2a2b      	cmp	r2, #43	; 0x2b
 8006e90:	d075      	beq.n	8006f7e <_strtod_l+0x286>
 8006e92:	2a2d      	cmp	r2, #45	; 0x2d
 8006e94:	d07b      	beq.n	8006f8e <_strtod_l+0x296>
 8006e96:	f04f 0c00 	mov.w	ip, #0
 8006e9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e9e:	2909      	cmp	r1, #9
 8006ea0:	f240 8082 	bls.w	8006fa8 <_strtod_l+0x2b0>
 8006ea4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	e09d      	b.n	8006fe8 <_strtod_l+0x2f0>
 8006eac:	2300      	movs	r3, #0
 8006eae:	e7c4      	b.n	8006e3a <_strtod_l+0x142>
 8006eb0:	2f08      	cmp	r7, #8
 8006eb2:	bfd8      	it	le
 8006eb4:	9907      	ldrle	r1, [sp, #28]
 8006eb6:	f100 0001 	add.w	r0, r0, #1
 8006eba:	bfda      	itte	le
 8006ebc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ec0:	9307      	strle	r3, [sp, #28]
 8006ec2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006ec6:	3701      	adds	r7, #1
 8006ec8:	9017      	str	r0, [sp, #92]	; 0x5c
 8006eca:	e7bf      	b.n	8006e4c <_strtod_l+0x154>
 8006ecc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ece:	195a      	adds	r2, r3, r5
 8006ed0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ed2:	5d5a      	ldrb	r2, [r3, r5]
 8006ed4:	2f00      	cmp	r7, #0
 8006ed6:	d037      	beq.n	8006f48 <_strtod_l+0x250>
 8006ed8:	9005      	str	r0, [sp, #20]
 8006eda:	463d      	mov	r5, r7
 8006edc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ee0:	2b09      	cmp	r3, #9
 8006ee2:	d912      	bls.n	8006f0a <_strtod_l+0x212>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e7c2      	b.n	8006e6e <_strtod_l+0x176>
 8006ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	9217      	str	r2, [sp, #92]	; 0x5c
 8006eee:	785a      	ldrb	r2, [r3, #1]
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	2a30      	cmp	r2, #48	; 0x30
 8006ef4:	d0f8      	beq.n	8006ee8 <_strtod_l+0x1f0>
 8006ef6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	f200 84d9 	bhi.w	80078b2 <_strtod_l+0xbba>
 8006f00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f02:	9005      	str	r0, [sp, #20]
 8006f04:	2000      	movs	r0, #0
 8006f06:	9308      	str	r3, [sp, #32]
 8006f08:	4605      	mov	r5, r0
 8006f0a:	3a30      	subs	r2, #48	; 0x30
 8006f0c:	f100 0301 	add.w	r3, r0, #1
 8006f10:	d014      	beq.n	8006f3c <_strtod_l+0x244>
 8006f12:	9905      	ldr	r1, [sp, #20]
 8006f14:	4419      	add	r1, r3
 8006f16:	9105      	str	r1, [sp, #20]
 8006f18:	462b      	mov	r3, r5
 8006f1a:	eb00 0e05 	add.w	lr, r0, r5
 8006f1e:	210a      	movs	r1, #10
 8006f20:	4573      	cmp	r3, lr
 8006f22:	d113      	bne.n	8006f4c <_strtod_l+0x254>
 8006f24:	182b      	adds	r3, r5, r0
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	f105 0501 	add.w	r5, r5, #1
 8006f2c:	4405      	add	r5, r0
 8006f2e:	dc1c      	bgt.n	8006f6a <_strtod_l+0x272>
 8006f30:	9907      	ldr	r1, [sp, #28]
 8006f32:	230a      	movs	r3, #10
 8006f34:	fb03 2301 	mla	r3, r3, r1, r2
 8006f38:	9307      	str	r3, [sp, #28]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f3e:	1c51      	adds	r1, r2, #1
 8006f40:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f42:	7852      	ldrb	r2, [r2, #1]
 8006f44:	4618      	mov	r0, r3
 8006f46:	e7c9      	b.n	8006edc <_strtod_l+0x1e4>
 8006f48:	4638      	mov	r0, r7
 8006f4a:	e7d2      	b.n	8006ef2 <_strtod_l+0x1fa>
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	dc04      	bgt.n	8006f5a <_strtod_l+0x262>
 8006f50:	9e07      	ldr	r6, [sp, #28]
 8006f52:	434e      	muls	r6, r1
 8006f54:	9607      	str	r6, [sp, #28]
 8006f56:	3301      	adds	r3, #1
 8006f58:	e7e2      	b.n	8006f20 <_strtod_l+0x228>
 8006f5a:	f103 0c01 	add.w	ip, r3, #1
 8006f5e:	f1bc 0f10 	cmp.w	ip, #16
 8006f62:	bfd8      	it	le
 8006f64:	fb01 f909 	mulle.w	r9, r1, r9
 8006f68:	e7f5      	b.n	8006f56 <_strtod_l+0x25e>
 8006f6a:	2d10      	cmp	r5, #16
 8006f6c:	bfdc      	itt	le
 8006f6e:	230a      	movle	r3, #10
 8006f70:	fb03 2909 	mlale	r9, r3, r9, r2
 8006f74:	e7e1      	b.n	8006f3a <_strtod_l+0x242>
 8006f76:	2300      	movs	r3, #0
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e77c      	b.n	8006e78 <_strtod_l+0x180>
 8006f7e:	f04f 0c00 	mov.w	ip, #0
 8006f82:	f108 0202 	add.w	r2, r8, #2
 8006f86:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f88:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006f8c:	e785      	b.n	8006e9a <_strtod_l+0x1a2>
 8006f8e:	f04f 0c01 	mov.w	ip, #1
 8006f92:	e7f6      	b.n	8006f82 <_strtod_l+0x28a>
 8006f94:	0800b8e8 	.word	0x0800b8e8
 8006f98:	0800b69c 	.word	0x0800b69c
 8006f9c:	7ff00000 	.word	0x7ff00000
 8006fa0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fa2:	1c51      	adds	r1, r2, #1
 8006fa4:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fa6:	7852      	ldrb	r2, [r2, #1]
 8006fa8:	2a30      	cmp	r2, #48	; 0x30
 8006faa:	d0f9      	beq.n	8006fa0 <_strtod_l+0x2a8>
 8006fac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006fb0:	2908      	cmp	r1, #8
 8006fb2:	f63f af79 	bhi.w	8006ea8 <_strtod_l+0x1b0>
 8006fb6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006fba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fbc:	9206      	str	r2, [sp, #24]
 8006fbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fc0:	1c51      	adds	r1, r2, #1
 8006fc2:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fc4:	7852      	ldrb	r2, [r2, #1]
 8006fc6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006fca:	2e09      	cmp	r6, #9
 8006fcc:	d937      	bls.n	800703e <_strtod_l+0x346>
 8006fce:	9e06      	ldr	r6, [sp, #24]
 8006fd0:	1b89      	subs	r1, r1, r6
 8006fd2:	2908      	cmp	r1, #8
 8006fd4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006fd8:	dc02      	bgt.n	8006fe0 <_strtod_l+0x2e8>
 8006fda:	4576      	cmp	r6, lr
 8006fdc:	bfa8      	it	ge
 8006fde:	4676      	movge	r6, lr
 8006fe0:	f1bc 0f00 	cmp.w	ip, #0
 8006fe4:	d000      	beq.n	8006fe8 <_strtod_l+0x2f0>
 8006fe6:	4276      	negs	r6, r6
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	d14d      	bne.n	8007088 <_strtod_l+0x390>
 8006fec:	9904      	ldr	r1, [sp, #16]
 8006fee:	4301      	orrs	r1, r0
 8006ff0:	f47f aec6 	bne.w	8006d80 <_strtod_l+0x88>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f47f aee1 	bne.w	8006dbc <_strtod_l+0xc4>
 8006ffa:	2a69      	cmp	r2, #105	; 0x69
 8006ffc:	d027      	beq.n	800704e <_strtod_l+0x356>
 8006ffe:	dc24      	bgt.n	800704a <_strtod_l+0x352>
 8007000:	2a49      	cmp	r2, #73	; 0x49
 8007002:	d024      	beq.n	800704e <_strtod_l+0x356>
 8007004:	2a4e      	cmp	r2, #78	; 0x4e
 8007006:	f47f aed9 	bne.w	8006dbc <_strtod_l+0xc4>
 800700a:	499f      	ldr	r1, [pc, #636]	; (8007288 <_strtod_l+0x590>)
 800700c:	a817      	add	r0, sp, #92	; 0x5c
 800700e:	f001 fe3d 	bl	8008c8c <__match>
 8007012:	2800      	cmp	r0, #0
 8007014:	f43f aed2 	beq.w	8006dbc <_strtod_l+0xc4>
 8007018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b28      	cmp	r3, #40	; 0x28
 800701e:	d12d      	bne.n	800707c <_strtod_l+0x384>
 8007020:	499a      	ldr	r1, [pc, #616]	; (800728c <_strtod_l+0x594>)
 8007022:	aa1a      	add	r2, sp, #104	; 0x68
 8007024:	a817      	add	r0, sp, #92	; 0x5c
 8007026:	f001 fe45 	bl	8008cb4 <__hexnan>
 800702a:	2805      	cmp	r0, #5
 800702c:	d126      	bne.n	800707c <_strtod_l+0x384>
 800702e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007030:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007034:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007038:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800703c:	e6a0      	b.n	8006d80 <_strtod_l+0x88>
 800703e:	210a      	movs	r1, #10
 8007040:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007044:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007048:	e7b9      	b.n	8006fbe <_strtod_l+0x2c6>
 800704a:	2a6e      	cmp	r2, #110	; 0x6e
 800704c:	e7db      	b.n	8007006 <_strtod_l+0x30e>
 800704e:	4990      	ldr	r1, [pc, #576]	; (8007290 <_strtod_l+0x598>)
 8007050:	a817      	add	r0, sp, #92	; 0x5c
 8007052:	f001 fe1b 	bl	8008c8c <__match>
 8007056:	2800      	cmp	r0, #0
 8007058:	f43f aeb0 	beq.w	8006dbc <_strtod_l+0xc4>
 800705c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800705e:	498d      	ldr	r1, [pc, #564]	; (8007294 <_strtod_l+0x59c>)
 8007060:	3b01      	subs	r3, #1
 8007062:	a817      	add	r0, sp, #92	; 0x5c
 8007064:	9317      	str	r3, [sp, #92]	; 0x5c
 8007066:	f001 fe11 	bl	8008c8c <__match>
 800706a:	b910      	cbnz	r0, 8007072 <_strtod_l+0x37a>
 800706c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800706e:	3301      	adds	r3, #1
 8007070:	9317      	str	r3, [sp, #92]	; 0x5c
 8007072:	f8df b230 	ldr.w	fp, [pc, #560]	; 80072a4 <_strtod_l+0x5ac>
 8007076:	f04f 0a00 	mov.w	sl, #0
 800707a:	e681      	b.n	8006d80 <_strtod_l+0x88>
 800707c:	4886      	ldr	r0, [pc, #536]	; (8007298 <_strtod_l+0x5a0>)
 800707e:	f002 fdf7 	bl	8009c70 <nan>
 8007082:	ec5b ab10 	vmov	sl, fp, d0
 8007086:	e67b      	b.n	8006d80 <_strtod_l+0x88>
 8007088:	9b05      	ldr	r3, [sp, #20]
 800708a:	9807      	ldr	r0, [sp, #28]
 800708c:	1af3      	subs	r3, r6, r3
 800708e:	2f00      	cmp	r7, #0
 8007090:	bf08      	it	eq
 8007092:	462f      	moveq	r7, r5
 8007094:	2d10      	cmp	r5, #16
 8007096:	9306      	str	r3, [sp, #24]
 8007098:	46a8      	mov	r8, r5
 800709a:	bfa8      	it	ge
 800709c:	f04f 0810 	movge.w	r8, #16
 80070a0:	f7f9 fa48 	bl	8000534 <__aeabi_ui2d>
 80070a4:	2d09      	cmp	r5, #9
 80070a6:	4682      	mov	sl, r0
 80070a8:	468b      	mov	fp, r1
 80070aa:	dd13      	ble.n	80070d4 <_strtod_l+0x3dc>
 80070ac:	4b7b      	ldr	r3, [pc, #492]	; (800729c <_strtod_l+0x5a4>)
 80070ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80070b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80070b6:	f7f9 fab7 	bl	8000628 <__aeabi_dmul>
 80070ba:	4682      	mov	sl, r0
 80070bc:	4648      	mov	r0, r9
 80070be:	468b      	mov	fp, r1
 80070c0:	f7f9 fa38 	bl	8000534 <__aeabi_ui2d>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4650      	mov	r0, sl
 80070ca:	4659      	mov	r1, fp
 80070cc:	f7f9 f8f6 	bl	80002bc <__adddf3>
 80070d0:	4682      	mov	sl, r0
 80070d2:	468b      	mov	fp, r1
 80070d4:	2d0f      	cmp	r5, #15
 80070d6:	dc38      	bgt.n	800714a <_strtod_l+0x452>
 80070d8:	9b06      	ldr	r3, [sp, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f43f ae50 	beq.w	8006d80 <_strtod_l+0x88>
 80070e0:	dd24      	ble.n	800712c <_strtod_l+0x434>
 80070e2:	2b16      	cmp	r3, #22
 80070e4:	dc0b      	bgt.n	80070fe <_strtod_l+0x406>
 80070e6:	496d      	ldr	r1, [pc, #436]	; (800729c <_strtod_l+0x5a4>)
 80070e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070f0:	4652      	mov	r2, sl
 80070f2:	465b      	mov	r3, fp
 80070f4:	f7f9 fa98 	bl	8000628 <__aeabi_dmul>
 80070f8:	4682      	mov	sl, r0
 80070fa:	468b      	mov	fp, r1
 80070fc:	e640      	b.n	8006d80 <_strtod_l+0x88>
 80070fe:	9a06      	ldr	r2, [sp, #24]
 8007100:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007104:	4293      	cmp	r3, r2
 8007106:	db20      	blt.n	800714a <_strtod_l+0x452>
 8007108:	4c64      	ldr	r4, [pc, #400]	; (800729c <_strtod_l+0x5a4>)
 800710a:	f1c5 050f 	rsb	r5, r5, #15
 800710e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007112:	4652      	mov	r2, sl
 8007114:	465b      	mov	r3, fp
 8007116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800711a:	f7f9 fa85 	bl	8000628 <__aeabi_dmul>
 800711e:	9b06      	ldr	r3, [sp, #24]
 8007120:	1b5d      	subs	r5, r3, r5
 8007122:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007126:	e9d4 2300 	ldrd	r2, r3, [r4]
 800712a:	e7e3      	b.n	80070f4 <_strtod_l+0x3fc>
 800712c:	9b06      	ldr	r3, [sp, #24]
 800712e:	3316      	adds	r3, #22
 8007130:	db0b      	blt.n	800714a <_strtod_l+0x452>
 8007132:	9b05      	ldr	r3, [sp, #20]
 8007134:	1b9e      	subs	r6, r3, r6
 8007136:	4b59      	ldr	r3, [pc, #356]	; (800729c <_strtod_l+0x5a4>)
 8007138:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800713c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007140:	4650      	mov	r0, sl
 8007142:	4659      	mov	r1, fp
 8007144:	f7f9 fb9a 	bl	800087c <__aeabi_ddiv>
 8007148:	e7d6      	b.n	80070f8 <_strtod_l+0x400>
 800714a:	9b06      	ldr	r3, [sp, #24]
 800714c:	eba5 0808 	sub.w	r8, r5, r8
 8007150:	4498      	add	r8, r3
 8007152:	f1b8 0f00 	cmp.w	r8, #0
 8007156:	dd74      	ble.n	8007242 <_strtod_l+0x54a>
 8007158:	f018 030f 	ands.w	r3, r8, #15
 800715c:	d00a      	beq.n	8007174 <_strtod_l+0x47c>
 800715e:	494f      	ldr	r1, [pc, #316]	; (800729c <_strtod_l+0x5a4>)
 8007160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007164:	4652      	mov	r2, sl
 8007166:	465b      	mov	r3, fp
 8007168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800716c:	f7f9 fa5c 	bl	8000628 <__aeabi_dmul>
 8007170:	4682      	mov	sl, r0
 8007172:	468b      	mov	fp, r1
 8007174:	f038 080f 	bics.w	r8, r8, #15
 8007178:	d04f      	beq.n	800721a <_strtod_l+0x522>
 800717a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800717e:	dd22      	ble.n	80071c6 <_strtod_l+0x4ce>
 8007180:	2500      	movs	r5, #0
 8007182:	462e      	mov	r6, r5
 8007184:	9507      	str	r5, [sp, #28]
 8007186:	9505      	str	r5, [sp, #20]
 8007188:	2322      	movs	r3, #34	; 0x22
 800718a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80072a4 <_strtod_l+0x5ac>
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	f04f 0a00 	mov.w	sl, #0
 8007194:	9b07      	ldr	r3, [sp, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f43f adf2 	beq.w	8006d80 <_strtod_l+0x88>
 800719c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800719e:	4620      	mov	r0, r4
 80071a0:	f001 fe90 	bl	8008ec4 <_Bfree>
 80071a4:	9905      	ldr	r1, [sp, #20]
 80071a6:	4620      	mov	r0, r4
 80071a8:	f001 fe8c 	bl	8008ec4 <_Bfree>
 80071ac:	4631      	mov	r1, r6
 80071ae:	4620      	mov	r0, r4
 80071b0:	f001 fe88 	bl	8008ec4 <_Bfree>
 80071b4:	9907      	ldr	r1, [sp, #28]
 80071b6:	4620      	mov	r0, r4
 80071b8:	f001 fe84 	bl	8008ec4 <_Bfree>
 80071bc:	4629      	mov	r1, r5
 80071be:	4620      	mov	r0, r4
 80071c0:	f001 fe80 	bl	8008ec4 <_Bfree>
 80071c4:	e5dc      	b.n	8006d80 <_strtod_l+0x88>
 80071c6:	4b36      	ldr	r3, [pc, #216]	; (80072a0 <_strtod_l+0x5a8>)
 80071c8:	9304      	str	r3, [sp, #16]
 80071ca:	2300      	movs	r3, #0
 80071cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	4699      	mov	r9, r3
 80071d6:	f1b8 0f01 	cmp.w	r8, #1
 80071da:	dc21      	bgt.n	8007220 <_strtod_l+0x528>
 80071dc:	b10b      	cbz	r3, 80071e2 <_strtod_l+0x4ea>
 80071de:	4682      	mov	sl, r0
 80071e0:	468b      	mov	fp, r1
 80071e2:	4b2f      	ldr	r3, [pc, #188]	; (80072a0 <_strtod_l+0x5a8>)
 80071e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80071e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80071ec:	4652      	mov	r2, sl
 80071ee:	465b      	mov	r3, fp
 80071f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80071f4:	f7f9 fa18 	bl	8000628 <__aeabi_dmul>
 80071f8:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <_strtod_l+0x5ac>)
 80071fa:	460a      	mov	r2, r1
 80071fc:	400b      	ands	r3, r1
 80071fe:	492a      	ldr	r1, [pc, #168]	; (80072a8 <_strtod_l+0x5b0>)
 8007200:	428b      	cmp	r3, r1
 8007202:	4682      	mov	sl, r0
 8007204:	d8bc      	bhi.n	8007180 <_strtod_l+0x488>
 8007206:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800720a:	428b      	cmp	r3, r1
 800720c:	bf86      	itte	hi
 800720e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80072ac <_strtod_l+0x5b4>
 8007212:	f04f 3aff 	movhi.w	sl, #4294967295
 8007216:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800721a:	2300      	movs	r3, #0
 800721c:	9304      	str	r3, [sp, #16]
 800721e:	e084      	b.n	800732a <_strtod_l+0x632>
 8007220:	f018 0f01 	tst.w	r8, #1
 8007224:	d005      	beq.n	8007232 <_strtod_l+0x53a>
 8007226:	9b04      	ldr	r3, [sp, #16]
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f9 f9fc 	bl	8000628 <__aeabi_dmul>
 8007230:	2301      	movs	r3, #1
 8007232:	9a04      	ldr	r2, [sp, #16]
 8007234:	3208      	adds	r2, #8
 8007236:	f109 0901 	add.w	r9, r9, #1
 800723a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800723e:	9204      	str	r2, [sp, #16]
 8007240:	e7c9      	b.n	80071d6 <_strtod_l+0x4de>
 8007242:	d0ea      	beq.n	800721a <_strtod_l+0x522>
 8007244:	f1c8 0800 	rsb	r8, r8, #0
 8007248:	f018 020f 	ands.w	r2, r8, #15
 800724c:	d00a      	beq.n	8007264 <_strtod_l+0x56c>
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <_strtod_l+0x5a4>)
 8007250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007254:	4650      	mov	r0, sl
 8007256:	4659      	mov	r1, fp
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f7f9 fb0e 	bl	800087c <__aeabi_ddiv>
 8007260:	4682      	mov	sl, r0
 8007262:	468b      	mov	fp, r1
 8007264:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007268:	d0d7      	beq.n	800721a <_strtod_l+0x522>
 800726a:	f1b8 0f1f 	cmp.w	r8, #31
 800726e:	dd1f      	ble.n	80072b0 <_strtod_l+0x5b8>
 8007270:	2500      	movs	r5, #0
 8007272:	462e      	mov	r6, r5
 8007274:	9507      	str	r5, [sp, #28]
 8007276:	9505      	str	r5, [sp, #20]
 8007278:	2322      	movs	r3, #34	; 0x22
 800727a:	f04f 0a00 	mov.w	sl, #0
 800727e:	f04f 0b00 	mov.w	fp, #0
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	e786      	b.n	8007194 <_strtod_l+0x49c>
 8007286:	bf00      	nop
 8007288:	0800b66d 	.word	0x0800b66d
 800728c:	0800b6b0 	.word	0x0800b6b0
 8007290:	0800b665 	.word	0x0800b665
 8007294:	0800b7f4 	.word	0x0800b7f4
 8007298:	0800baa0 	.word	0x0800baa0
 800729c:	0800b980 	.word	0x0800b980
 80072a0:	0800b958 	.word	0x0800b958
 80072a4:	7ff00000 	.word	0x7ff00000
 80072a8:	7ca00000 	.word	0x7ca00000
 80072ac:	7fefffff 	.word	0x7fefffff
 80072b0:	f018 0310 	ands.w	r3, r8, #16
 80072b4:	bf18      	it	ne
 80072b6:	236a      	movne	r3, #106	; 0x6a
 80072b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007668 <_strtod_l+0x970>
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	4650      	mov	r0, sl
 80072c0:	4659      	mov	r1, fp
 80072c2:	2300      	movs	r3, #0
 80072c4:	f018 0f01 	tst.w	r8, #1
 80072c8:	d004      	beq.n	80072d4 <_strtod_l+0x5dc>
 80072ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80072ce:	f7f9 f9ab 	bl	8000628 <__aeabi_dmul>
 80072d2:	2301      	movs	r3, #1
 80072d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80072d8:	f109 0908 	add.w	r9, r9, #8
 80072dc:	d1f2      	bne.n	80072c4 <_strtod_l+0x5cc>
 80072de:	b10b      	cbz	r3, 80072e4 <_strtod_l+0x5ec>
 80072e0:	4682      	mov	sl, r0
 80072e2:	468b      	mov	fp, r1
 80072e4:	9b04      	ldr	r3, [sp, #16]
 80072e6:	b1c3      	cbz	r3, 800731a <_strtod_l+0x622>
 80072e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	4659      	mov	r1, fp
 80072f4:	dd11      	ble.n	800731a <_strtod_l+0x622>
 80072f6:	2b1f      	cmp	r3, #31
 80072f8:	f340 8124 	ble.w	8007544 <_strtod_l+0x84c>
 80072fc:	2b34      	cmp	r3, #52	; 0x34
 80072fe:	bfde      	ittt	le
 8007300:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007304:	f04f 33ff 	movle.w	r3, #4294967295
 8007308:	fa03 f202 	lslle.w	r2, r3, r2
 800730c:	f04f 0a00 	mov.w	sl, #0
 8007310:	bfcc      	ite	gt
 8007312:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007316:	ea02 0b01 	andle.w	fp, r2, r1
 800731a:	2200      	movs	r2, #0
 800731c:	2300      	movs	r3, #0
 800731e:	4650      	mov	r0, sl
 8007320:	4659      	mov	r1, fp
 8007322:	f7f9 fbe9 	bl	8000af8 <__aeabi_dcmpeq>
 8007326:	2800      	cmp	r0, #0
 8007328:	d1a2      	bne.n	8007270 <_strtod_l+0x578>
 800732a:	9b07      	ldr	r3, [sp, #28]
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	9908      	ldr	r1, [sp, #32]
 8007330:	462b      	mov	r3, r5
 8007332:	463a      	mov	r2, r7
 8007334:	4620      	mov	r0, r4
 8007336:	f001 fe2d 	bl	8008f94 <__s2b>
 800733a:	9007      	str	r0, [sp, #28]
 800733c:	2800      	cmp	r0, #0
 800733e:	f43f af1f 	beq.w	8007180 <_strtod_l+0x488>
 8007342:	9b05      	ldr	r3, [sp, #20]
 8007344:	1b9e      	subs	r6, r3, r6
 8007346:	9b06      	ldr	r3, [sp, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfb4      	ite	lt
 800734c:	4633      	movlt	r3, r6
 800734e:	2300      	movge	r3, #0
 8007350:	930c      	str	r3, [sp, #48]	; 0x30
 8007352:	9b06      	ldr	r3, [sp, #24]
 8007354:	2500      	movs	r5, #0
 8007356:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800735a:	9312      	str	r3, [sp, #72]	; 0x48
 800735c:	462e      	mov	r6, r5
 800735e:	9b07      	ldr	r3, [sp, #28]
 8007360:	4620      	mov	r0, r4
 8007362:	6859      	ldr	r1, [r3, #4]
 8007364:	f001 fd6e 	bl	8008e44 <_Balloc>
 8007368:	9005      	str	r0, [sp, #20]
 800736a:	2800      	cmp	r0, #0
 800736c:	f43f af0c 	beq.w	8007188 <_strtod_l+0x490>
 8007370:	9b07      	ldr	r3, [sp, #28]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	3202      	adds	r2, #2
 8007376:	f103 010c 	add.w	r1, r3, #12
 800737a:	0092      	lsls	r2, r2, #2
 800737c:	300c      	adds	r0, #12
 800737e:	f001 fd53 	bl	8008e28 <memcpy>
 8007382:	ec4b ab10 	vmov	d0, sl, fp
 8007386:	aa1a      	add	r2, sp, #104	; 0x68
 8007388:	a919      	add	r1, sp, #100	; 0x64
 800738a:	4620      	mov	r0, r4
 800738c:	f002 f948 	bl	8009620 <__d2b>
 8007390:	ec4b ab18 	vmov	d8, sl, fp
 8007394:	9018      	str	r0, [sp, #96]	; 0x60
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f aef6 	beq.w	8007188 <_strtod_l+0x490>
 800739c:	2101      	movs	r1, #1
 800739e:	4620      	mov	r0, r4
 80073a0:	f001 fe92 	bl	80090c8 <__i2b>
 80073a4:	4606      	mov	r6, r0
 80073a6:	2800      	cmp	r0, #0
 80073a8:	f43f aeee 	beq.w	8007188 <_strtod_l+0x490>
 80073ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073ae:	9904      	ldr	r1, [sp, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bfab      	itete	ge
 80073b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80073b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80073b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80073ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80073be:	bfac      	ite	ge
 80073c0:	eb03 0902 	addge.w	r9, r3, r2
 80073c4:	1ad7      	sublt	r7, r2, r3
 80073c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073c8:	eba3 0801 	sub.w	r8, r3, r1
 80073cc:	4490      	add	r8, r2
 80073ce:	4ba1      	ldr	r3, [pc, #644]	; (8007654 <_strtod_l+0x95c>)
 80073d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80073d4:	4598      	cmp	r8, r3
 80073d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073da:	f280 80c7 	bge.w	800756c <_strtod_l+0x874>
 80073de:	eba3 0308 	sub.w	r3, r3, r8
 80073e2:	2b1f      	cmp	r3, #31
 80073e4:	eba2 0203 	sub.w	r2, r2, r3
 80073e8:	f04f 0101 	mov.w	r1, #1
 80073ec:	f300 80b1 	bgt.w	8007552 <_strtod_l+0x85a>
 80073f0:	fa01 f303 	lsl.w	r3, r1, r3
 80073f4:	930d      	str	r3, [sp, #52]	; 0x34
 80073f6:	2300      	movs	r3, #0
 80073f8:	9308      	str	r3, [sp, #32]
 80073fa:	eb09 0802 	add.w	r8, r9, r2
 80073fe:	9b04      	ldr	r3, [sp, #16]
 8007400:	45c1      	cmp	r9, r8
 8007402:	4417      	add	r7, r2
 8007404:	441f      	add	r7, r3
 8007406:	464b      	mov	r3, r9
 8007408:	bfa8      	it	ge
 800740a:	4643      	movge	r3, r8
 800740c:	42bb      	cmp	r3, r7
 800740e:	bfa8      	it	ge
 8007410:	463b      	movge	r3, r7
 8007412:	2b00      	cmp	r3, #0
 8007414:	bfc2      	ittt	gt
 8007416:	eba8 0803 	subgt.w	r8, r8, r3
 800741a:	1aff      	subgt	r7, r7, r3
 800741c:	eba9 0903 	subgt.w	r9, r9, r3
 8007420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007422:	2b00      	cmp	r3, #0
 8007424:	dd17      	ble.n	8007456 <_strtod_l+0x75e>
 8007426:	4631      	mov	r1, r6
 8007428:	461a      	mov	r2, r3
 800742a:	4620      	mov	r0, r4
 800742c:	f001 ff0c 	bl	8009248 <__pow5mult>
 8007430:	4606      	mov	r6, r0
 8007432:	2800      	cmp	r0, #0
 8007434:	f43f aea8 	beq.w	8007188 <_strtod_l+0x490>
 8007438:	4601      	mov	r1, r0
 800743a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800743c:	4620      	mov	r0, r4
 800743e:	f001 fe59 	bl	80090f4 <__multiply>
 8007442:	900b      	str	r0, [sp, #44]	; 0x2c
 8007444:	2800      	cmp	r0, #0
 8007446:	f43f ae9f 	beq.w	8007188 <_strtod_l+0x490>
 800744a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800744c:	4620      	mov	r0, r4
 800744e:	f001 fd39 	bl	8008ec4 <_Bfree>
 8007452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007454:	9318      	str	r3, [sp, #96]	; 0x60
 8007456:	f1b8 0f00 	cmp.w	r8, #0
 800745a:	f300 808c 	bgt.w	8007576 <_strtod_l+0x87e>
 800745e:	9b06      	ldr	r3, [sp, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	dd08      	ble.n	8007476 <_strtod_l+0x77e>
 8007464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007466:	9905      	ldr	r1, [sp, #20]
 8007468:	4620      	mov	r0, r4
 800746a:	f001 feed 	bl	8009248 <__pow5mult>
 800746e:	9005      	str	r0, [sp, #20]
 8007470:	2800      	cmp	r0, #0
 8007472:	f43f ae89 	beq.w	8007188 <_strtod_l+0x490>
 8007476:	2f00      	cmp	r7, #0
 8007478:	dd08      	ble.n	800748c <_strtod_l+0x794>
 800747a:	9905      	ldr	r1, [sp, #20]
 800747c:	463a      	mov	r2, r7
 800747e:	4620      	mov	r0, r4
 8007480:	f001 ff3c 	bl	80092fc <__lshift>
 8007484:	9005      	str	r0, [sp, #20]
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f ae7e 	beq.w	8007188 <_strtod_l+0x490>
 800748c:	f1b9 0f00 	cmp.w	r9, #0
 8007490:	dd08      	ble.n	80074a4 <_strtod_l+0x7ac>
 8007492:	4631      	mov	r1, r6
 8007494:	464a      	mov	r2, r9
 8007496:	4620      	mov	r0, r4
 8007498:	f001 ff30 	bl	80092fc <__lshift>
 800749c:	4606      	mov	r6, r0
 800749e:	2800      	cmp	r0, #0
 80074a0:	f43f ae72 	beq.w	8007188 <_strtod_l+0x490>
 80074a4:	9a05      	ldr	r2, [sp, #20]
 80074a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074a8:	4620      	mov	r0, r4
 80074aa:	f001 ffb3 	bl	8009414 <__mdiff>
 80074ae:	4605      	mov	r5, r0
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f43f ae69 	beq.w	8007188 <_strtod_l+0x490>
 80074b6:	68c3      	ldr	r3, [r0, #12]
 80074b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ba:	2300      	movs	r3, #0
 80074bc:	60c3      	str	r3, [r0, #12]
 80074be:	4631      	mov	r1, r6
 80074c0:	f001 ff8c 	bl	80093dc <__mcmp>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	da60      	bge.n	800758a <_strtod_l+0x892>
 80074c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ca:	ea53 030a 	orrs.w	r3, r3, sl
 80074ce:	f040 8082 	bne.w	80075d6 <_strtod_l+0x8de>
 80074d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d17d      	bne.n	80075d6 <_strtod_l+0x8de>
 80074da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074de:	0d1b      	lsrs	r3, r3, #20
 80074e0:	051b      	lsls	r3, r3, #20
 80074e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074e6:	d976      	bls.n	80075d6 <_strtod_l+0x8de>
 80074e8:	696b      	ldr	r3, [r5, #20]
 80074ea:	b913      	cbnz	r3, 80074f2 <_strtod_l+0x7fa>
 80074ec:	692b      	ldr	r3, [r5, #16]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	dd71      	ble.n	80075d6 <_strtod_l+0x8de>
 80074f2:	4629      	mov	r1, r5
 80074f4:	2201      	movs	r2, #1
 80074f6:	4620      	mov	r0, r4
 80074f8:	f001 ff00 	bl	80092fc <__lshift>
 80074fc:	4631      	mov	r1, r6
 80074fe:	4605      	mov	r5, r0
 8007500:	f001 ff6c 	bl	80093dc <__mcmp>
 8007504:	2800      	cmp	r0, #0
 8007506:	dd66      	ble.n	80075d6 <_strtod_l+0x8de>
 8007508:	9904      	ldr	r1, [sp, #16]
 800750a:	4a53      	ldr	r2, [pc, #332]	; (8007658 <_strtod_l+0x960>)
 800750c:	465b      	mov	r3, fp
 800750e:	2900      	cmp	r1, #0
 8007510:	f000 8081 	beq.w	8007616 <_strtod_l+0x91e>
 8007514:	ea02 010b 	and.w	r1, r2, fp
 8007518:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800751c:	dc7b      	bgt.n	8007616 <_strtod_l+0x91e>
 800751e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007522:	f77f aea9 	ble.w	8007278 <_strtod_l+0x580>
 8007526:	4b4d      	ldr	r3, [pc, #308]	; (800765c <_strtod_l+0x964>)
 8007528:	4650      	mov	r0, sl
 800752a:	4659      	mov	r1, fp
 800752c:	2200      	movs	r2, #0
 800752e:	f7f9 f87b 	bl	8000628 <__aeabi_dmul>
 8007532:	460b      	mov	r3, r1
 8007534:	4303      	orrs	r3, r0
 8007536:	bf08      	it	eq
 8007538:	2322      	moveq	r3, #34	; 0x22
 800753a:	4682      	mov	sl, r0
 800753c:	468b      	mov	fp, r1
 800753e:	bf08      	it	eq
 8007540:	6023      	streq	r3, [r4, #0]
 8007542:	e62b      	b.n	800719c <_strtod_l+0x4a4>
 8007544:	f04f 32ff 	mov.w	r2, #4294967295
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	ea03 0a0a 	and.w	sl, r3, sl
 8007550:	e6e3      	b.n	800731a <_strtod_l+0x622>
 8007552:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007556:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800755a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800755e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007562:	fa01 f308 	lsl.w	r3, r1, r8
 8007566:	9308      	str	r3, [sp, #32]
 8007568:	910d      	str	r1, [sp, #52]	; 0x34
 800756a:	e746      	b.n	80073fa <_strtod_l+0x702>
 800756c:	2300      	movs	r3, #0
 800756e:	9308      	str	r3, [sp, #32]
 8007570:	2301      	movs	r3, #1
 8007572:	930d      	str	r3, [sp, #52]	; 0x34
 8007574:	e741      	b.n	80073fa <_strtod_l+0x702>
 8007576:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007578:	4642      	mov	r2, r8
 800757a:	4620      	mov	r0, r4
 800757c:	f001 febe 	bl	80092fc <__lshift>
 8007580:	9018      	str	r0, [sp, #96]	; 0x60
 8007582:	2800      	cmp	r0, #0
 8007584:	f47f af6b 	bne.w	800745e <_strtod_l+0x766>
 8007588:	e5fe      	b.n	8007188 <_strtod_l+0x490>
 800758a:	465f      	mov	r7, fp
 800758c:	d16e      	bne.n	800766c <_strtod_l+0x974>
 800758e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007590:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007594:	b342      	cbz	r2, 80075e8 <_strtod_l+0x8f0>
 8007596:	4a32      	ldr	r2, [pc, #200]	; (8007660 <_strtod_l+0x968>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d128      	bne.n	80075ee <_strtod_l+0x8f6>
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	4651      	mov	r1, sl
 80075a0:	b1eb      	cbz	r3, 80075de <_strtod_l+0x8e6>
 80075a2:	4b2d      	ldr	r3, [pc, #180]	; (8007658 <_strtod_l+0x960>)
 80075a4:	403b      	ands	r3, r7
 80075a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075aa:	f04f 32ff 	mov.w	r2, #4294967295
 80075ae:	d819      	bhi.n	80075e4 <_strtod_l+0x8ec>
 80075b0:	0d1b      	lsrs	r3, r3, #20
 80075b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	4299      	cmp	r1, r3
 80075bc:	d117      	bne.n	80075ee <_strtod_l+0x8f6>
 80075be:	4b29      	ldr	r3, [pc, #164]	; (8007664 <_strtod_l+0x96c>)
 80075c0:	429f      	cmp	r7, r3
 80075c2:	d102      	bne.n	80075ca <_strtod_l+0x8d2>
 80075c4:	3101      	adds	r1, #1
 80075c6:	f43f addf 	beq.w	8007188 <_strtod_l+0x490>
 80075ca:	4b23      	ldr	r3, [pc, #140]	; (8007658 <_strtod_l+0x960>)
 80075cc:	403b      	ands	r3, r7
 80075ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80075d2:	f04f 0a00 	mov.w	sl, #0
 80075d6:	9b04      	ldr	r3, [sp, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1a4      	bne.n	8007526 <_strtod_l+0x82e>
 80075dc:	e5de      	b.n	800719c <_strtod_l+0x4a4>
 80075de:	f04f 33ff 	mov.w	r3, #4294967295
 80075e2:	e7ea      	b.n	80075ba <_strtod_l+0x8c2>
 80075e4:	4613      	mov	r3, r2
 80075e6:	e7e8      	b.n	80075ba <_strtod_l+0x8c2>
 80075e8:	ea53 030a 	orrs.w	r3, r3, sl
 80075ec:	d08c      	beq.n	8007508 <_strtod_l+0x810>
 80075ee:	9b08      	ldr	r3, [sp, #32]
 80075f0:	b1db      	cbz	r3, 800762a <_strtod_l+0x932>
 80075f2:	423b      	tst	r3, r7
 80075f4:	d0ef      	beq.n	80075d6 <_strtod_l+0x8de>
 80075f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075f8:	9a04      	ldr	r2, [sp, #16]
 80075fa:	4650      	mov	r0, sl
 80075fc:	4659      	mov	r1, fp
 80075fe:	b1c3      	cbz	r3, 8007632 <_strtod_l+0x93a>
 8007600:	f7ff fb5e 	bl	8006cc0 <sulp>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	ec51 0b18 	vmov	r0, r1, d8
 800760c:	f7f8 fe56 	bl	80002bc <__adddf3>
 8007610:	4682      	mov	sl, r0
 8007612:	468b      	mov	fp, r1
 8007614:	e7df      	b.n	80075d6 <_strtod_l+0x8de>
 8007616:	4013      	ands	r3, r2
 8007618:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800761c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007620:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007624:	f04f 3aff 	mov.w	sl, #4294967295
 8007628:	e7d5      	b.n	80075d6 <_strtod_l+0x8de>
 800762a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800762c:	ea13 0f0a 	tst.w	r3, sl
 8007630:	e7e0      	b.n	80075f4 <_strtod_l+0x8fc>
 8007632:	f7ff fb45 	bl	8006cc0 <sulp>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	ec51 0b18 	vmov	r0, r1, d8
 800763e:	f7f8 fe3b 	bl	80002b8 <__aeabi_dsub>
 8007642:	2200      	movs	r2, #0
 8007644:	2300      	movs	r3, #0
 8007646:	4682      	mov	sl, r0
 8007648:	468b      	mov	fp, r1
 800764a:	f7f9 fa55 	bl	8000af8 <__aeabi_dcmpeq>
 800764e:	2800      	cmp	r0, #0
 8007650:	d0c1      	beq.n	80075d6 <_strtod_l+0x8de>
 8007652:	e611      	b.n	8007278 <_strtod_l+0x580>
 8007654:	fffffc02 	.word	0xfffffc02
 8007658:	7ff00000 	.word	0x7ff00000
 800765c:	39500000 	.word	0x39500000
 8007660:	000fffff 	.word	0x000fffff
 8007664:	7fefffff 	.word	0x7fefffff
 8007668:	0800b6c8 	.word	0x0800b6c8
 800766c:	4631      	mov	r1, r6
 800766e:	4628      	mov	r0, r5
 8007670:	f002 f832 	bl	80096d8 <__ratio>
 8007674:	ec59 8b10 	vmov	r8, r9, d0
 8007678:	ee10 0a10 	vmov	r0, s0
 800767c:	2200      	movs	r2, #0
 800767e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007682:	4649      	mov	r1, r9
 8007684:	f7f9 fa4c 	bl	8000b20 <__aeabi_dcmple>
 8007688:	2800      	cmp	r0, #0
 800768a:	d07a      	beq.n	8007782 <_strtod_l+0xa8a>
 800768c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d04a      	beq.n	8007728 <_strtod_l+0xa30>
 8007692:	4b95      	ldr	r3, [pc, #596]	; (80078e8 <_strtod_l+0xbf0>)
 8007694:	2200      	movs	r2, #0
 8007696:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800769a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80078e8 <_strtod_l+0xbf0>
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	4b92      	ldr	r3, [pc, #584]	; (80078ec <_strtod_l+0xbf4>)
 80076a4:	403b      	ands	r3, r7
 80076a6:	930d      	str	r3, [sp, #52]	; 0x34
 80076a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076aa:	4b91      	ldr	r3, [pc, #580]	; (80078f0 <_strtod_l+0xbf8>)
 80076ac:	429a      	cmp	r2, r3
 80076ae:	f040 80b0 	bne.w	8007812 <_strtod_l+0xb1a>
 80076b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80076ba:	ec4b ab10 	vmov	d0, sl, fp
 80076be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076c2:	f001 ff31 	bl	8009528 <__ulp>
 80076c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076ca:	ec53 2b10 	vmov	r2, r3, d0
 80076ce:	f7f8 ffab 	bl	8000628 <__aeabi_dmul>
 80076d2:	4652      	mov	r2, sl
 80076d4:	465b      	mov	r3, fp
 80076d6:	f7f8 fdf1 	bl	80002bc <__adddf3>
 80076da:	460b      	mov	r3, r1
 80076dc:	4983      	ldr	r1, [pc, #524]	; (80078ec <_strtod_l+0xbf4>)
 80076de:	4a85      	ldr	r2, [pc, #532]	; (80078f4 <_strtod_l+0xbfc>)
 80076e0:	4019      	ands	r1, r3
 80076e2:	4291      	cmp	r1, r2
 80076e4:	4682      	mov	sl, r0
 80076e6:	d960      	bls.n	80077aa <_strtod_l+0xab2>
 80076e8:	ee18 3a90 	vmov	r3, s17
 80076ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d104      	bne.n	80076fe <_strtod_l+0xa06>
 80076f4:	ee18 3a10 	vmov	r3, s16
 80076f8:	3301      	adds	r3, #1
 80076fa:	f43f ad45 	beq.w	8007188 <_strtod_l+0x490>
 80076fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007900 <_strtod_l+0xc08>
 8007702:	f04f 3aff 	mov.w	sl, #4294967295
 8007706:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007708:	4620      	mov	r0, r4
 800770a:	f001 fbdb 	bl	8008ec4 <_Bfree>
 800770e:	9905      	ldr	r1, [sp, #20]
 8007710:	4620      	mov	r0, r4
 8007712:	f001 fbd7 	bl	8008ec4 <_Bfree>
 8007716:	4631      	mov	r1, r6
 8007718:	4620      	mov	r0, r4
 800771a:	f001 fbd3 	bl	8008ec4 <_Bfree>
 800771e:	4629      	mov	r1, r5
 8007720:	4620      	mov	r0, r4
 8007722:	f001 fbcf 	bl	8008ec4 <_Bfree>
 8007726:	e61a      	b.n	800735e <_strtod_l+0x666>
 8007728:	f1ba 0f00 	cmp.w	sl, #0
 800772c:	d11b      	bne.n	8007766 <_strtod_l+0xa6e>
 800772e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007732:	b9f3      	cbnz	r3, 8007772 <_strtod_l+0xa7a>
 8007734:	4b6c      	ldr	r3, [pc, #432]	; (80078e8 <_strtod_l+0xbf0>)
 8007736:	2200      	movs	r2, #0
 8007738:	4640      	mov	r0, r8
 800773a:	4649      	mov	r1, r9
 800773c:	f7f9 f9e6 	bl	8000b0c <__aeabi_dcmplt>
 8007740:	b9d0      	cbnz	r0, 8007778 <_strtod_l+0xa80>
 8007742:	4640      	mov	r0, r8
 8007744:	4649      	mov	r1, r9
 8007746:	4b6c      	ldr	r3, [pc, #432]	; (80078f8 <_strtod_l+0xc00>)
 8007748:	2200      	movs	r2, #0
 800774a:	f7f8 ff6d 	bl	8000628 <__aeabi_dmul>
 800774e:	4680      	mov	r8, r0
 8007750:	4689      	mov	r9, r1
 8007752:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007756:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800775a:	9315      	str	r3, [sp, #84]	; 0x54
 800775c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007760:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007764:	e79d      	b.n	80076a2 <_strtod_l+0x9aa>
 8007766:	f1ba 0f01 	cmp.w	sl, #1
 800776a:	d102      	bne.n	8007772 <_strtod_l+0xa7a>
 800776c:	2f00      	cmp	r7, #0
 800776e:	f43f ad83 	beq.w	8007278 <_strtod_l+0x580>
 8007772:	4b62      	ldr	r3, [pc, #392]	; (80078fc <_strtod_l+0xc04>)
 8007774:	2200      	movs	r2, #0
 8007776:	e78e      	b.n	8007696 <_strtod_l+0x99e>
 8007778:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80078f8 <_strtod_l+0xc00>
 800777c:	f04f 0800 	mov.w	r8, #0
 8007780:	e7e7      	b.n	8007752 <_strtod_l+0xa5a>
 8007782:	4b5d      	ldr	r3, [pc, #372]	; (80078f8 <_strtod_l+0xc00>)
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	2200      	movs	r2, #0
 800778a:	f7f8 ff4d 	bl	8000628 <__aeabi_dmul>
 800778e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007790:	4680      	mov	r8, r0
 8007792:	4689      	mov	r9, r1
 8007794:	b933      	cbnz	r3, 80077a4 <_strtod_l+0xaac>
 8007796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800779a:	900e      	str	r0, [sp, #56]	; 0x38
 800779c:	930f      	str	r3, [sp, #60]	; 0x3c
 800779e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80077a2:	e7dd      	b.n	8007760 <_strtod_l+0xa68>
 80077a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80077a8:	e7f9      	b.n	800779e <_strtod_l+0xaa6>
 80077aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1a8      	bne.n	8007706 <_strtod_l+0xa0e>
 80077b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077ba:	0d1b      	lsrs	r3, r3, #20
 80077bc:	051b      	lsls	r3, r3, #20
 80077be:	429a      	cmp	r2, r3
 80077c0:	d1a1      	bne.n	8007706 <_strtod_l+0xa0e>
 80077c2:	4640      	mov	r0, r8
 80077c4:	4649      	mov	r1, r9
 80077c6:	f7f9 fa8f 	bl	8000ce8 <__aeabi_d2lz>
 80077ca:	f7f8 feff 	bl	80005cc <__aeabi_l2d>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4640      	mov	r0, r8
 80077d4:	4649      	mov	r1, r9
 80077d6:	f7f8 fd6f 	bl	80002b8 <__aeabi_dsub>
 80077da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077e0:	ea43 030a 	orr.w	r3, r3, sl
 80077e4:	4313      	orrs	r3, r2
 80077e6:	4680      	mov	r8, r0
 80077e8:	4689      	mov	r9, r1
 80077ea:	d055      	beq.n	8007898 <_strtod_l+0xba0>
 80077ec:	a336      	add	r3, pc, #216	; (adr r3, 80078c8 <_strtod_l+0xbd0>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	f7f9 f98b 	bl	8000b0c <__aeabi_dcmplt>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f47f acd0 	bne.w	800719c <_strtod_l+0x4a4>
 80077fc:	a334      	add	r3, pc, #208	; (adr r3, 80078d0 <_strtod_l+0xbd8>)
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	4640      	mov	r0, r8
 8007804:	4649      	mov	r1, r9
 8007806:	f7f9 f99f 	bl	8000b48 <__aeabi_dcmpgt>
 800780a:	2800      	cmp	r0, #0
 800780c:	f43f af7b 	beq.w	8007706 <_strtod_l+0xa0e>
 8007810:	e4c4      	b.n	800719c <_strtod_l+0x4a4>
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	b333      	cbz	r3, 8007864 <_strtod_l+0xb6c>
 8007816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007818:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800781c:	d822      	bhi.n	8007864 <_strtod_l+0xb6c>
 800781e:	a32e      	add	r3, pc, #184	; (adr r3, 80078d8 <_strtod_l+0xbe0>)
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	4640      	mov	r0, r8
 8007826:	4649      	mov	r1, r9
 8007828:	f7f9 f97a 	bl	8000b20 <__aeabi_dcmple>
 800782c:	b1a0      	cbz	r0, 8007858 <_strtod_l+0xb60>
 800782e:	4649      	mov	r1, r9
 8007830:	4640      	mov	r0, r8
 8007832:	f7f9 f9d1 	bl	8000bd8 <__aeabi_d2uiz>
 8007836:	2801      	cmp	r0, #1
 8007838:	bf38      	it	cc
 800783a:	2001      	movcc	r0, #1
 800783c:	f7f8 fe7a 	bl	8000534 <__aeabi_ui2d>
 8007840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007842:	4680      	mov	r8, r0
 8007844:	4689      	mov	r9, r1
 8007846:	bb23      	cbnz	r3, 8007892 <_strtod_l+0xb9a>
 8007848:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800784c:	9010      	str	r0, [sp, #64]	; 0x40
 800784e:	9311      	str	r3, [sp, #68]	; 0x44
 8007850:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007854:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800785c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	9309      	str	r3, [sp, #36]	; 0x24
 8007864:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007868:	eeb0 0a48 	vmov.f32	s0, s16
 800786c:	eef0 0a68 	vmov.f32	s1, s17
 8007870:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007874:	f001 fe58 	bl	8009528 <__ulp>
 8007878:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800787c:	ec53 2b10 	vmov	r2, r3, d0
 8007880:	f7f8 fed2 	bl	8000628 <__aeabi_dmul>
 8007884:	ec53 2b18 	vmov	r2, r3, d8
 8007888:	f7f8 fd18 	bl	80002bc <__adddf3>
 800788c:	4682      	mov	sl, r0
 800788e:	468b      	mov	fp, r1
 8007890:	e78d      	b.n	80077ae <_strtod_l+0xab6>
 8007892:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007896:	e7db      	b.n	8007850 <_strtod_l+0xb58>
 8007898:	a311      	add	r3, pc, #68	; (adr r3, 80078e0 <_strtod_l+0xbe8>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f9 f935 	bl	8000b0c <__aeabi_dcmplt>
 80078a2:	e7b2      	b.n	800780a <_strtod_l+0xb12>
 80078a4:	2300      	movs	r3, #0
 80078a6:	930a      	str	r3, [sp, #40]	; 0x28
 80078a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	f7ff ba6b 	b.w	8006d88 <_strtod_l+0x90>
 80078b2:	2a65      	cmp	r2, #101	; 0x65
 80078b4:	f43f ab5f 	beq.w	8006f76 <_strtod_l+0x27e>
 80078b8:	2a45      	cmp	r2, #69	; 0x45
 80078ba:	f43f ab5c 	beq.w	8006f76 <_strtod_l+0x27e>
 80078be:	2301      	movs	r3, #1
 80078c0:	f7ff bb94 	b.w	8006fec <_strtod_l+0x2f4>
 80078c4:	f3af 8000 	nop.w
 80078c8:	94a03595 	.word	0x94a03595
 80078cc:	3fdfffff 	.word	0x3fdfffff
 80078d0:	35afe535 	.word	0x35afe535
 80078d4:	3fe00000 	.word	0x3fe00000
 80078d8:	ffc00000 	.word	0xffc00000
 80078dc:	41dfffff 	.word	0x41dfffff
 80078e0:	94a03595 	.word	0x94a03595
 80078e4:	3fcfffff 	.word	0x3fcfffff
 80078e8:	3ff00000 	.word	0x3ff00000
 80078ec:	7ff00000 	.word	0x7ff00000
 80078f0:	7fe00000 	.word	0x7fe00000
 80078f4:	7c9fffff 	.word	0x7c9fffff
 80078f8:	3fe00000 	.word	0x3fe00000
 80078fc:	bff00000 	.word	0xbff00000
 8007900:	7fefffff 	.word	0x7fefffff

08007904 <_strtod_r>:
 8007904:	4b01      	ldr	r3, [pc, #4]	; (800790c <_strtod_r+0x8>)
 8007906:	f7ff b9f7 	b.w	8006cf8 <_strtod_l>
 800790a:	bf00      	nop
 800790c:	20000098 	.word	0x20000098

08007910 <_strtol_l.constprop.0>:
 8007910:	2b01      	cmp	r3, #1
 8007912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007916:	d001      	beq.n	800791c <_strtol_l.constprop.0+0xc>
 8007918:	2b24      	cmp	r3, #36	; 0x24
 800791a:	d906      	bls.n	800792a <_strtol_l.constprop.0+0x1a>
 800791c:	f7fe fafe 	bl	8005f1c <__errno>
 8007920:	2316      	movs	r3, #22
 8007922:	6003      	str	r3, [r0, #0]
 8007924:	2000      	movs	r0, #0
 8007926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a10 <_strtol_l.constprop.0+0x100>
 800792e:	460d      	mov	r5, r1
 8007930:	462e      	mov	r6, r5
 8007932:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007936:	f814 700c 	ldrb.w	r7, [r4, ip]
 800793a:	f017 0708 	ands.w	r7, r7, #8
 800793e:	d1f7      	bne.n	8007930 <_strtol_l.constprop.0+0x20>
 8007940:	2c2d      	cmp	r4, #45	; 0x2d
 8007942:	d132      	bne.n	80079aa <_strtol_l.constprop.0+0x9a>
 8007944:	782c      	ldrb	r4, [r5, #0]
 8007946:	2701      	movs	r7, #1
 8007948:	1cb5      	adds	r5, r6, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d05b      	beq.n	8007a06 <_strtol_l.constprop.0+0xf6>
 800794e:	2b10      	cmp	r3, #16
 8007950:	d109      	bne.n	8007966 <_strtol_l.constprop.0+0x56>
 8007952:	2c30      	cmp	r4, #48	; 0x30
 8007954:	d107      	bne.n	8007966 <_strtol_l.constprop.0+0x56>
 8007956:	782c      	ldrb	r4, [r5, #0]
 8007958:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800795c:	2c58      	cmp	r4, #88	; 0x58
 800795e:	d14d      	bne.n	80079fc <_strtol_l.constprop.0+0xec>
 8007960:	786c      	ldrb	r4, [r5, #1]
 8007962:	2310      	movs	r3, #16
 8007964:	3502      	adds	r5, #2
 8007966:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800796a:	f108 38ff 	add.w	r8, r8, #4294967295
 800796e:	f04f 0c00 	mov.w	ip, #0
 8007972:	fbb8 f9f3 	udiv	r9, r8, r3
 8007976:	4666      	mov	r6, ip
 8007978:	fb03 8a19 	mls	sl, r3, r9, r8
 800797c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007980:	f1be 0f09 	cmp.w	lr, #9
 8007984:	d816      	bhi.n	80079b4 <_strtol_l.constprop.0+0xa4>
 8007986:	4674      	mov	r4, lr
 8007988:	42a3      	cmp	r3, r4
 800798a:	dd24      	ble.n	80079d6 <_strtol_l.constprop.0+0xc6>
 800798c:	f1bc 0f00 	cmp.w	ip, #0
 8007990:	db1e      	blt.n	80079d0 <_strtol_l.constprop.0+0xc0>
 8007992:	45b1      	cmp	r9, r6
 8007994:	d31c      	bcc.n	80079d0 <_strtol_l.constprop.0+0xc0>
 8007996:	d101      	bne.n	800799c <_strtol_l.constprop.0+0x8c>
 8007998:	45a2      	cmp	sl, r4
 800799a:	db19      	blt.n	80079d0 <_strtol_l.constprop.0+0xc0>
 800799c:	fb06 4603 	mla	r6, r6, r3, r4
 80079a0:	f04f 0c01 	mov.w	ip, #1
 80079a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079a8:	e7e8      	b.n	800797c <_strtol_l.constprop.0+0x6c>
 80079aa:	2c2b      	cmp	r4, #43	; 0x2b
 80079ac:	bf04      	itt	eq
 80079ae:	782c      	ldrbeq	r4, [r5, #0]
 80079b0:	1cb5      	addeq	r5, r6, #2
 80079b2:	e7ca      	b.n	800794a <_strtol_l.constprop.0+0x3a>
 80079b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079b8:	f1be 0f19 	cmp.w	lr, #25
 80079bc:	d801      	bhi.n	80079c2 <_strtol_l.constprop.0+0xb2>
 80079be:	3c37      	subs	r4, #55	; 0x37
 80079c0:	e7e2      	b.n	8007988 <_strtol_l.constprop.0+0x78>
 80079c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80079c6:	f1be 0f19 	cmp.w	lr, #25
 80079ca:	d804      	bhi.n	80079d6 <_strtol_l.constprop.0+0xc6>
 80079cc:	3c57      	subs	r4, #87	; 0x57
 80079ce:	e7db      	b.n	8007988 <_strtol_l.constprop.0+0x78>
 80079d0:	f04f 3cff 	mov.w	ip, #4294967295
 80079d4:	e7e6      	b.n	80079a4 <_strtol_l.constprop.0+0x94>
 80079d6:	f1bc 0f00 	cmp.w	ip, #0
 80079da:	da05      	bge.n	80079e8 <_strtol_l.constprop.0+0xd8>
 80079dc:	2322      	movs	r3, #34	; 0x22
 80079de:	6003      	str	r3, [r0, #0]
 80079e0:	4646      	mov	r6, r8
 80079e2:	b942      	cbnz	r2, 80079f6 <_strtol_l.constprop.0+0xe6>
 80079e4:	4630      	mov	r0, r6
 80079e6:	e79e      	b.n	8007926 <_strtol_l.constprop.0+0x16>
 80079e8:	b107      	cbz	r7, 80079ec <_strtol_l.constprop.0+0xdc>
 80079ea:	4276      	negs	r6, r6
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	d0f9      	beq.n	80079e4 <_strtol_l.constprop.0+0xd4>
 80079f0:	f1bc 0f00 	cmp.w	ip, #0
 80079f4:	d000      	beq.n	80079f8 <_strtol_l.constprop.0+0xe8>
 80079f6:	1e69      	subs	r1, r5, #1
 80079f8:	6011      	str	r1, [r2, #0]
 80079fa:	e7f3      	b.n	80079e4 <_strtol_l.constprop.0+0xd4>
 80079fc:	2430      	movs	r4, #48	; 0x30
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1b1      	bne.n	8007966 <_strtol_l.constprop.0+0x56>
 8007a02:	2308      	movs	r3, #8
 8007a04:	e7af      	b.n	8007966 <_strtol_l.constprop.0+0x56>
 8007a06:	2c30      	cmp	r4, #48	; 0x30
 8007a08:	d0a5      	beq.n	8007956 <_strtol_l.constprop.0+0x46>
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	e7ab      	b.n	8007966 <_strtol_l.constprop.0+0x56>
 8007a0e:	bf00      	nop
 8007a10:	0800b6f1 	.word	0x0800b6f1

08007a14 <_strtol_r>:
 8007a14:	f7ff bf7c 	b.w	8007910 <_strtol_l.constprop.0>

08007a18 <quorem>:
 8007a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	6903      	ldr	r3, [r0, #16]
 8007a1e:	690c      	ldr	r4, [r1, #16]
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	4607      	mov	r7, r0
 8007a24:	f2c0 8081 	blt.w	8007b2a <quorem+0x112>
 8007a28:	3c01      	subs	r4, #1
 8007a2a:	f101 0814 	add.w	r8, r1, #20
 8007a2e:	f100 0514 	add.w	r5, r0, #20
 8007a32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a40:	3301      	adds	r3, #1
 8007a42:	429a      	cmp	r2, r3
 8007a44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a50:	d331      	bcc.n	8007ab6 <quorem+0x9e>
 8007a52:	f04f 0e00 	mov.w	lr, #0
 8007a56:	4640      	mov	r0, r8
 8007a58:	46ac      	mov	ip, r5
 8007a5a:	46f2      	mov	sl, lr
 8007a5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a60:	b293      	uxth	r3, r2
 8007a62:	fb06 e303 	mla	r3, r6, r3, lr
 8007a66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a70:	f8dc a000 	ldr.w	sl, [ip]
 8007a74:	0c12      	lsrs	r2, r2, #16
 8007a76:	fa13 f38a 	uxtah	r3, r3, sl
 8007a7a:	fb06 e202 	mla	r2, r6, r2, lr
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	9b00      	ldr	r3, [sp, #0]
 8007a82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a86:	b292      	uxth	r2, r2
 8007a88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a90:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a94:	4581      	cmp	r9, r0
 8007a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007a9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aa2:	d2db      	bcs.n	8007a5c <quorem+0x44>
 8007aa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007aa8:	b92b      	cbnz	r3, 8007ab6 <quorem+0x9e>
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	3b04      	subs	r3, #4
 8007aae:	429d      	cmp	r5, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	d32e      	bcc.n	8007b12 <quorem+0xfa>
 8007ab4:	613c      	str	r4, [r7, #16]
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f001 fc90 	bl	80093dc <__mcmp>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	db24      	blt.n	8007b0a <quorem+0xf2>
 8007ac0:	3601      	adds	r6, #1
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f04f 0c00 	mov.w	ip, #0
 8007ac8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007acc:	f8d0 e000 	ldr.w	lr, [r0]
 8007ad0:	b293      	uxth	r3, r2
 8007ad2:	ebac 0303 	sub.w	r3, ip, r3
 8007ad6:	0c12      	lsrs	r2, r2, #16
 8007ad8:	fa13 f38e 	uxtah	r3, r3, lr
 8007adc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ae0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aea:	45c1      	cmp	r9, r8
 8007aec:	f840 3b04 	str.w	r3, [r0], #4
 8007af0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007af4:	d2e8      	bcs.n	8007ac8 <quorem+0xb0>
 8007af6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007afe:	b922      	cbnz	r2, 8007b0a <quorem+0xf2>
 8007b00:	3b04      	subs	r3, #4
 8007b02:	429d      	cmp	r5, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	d30a      	bcc.n	8007b1e <quorem+0x106>
 8007b08:	613c      	str	r4, [r7, #16]
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	b003      	add	sp, #12
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	3b04      	subs	r3, #4
 8007b16:	2a00      	cmp	r2, #0
 8007b18:	d1cc      	bne.n	8007ab4 <quorem+0x9c>
 8007b1a:	3c01      	subs	r4, #1
 8007b1c:	e7c7      	b.n	8007aae <quorem+0x96>
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	3b04      	subs	r3, #4
 8007b22:	2a00      	cmp	r2, #0
 8007b24:	d1f0      	bne.n	8007b08 <quorem+0xf0>
 8007b26:	3c01      	subs	r4, #1
 8007b28:	e7eb      	b.n	8007b02 <quorem+0xea>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e7ee      	b.n	8007b0c <quorem+0xf4>
	...

08007b30 <_dtoa_r>:
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	ed2d 8b04 	vpush	{d8-d9}
 8007b38:	ec57 6b10 	vmov	r6, r7, d0
 8007b3c:	b093      	sub	sp, #76	; 0x4c
 8007b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b44:	9106      	str	r1, [sp, #24]
 8007b46:	ee10 aa10 	vmov	sl, s0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b50:	46bb      	mov	fp, r7
 8007b52:	b975      	cbnz	r5, 8007b72 <_dtoa_r+0x42>
 8007b54:	2010      	movs	r0, #16
 8007b56:	f001 f94d 	bl	8008df4 <malloc>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007b5e:	b920      	cbnz	r0, 8007b6a <_dtoa_r+0x3a>
 8007b60:	4ba7      	ldr	r3, [pc, #668]	; (8007e00 <_dtoa_r+0x2d0>)
 8007b62:	21ea      	movs	r1, #234	; 0xea
 8007b64:	48a7      	ldr	r0, [pc, #668]	; (8007e04 <_dtoa_r+0x2d4>)
 8007b66:	f002 f8bd 	bl	8009ce4 <__assert_func>
 8007b6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b6e:	6005      	str	r5, [r0, #0]
 8007b70:	60c5      	str	r5, [r0, #12]
 8007b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b74:	6819      	ldr	r1, [r3, #0]
 8007b76:	b151      	cbz	r1, 8007b8e <_dtoa_r+0x5e>
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	604a      	str	r2, [r1, #4]
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4093      	lsls	r3, r2
 8007b80:	608b      	str	r3, [r1, #8]
 8007b82:	4620      	mov	r0, r4
 8007b84:	f001 f99e 	bl	8008ec4 <_Bfree>
 8007b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	1e3b      	subs	r3, r7, #0
 8007b90:	bfaa      	itet	ge
 8007b92:	2300      	movge	r3, #0
 8007b94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b98:	f8c8 3000 	strge.w	r3, [r8]
 8007b9c:	4b9a      	ldr	r3, [pc, #616]	; (8007e08 <_dtoa_r+0x2d8>)
 8007b9e:	bfbc      	itt	lt
 8007ba0:	2201      	movlt	r2, #1
 8007ba2:	f8c8 2000 	strlt.w	r2, [r8]
 8007ba6:	ea33 030b 	bics.w	r3, r3, fp
 8007baa:	d11b      	bne.n	8007be4 <_dtoa_r+0xb4>
 8007bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bae:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bb8:	4333      	orrs	r3, r6
 8007bba:	f000 8592 	beq.w	80086e2 <_dtoa_r+0xbb2>
 8007bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bc0:	b963      	cbnz	r3, 8007bdc <_dtoa_r+0xac>
 8007bc2:	4b92      	ldr	r3, [pc, #584]	; (8007e0c <_dtoa_r+0x2dc>)
 8007bc4:	e022      	b.n	8007c0c <_dtoa_r+0xdc>
 8007bc6:	4b92      	ldr	r3, [pc, #584]	; (8007e10 <_dtoa_r+0x2e0>)
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	9801      	ldr	r0, [sp, #4]
 8007bd2:	b013      	add	sp, #76	; 0x4c
 8007bd4:	ecbd 8b04 	vpop	{d8-d9}
 8007bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bdc:	4b8b      	ldr	r3, [pc, #556]	; (8007e0c <_dtoa_r+0x2dc>)
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	3303      	adds	r3, #3
 8007be2:	e7f3      	b.n	8007bcc <_dtoa_r+0x9c>
 8007be4:	2200      	movs	r2, #0
 8007be6:	2300      	movs	r3, #0
 8007be8:	4650      	mov	r0, sl
 8007bea:	4659      	mov	r1, fp
 8007bec:	f7f8 ff84 	bl	8000af8 <__aeabi_dcmpeq>
 8007bf0:	ec4b ab19 	vmov	d9, sl, fp
 8007bf4:	4680      	mov	r8, r0
 8007bf6:	b158      	cbz	r0, 8007c10 <_dtoa_r+0xe0>
 8007bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 856b 	beq.w	80086dc <_dtoa_r+0xbac>
 8007c06:	4883      	ldr	r0, [pc, #524]	; (8007e14 <_dtoa_r+0x2e4>)
 8007c08:	6018      	str	r0, [r3, #0]
 8007c0a:	1e43      	subs	r3, r0, #1
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	e7df      	b.n	8007bd0 <_dtoa_r+0xa0>
 8007c10:	ec4b ab10 	vmov	d0, sl, fp
 8007c14:	aa10      	add	r2, sp, #64	; 0x40
 8007c16:	a911      	add	r1, sp, #68	; 0x44
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 fd01 	bl	8009620 <__d2b>
 8007c1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c22:	ee08 0a10 	vmov	s16, r0
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	f000 8084 	beq.w	8007d34 <_dtoa_r+0x204>
 8007c2c:	ee19 3a90 	vmov	r3, s19
 8007c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c38:	4656      	mov	r6, sl
 8007c3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c46:	4b74      	ldr	r3, [pc, #464]	; (8007e18 <_dtoa_r+0x2e8>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	f7f8 fb33 	bl	80002b8 <__aeabi_dsub>
 8007c52:	a365      	add	r3, pc, #404	; (adr r3, 8007de8 <_dtoa_r+0x2b8>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f7f8 fce6 	bl	8000628 <__aeabi_dmul>
 8007c5c:	a364      	add	r3, pc, #400	; (adr r3, 8007df0 <_dtoa_r+0x2c0>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 fb2b 	bl	80002bc <__adddf3>
 8007c66:	4606      	mov	r6, r0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	460f      	mov	r7, r1
 8007c6c:	f7f8 fc72 	bl	8000554 <__aeabi_i2d>
 8007c70:	a361      	add	r3, pc, #388	; (adr r3, 8007df8 <_dtoa_r+0x2c8>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f7f8 fcd7 	bl	8000628 <__aeabi_dmul>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4630      	mov	r0, r6
 8007c80:	4639      	mov	r1, r7
 8007c82:	f7f8 fb1b 	bl	80002bc <__adddf3>
 8007c86:	4606      	mov	r6, r0
 8007c88:	460f      	mov	r7, r1
 8007c8a:	f7f8 ff7d 	bl	8000b88 <__aeabi_d2iz>
 8007c8e:	2200      	movs	r2, #0
 8007c90:	9000      	str	r0, [sp, #0]
 8007c92:	2300      	movs	r3, #0
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 ff38 	bl	8000b0c <__aeabi_dcmplt>
 8007c9c:	b150      	cbz	r0, 8007cb4 <_dtoa_r+0x184>
 8007c9e:	9800      	ldr	r0, [sp, #0]
 8007ca0:	f7f8 fc58 	bl	8000554 <__aeabi_i2d>
 8007ca4:	4632      	mov	r2, r6
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	f7f8 ff26 	bl	8000af8 <__aeabi_dcmpeq>
 8007cac:	b910      	cbnz	r0, 8007cb4 <_dtoa_r+0x184>
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	9b00      	ldr	r3, [sp, #0]
 8007cb6:	2b16      	cmp	r3, #22
 8007cb8:	d85a      	bhi.n	8007d70 <_dtoa_r+0x240>
 8007cba:	9a00      	ldr	r2, [sp, #0]
 8007cbc:	4b57      	ldr	r3, [pc, #348]	; (8007e1c <_dtoa_r+0x2ec>)
 8007cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	ec51 0b19 	vmov	r0, r1, d9
 8007cca:	f7f8 ff1f 	bl	8000b0c <__aeabi_dcmplt>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d050      	beq.n	8007d74 <_dtoa_r+0x244>
 8007cd2:	9b00      	ldr	r3, [sp, #0]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cde:	1b5d      	subs	r5, r3, r5
 8007ce0:	1e6b      	subs	r3, r5, #1
 8007ce2:	9305      	str	r3, [sp, #20]
 8007ce4:	bf45      	ittet	mi
 8007ce6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cea:	9304      	strmi	r3, [sp, #16]
 8007cec:	2300      	movpl	r3, #0
 8007cee:	2300      	movmi	r3, #0
 8007cf0:	bf4c      	ite	mi
 8007cf2:	9305      	strmi	r3, [sp, #20]
 8007cf4:	9304      	strpl	r3, [sp, #16]
 8007cf6:	9b00      	ldr	r3, [sp, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	db3d      	blt.n	8007d78 <_dtoa_r+0x248>
 8007cfc:	9b05      	ldr	r3, [sp, #20]
 8007cfe:	9a00      	ldr	r2, [sp, #0]
 8007d00:	920a      	str	r2, [sp, #40]	; 0x28
 8007d02:	4413      	add	r3, r2
 8007d04:	9305      	str	r3, [sp, #20]
 8007d06:	2300      	movs	r3, #0
 8007d08:	9307      	str	r3, [sp, #28]
 8007d0a:	9b06      	ldr	r3, [sp, #24]
 8007d0c:	2b09      	cmp	r3, #9
 8007d0e:	f200 8089 	bhi.w	8007e24 <_dtoa_r+0x2f4>
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	bfc4      	itt	gt
 8007d16:	3b04      	subgt	r3, #4
 8007d18:	9306      	strgt	r3, [sp, #24]
 8007d1a:	9b06      	ldr	r3, [sp, #24]
 8007d1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007d20:	bfcc      	ite	gt
 8007d22:	2500      	movgt	r5, #0
 8007d24:	2501      	movle	r5, #1
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	f200 8087 	bhi.w	8007e3a <_dtoa_r+0x30a>
 8007d2c:	e8df f003 	tbb	[pc, r3]
 8007d30:	59383a2d 	.word	0x59383a2d
 8007d34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d38:	441d      	add	r5, r3
 8007d3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	bfc1      	itttt	gt
 8007d42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d52:	bfda      	itte	le
 8007d54:	f1c3 0320 	rsble	r3, r3, #32
 8007d58:	fa06 f003 	lslle.w	r0, r6, r3
 8007d5c:	4318      	orrgt	r0, r3
 8007d5e:	f7f8 fbe9 	bl	8000534 <__aeabi_ui2d>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4606      	mov	r6, r0
 8007d66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d6a:	3d01      	subs	r5, #1
 8007d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d6e:	e76a      	b.n	8007c46 <_dtoa_r+0x116>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e7b2      	b.n	8007cda <_dtoa_r+0x1aa>
 8007d74:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d76:	e7b1      	b.n	8007cdc <_dtoa_r+0x1ac>
 8007d78:	9b04      	ldr	r3, [sp, #16]
 8007d7a:	9a00      	ldr	r2, [sp, #0]
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	4253      	negs	r3, r2
 8007d82:	9307      	str	r3, [sp, #28]
 8007d84:	2300      	movs	r3, #0
 8007d86:	930a      	str	r3, [sp, #40]	; 0x28
 8007d88:	e7bf      	b.n	8007d0a <_dtoa_r+0x1da>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9308      	str	r3, [sp, #32]
 8007d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	dc55      	bgt.n	8007e40 <_dtoa_r+0x310>
 8007d94:	2301      	movs	r3, #1
 8007d96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d9e:	e00c      	b.n	8007dba <_dtoa_r+0x28a>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e7f3      	b.n	8007d8c <_dtoa_r+0x25c>
 8007da4:	2300      	movs	r3, #0
 8007da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da8:	9308      	str	r3, [sp, #32]
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	4413      	add	r3, r2
 8007dae:	9302      	str	r3, [sp, #8]
 8007db0:	3301      	adds	r3, #1
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	9303      	str	r3, [sp, #12]
 8007db6:	bfb8      	it	lt
 8007db8:	2301      	movlt	r3, #1
 8007dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	6042      	str	r2, [r0, #4]
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	f102 0614 	add.w	r6, r2, #20
 8007dc6:	429e      	cmp	r6, r3
 8007dc8:	6841      	ldr	r1, [r0, #4]
 8007dca:	d93d      	bls.n	8007e48 <_dtoa_r+0x318>
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f001 f839 	bl	8008e44 <_Balloc>
 8007dd2:	9001      	str	r0, [sp, #4]
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d13b      	bne.n	8007e50 <_dtoa_r+0x320>
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <_dtoa_r+0x2f0>)
 8007dda:	4602      	mov	r2, r0
 8007ddc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007de0:	e6c0      	b.n	8007b64 <_dtoa_r+0x34>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e7df      	b.n	8007da6 <_dtoa_r+0x276>
 8007de6:	bf00      	nop
 8007de8:	636f4361 	.word	0x636f4361
 8007dec:	3fd287a7 	.word	0x3fd287a7
 8007df0:	8b60c8b3 	.word	0x8b60c8b3
 8007df4:	3fc68a28 	.word	0x3fc68a28
 8007df8:	509f79fb 	.word	0x509f79fb
 8007dfc:	3fd34413 	.word	0x3fd34413
 8007e00:	0800b7fe 	.word	0x0800b7fe
 8007e04:	0800b815 	.word	0x0800b815
 8007e08:	7ff00000 	.word	0x7ff00000
 8007e0c:	0800b7fa 	.word	0x0800b7fa
 8007e10:	0800b7f1 	.word	0x0800b7f1
 8007e14:	0800b671 	.word	0x0800b671
 8007e18:	3ff80000 	.word	0x3ff80000
 8007e1c:	0800b980 	.word	0x0800b980
 8007e20:	0800b870 	.word	0x0800b870
 8007e24:	2501      	movs	r5, #1
 8007e26:	2300      	movs	r3, #0
 8007e28:	9306      	str	r3, [sp, #24]
 8007e2a:	9508      	str	r5, [sp, #32]
 8007e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e34:	2200      	movs	r2, #0
 8007e36:	2312      	movs	r3, #18
 8007e38:	e7b0      	b.n	8007d9c <_dtoa_r+0x26c>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	9308      	str	r3, [sp, #32]
 8007e3e:	e7f5      	b.n	8007e2c <_dtoa_r+0x2fc>
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e46:	e7b8      	b.n	8007dba <_dtoa_r+0x28a>
 8007e48:	3101      	adds	r1, #1
 8007e4a:	6041      	str	r1, [r0, #4]
 8007e4c:	0052      	lsls	r2, r2, #1
 8007e4e:	e7b8      	b.n	8007dc2 <_dtoa_r+0x292>
 8007e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e52:	9a01      	ldr	r2, [sp, #4]
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	2b0e      	cmp	r3, #14
 8007e5a:	f200 809d 	bhi.w	8007f98 <_dtoa_r+0x468>
 8007e5e:	2d00      	cmp	r5, #0
 8007e60:	f000 809a 	beq.w	8007f98 <_dtoa_r+0x468>
 8007e64:	9b00      	ldr	r3, [sp, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dd32      	ble.n	8007ed0 <_dtoa_r+0x3a0>
 8007e6a:	4ab7      	ldr	r2, [pc, #732]	; (8008148 <_dtoa_r+0x618>)
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e78:	9b00      	ldr	r3, [sp, #0]
 8007e7a:	05d8      	lsls	r0, r3, #23
 8007e7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e80:	d516      	bpl.n	8007eb0 <_dtoa_r+0x380>
 8007e82:	4bb2      	ldr	r3, [pc, #712]	; (800814c <_dtoa_r+0x61c>)
 8007e84:	ec51 0b19 	vmov	r0, r1, d9
 8007e88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e8c:	f7f8 fcf6 	bl	800087c <__aeabi_ddiv>
 8007e90:	f007 070f 	and.w	r7, r7, #15
 8007e94:	4682      	mov	sl, r0
 8007e96:	468b      	mov	fp, r1
 8007e98:	2503      	movs	r5, #3
 8007e9a:	4eac      	ldr	r6, [pc, #688]	; (800814c <_dtoa_r+0x61c>)
 8007e9c:	b957      	cbnz	r7, 8007eb4 <_dtoa_r+0x384>
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	f7f8 fce9 	bl	800087c <__aeabi_ddiv>
 8007eaa:	4682      	mov	sl, r0
 8007eac:	468b      	mov	fp, r1
 8007eae:	e028      	b.n	8007f02 <_dtoa_r+0x3d2>
 8007eb0:	2502      	movs	r5, #2
 8007eb2:	e7f2      	b.n	8007e9a <_dtoa_r+0x36a>
 8007eb4:	07f9      	lsls	r1, r7, #31
 8007eb6:	d508      	bpl.n	8007eca <_dtoa_r+0x39a>
 8007eb8:	4640      	mov	r0, r8
 8007eba:	4649      	mov	r1, r9
 8007ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ec0:	f7f8 fbb2 	bl	8000628 <__aeabi_dmul>
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	4680      	mov	r8, r0
 8007ec8:	4689      	mov	r9, r1
 8007eca:	107f      	asrs	r7, r7, #1
 8007ecc:	3608      	adds	r6, #8
 8007ece:	e7e5      	b.n	8007e9c <_dtoa_r+0x36c>
 8007ed0:	f000 809b 	beq.w	800800a <_dtoa_r+0x4da>
 8007ed4:	9b00      	ldr	r3, [sp, #0]
 8007ed6:	4f9d      	ldr	r7, [pc, #628]	; (800814c <_dtoa_r+0x61c>)
 8007ed8:	425e      	negs	r6, r3
 8007eda:	4b9b      	ldr	r3, [pc, #620]	; (8008148 <_dtoa_r+0x618>)
 8007edc:	f006 020f 	and.w	r2, r6, #15
 8007ee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	ec51 0b19 	vmov	r0, r1, d9
 8007eec:	f7f8 fb9c 	bl	8000628 <__aeabi_dmul>
 8007ef0:	1136      	asrs	r6, r6, #4
 8007ef2:	4682      	mov	sl, r0
 8007ef4:	468b      	mov	fp, r1
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2502      	movs	r5, #2
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d17a      	bne.n	8007ff4 <_dtoa_r+0x4c4>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1d3      	bne.n	8007eaa <_dtoa_r+0x37a>
 8007f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8082 	beq.w	800800e <_dtoa_r+0x4de>
 8007f0a:	4b91      	ldr	r3, [pc, #580]	; (8008150 <_dtoa_r+0x620>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	4650      	mov	r0, sl
 8007f10:	4659      	mov	r1, fp
 8007f12:	f7f8 fdfb 	bl	8000b0c <__aeabi_dcmplt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d079      	beq.n	800800e <_dtoa_r+0x4de>
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d076      	beq.n	800800e <_dtoa_r+0x4de>
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dd36      	ble.n	8007f94 <_dtoa_r+0x464>
 8007f26:	9b00      	ldr	r3, [sp, #0]
 8007f28:	4650      	mov	r0, sl
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	1e5f      	subs	r7, r3, #1
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4b88      	ldr	r3, [pc, #544]	; (8008154 <_dtoa_r+0x624>)
 8007f32:	f7f8 fb79 	bl	8000628 <__aeabi_dmul>
 8007f36:	9e02      	ldr	r6, [sp, #8]
 8007f38:	4682      	mov	sl, r0
 8007f3a:	468b      	mov	fp, r1
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f7f8 fb08 	bl	8000554 <__aeabi_i2d>
 8007f44:	4652      	mov	r2, sl
 8007f46:	465b      	mov	r3, fp
 8007f48:	f7f8 fb6e 	bl	8000628 <__aeabi_dmul>
 8007f4c:	4b82      	ldr	r3, [pc, #520]	; (8008158 <_dtoa_r+0x628>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f7f8 f9b4 	bl	80002bc <__adddf3>
 8007f54:	46d0      	mov	r8, sl
 8007f56:	46d9      	mov	r9, fp
 8007f58:	4682      	mov	sl, r0
 8007f5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	d158      	bne.n	8008014 <_dtoa_r+0x4e4>
 8007f62:	4b7e      	ldr	r3, [pc, #504]	; (800815c <_dtoa_r+0x62c>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	4640      	mov	r0, r8
 8007f68:	4649      	mov	r1, r9
 8007f6a:	f7f8 f9a5 	bl	80002b8 <__aeabi_dsub>
 8007f6e:	4652      	mov	r2, sl
 8007f70:	465b      	mov	r3, fp
 8007f72:	4680      	mov	r8, r0
 8007f74:	4689      	mov	r9, r1
 8007f76:	f7f8 fde7 	bl	8000b48 <__aeabi_dcmpgt>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	f040 8295 	bne.w	80084aa <_dtoa_r+0x97a>
 8007f80:	4652      	mov	r2, sl
 8007f82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f86:	4640      	mov	r0, r8
 8007f88:	4649      	mov	r1, r9
 8007f8a:	f7f8 fdbf 	bl	8000b0c <__aeabi_dcmplt>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	f040 8289 	bne.w	80084a6 <_dtoa_r+0x976>
 8007f94:	ec5b ab19 	vmov	sl, fp, d9
 8007f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f2c0 8148 	blt.w	8008230 <_dtoa_r+0x700>
 8007fa0:	9a00      	ldr	r2, [sp, #0]
 8007fa2:	2a0e      	cmp	r2, #14
 8007fa4:	f300 8144 	bgt.w	8008230 <_dtoa_r+0x700>
 8007fa8:	4b67      	ldr	r3, [pc, #412]	; (8008148 <_dtoa_r+0x618>)
 8007faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f280 80d5 	bge.w	8008164 <_dtoa_r+0x634>
 8007fba:	9b03      	ldr	r3, [sp, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f300 80d1 	bgt.w	8008164 <_dtoa_r+0x634>
 8007fc2:	f040 826f 	bne.w	80084a4 <_dtoa_r+0x974>
 8007fc6:	4b65      	ldr	r3, [pc, #404]	; (800815c <_dtoa_r+0x62c>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4649      	mov	r1, r9
 8007fce:	f7f8 fb2b 	bl	8000628 <__aeabi_dmul>
 8007fd2:	4652      	mov	r2, sl
 8007fd4:	465b      	mov	r3, fp
 8007fd6:	f7f8 fdad 	bl	8000b34 <__aeabi_dcmpge>
 8007fda:	9e03      	ldr	r6, [sp, #12]
 8007fdc:	4637      	mov	r7, r6
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f040 8245 	bne.w	800846e <_dtoa_r+0x93e>
 8007fe4:	9d01      	ldr	r5, [sp, #4]
 8007fe6:	2331      	movs	r3, #49	; 0x31
 8007fe8:	f805 3b01 	strb.w	r3, [r5], #1
 8007fec:	9b00      	ldr	r3, [sp, #0]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	e240      	b.n	8008476 <_dtoa_r+0x946>
 8007ff4:	07f2      	lsls	r2, r6, #31
 8007ff6:	d505      	bpl.n	8008004 <_dtoa_r+0x4d4>
 8007ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ffc:	f7f8 fb14 	bl	8000628 <__aeabi_dmul>
 8008000:	3501      	adds	r5, #1
 8008002:	2301      	movs	r3, #1
 8008004:	1076      	asrs	r6, r6, #1
 8008006:	3708      	adds	r7, #8
 8008008:	e777      	b.n	8007efa <_dtoa_r+0x3ca>
 800800a:	2502      	movs	r5, #2
 800800c:	e779      	b.n	8007f02 <_dtoa_r+0x3d2>
 800800e:	9f00      	ldr	r7, [sp, #0]
 8008010:	9e03      	ldr	r6, [sp, #12]
 8008012:	e794      	b.n	8007f3e <_dtoa_r+0x40e>
 8008014:	9901      	ldr	r1, [sp, #4]
 8008016:	4b4c      	ldr	r3, [pc, #304]	; (8008148 <_dtoa_r+0x618>)
 8008018:	4431      	add	r1, r6
 800801a:	910d      	str	r1, [sp, #52]	; 0x34
 800801c:	9908      	ldr	r1, [sp, #32]
 800801e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008026:	2900      	cmp	r1, #0
 8008028:	d043      	beq.n	80080b2 <_dtoa_r+0x582>
 800802a:	494d      	ldr	r1, [pc, #308]	; (8008160 <_dtoa_r+0x630>)
 800802c:	2000      	movs	r0, #0
 800802e:	f7f8 fc25 	bl	800087c <__aeabi_ddiv>
 8008032:	4652      	mov	r2, sl
 8008034:	465b      	mov	r3, fp
 8008036:	f7f8 f93f 	bl	80002b8 <__aeabi_dsub>
 800803a:	9d01      	ldr	r5, [sp, #4]
 800803c:	4682      	mov	sl, r0
 800803e:	468b      	mov	fp, r1
 8008040:	4649      	mov	r1, r9
 8008042:	4640      	mov	r0, r8
 8008044:	f7f8 fda0 	bl	8000b88 <__aeabi_d2iz>
 8008048:	4606      	mov	r6, r0
 800804a:	f7f8 fa83 	bl	8000554 <__aeabi_i2d>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 f92f 	bl	80002b8 <__aeabi_dsub>
 800805a:	3630      	adds	r6, #48	; 0x30
 800805c:	f805 6b01 	strb.w	r6, [r5], #1
 8008060:	4652      	mov	r2, sl
 8008062:	465b      	mov	r3, fp
 8008064:	4680      	mov	r8, r0
 8008066:	4689      	mov	r9, r1
 8008068:	f7f8 fd50 	bl	8000b0c <__aeabi_dcmplt>
 800806c:	2800      	cmp	r0, #0
 800806e:	d163      	bne.n	8008138 <_dtoa_r+0x608>
 8008070:	4642      	mov	r2, r8
 8008072:	464b      	mov	r3, r9
 8008074:	4936      	ldr	r1, [pc, #216]	; (8008150 <_dtoa_r+0x620>)
 8008076:	2000      	movs	r0, #0
 8008078:	f7f8 f91e 	bl	80002b8 <__aeabi_dsub>
 800807c:	4652      	mov	r2, sl
 800807e:	465b      	mov	r3, fp
 8008080:	f7f8 fd44 	bl	8000b0c <__aeabi_dcmplt>
 8008084:	2800      	cmp	r0, #0
 8008086:	f040 80b5 	bne.w	80081f4 <_dtoa_r+0x6c4>
 800808a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800808c:	429d      	cmp	r5, r3
 800808e:	d081      	beq.n	8007f94 <_dtoa_r+0x464>
 8008090:	4b30      	ldr	r3, [pc, #192]	; (8008154 <_dtoa_r+0x624>)
 8008092:	2200      	movs	r2, #0
 8008094:	4650      	mov	r0, sl
 8008096:	4659      	mov	r1, fp
 8008098:	f7f8 fac6 	bl	8000628 <__aeabi_dmul>
 800809c:	4b2d      	ldr	r3, [pc, #180]	; (8008154 <_dtoa_r+0x624>)
 800809e:	4682      	mov	sl, r0
 80080a0:	468b      	mov	fp, r1
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	2200      	movs	r2, #0
 80080a8:	f7f8 fabe 	bl	8000628 <__aeabi_dmul>
 80080ac:	4680      	mov	r8, r0
 80080ae:	4689      	mov	r9, r1
 80080b0:	e7c6      	b.n	8008040 <_dtoa_r+0x510>
 80080b2:	4650      	mov	r0, sl
 80080b4:	4659      	mov	r1, fp
 80080b6:	f7f8 fab7 	bl	8000628 <__aeabi_dmul>
 80080ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080bc:	9d01      	ldr	r5, [sp, #4]
 80080be:	930f      	str	r3, [sp, #60]	; 0x3c
 80080c0:	4682      	mov	sl, r0
 80080c2:	468b      	mov	fp, r1
 80080c4:	4649      	mov	r1, r9
 80080c6:	4640      	mov	r0, r8
 80080c8:	f7f8 fd5e 	bl	8000b88 <__aeabi_d2iz>
 80080cc:	4606      	mov	r6, r0
 80080ce:	f7f8 fa41 	bl	8000554 <__aeabi_i2d>
 80080d2:	3630      	adds	r6, #48	; 0x30
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4640      	mov	r0, r8
 80080da:	4649      	mov	r1, r9
 80080dc:	f7f8 f8ec 	bl	80002b8 <__aeabi_dsub>
 80080e0:	f805 6b01 	strb.w	r6, [r5], #1
 80080e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080e6:	429d      	cmp	r5, r3
 80080e8:	4680      	mov	r8, r0
 80080ea:	4689      	mov	r9, r1
 80080ec:	f04f 0200 	mov.w	r2, #0
 80080f0:	d124      	bne.n	800813c <_dtoa_r+0x60c>
 80080f2:	4b1b      	ldr	r3, [pc, #108]	; (8008160 <_dtoa_r+0x630>)
 80080f4:	4650      	mov	r0, sl
 80080f6:	4659      	mov	r1, fp
 80080f8:	f7f8 f8e0 	bl	80002bc <__adddf3>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4640      	mov	r0, r8
 8008102:	4649      	mov	r1, r9
 8008104:	f7f8 fd20 	bl	8000b48 <__aeabi_dcmpgt>
 8008108:	2800      	cmp	r0, #0
 800810a:	d173      	bne.n	80081f4 <_dtoa_r+0x6c4>
 800810c:	4652      	mov	r2, sl
 800810e:	465b      	mov	r3, fp
 8008110:	4913      	ldr	r1, [pc, #76]	; (8008160 <_dtoa_r+0x630>)
 8008112:	2000      	movs	r0, #0
 8008114:	f7f8 f8d0 	bl	80002b8 <__aeabi_dsub>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4640      	mov	r0, r8
 800811e:	4649      	mov	r1, r9
 8008120:	f7f8 fcf4 	bl	8000b0c <__aeabi_dcmplt>
 8008124:	2800      	cmp	r0, #0
 8008126:	f43f af35 	beq.w	8007f94 <_dtoa_r+0x464>
 800812a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800812c:	1e6b      	subs	r3, r5, #1
 800812e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008130:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008134:	2b30      	cmp	r3, #48	; 0x30
 8008136:	d0f8      	beq.n	800812a <_dtoa_r+0x5fa>
 8008138:	9700      	str	r7, [sp, #0]
 800813a:	e049      	b.n	80081d0 <_dtoa_r+0x6a0>
 800813c:	4b05      	ldr	r3, [pc, #20]	; (8008154 <_dtoa_r+0x624>)
 800813e:	f7f8 fa73 	bl	8000628 <__aeabi_dmul>
 8008142:	4680      	mov	r8, r0
 8008144:	4689      	mov	r9, r1
 8008146:	e7bd      	b.n	80080c4 <_dtoa_r+0x594>
 8008148:	0800b980 	.word	0x0800b980
 800814c:	0800b958 	.word	0x0800b958
 8008150:	3ff00000 	.word	0x3ff00000
 8008154:	40240000 	.word	0x40240000
 8008158:	401c0000 	.word	0x401c0000
 800815c:	40140000 	.word	0x40140000
 8008160:	3fe00000 	.word	0x3fe00000
 8008164:	9d01      	ldr	r5, [sp, #4]
 8008166:	4656      	mov	r6, sl
 8008168:	465f      	mov	r7, fp
 800816a:	4642      	mov	r2, r8
 800816c:	464b      	mov	r3, r9
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 fb83 	bl	800087c <__aeabi_ddiv>
 8008176:	f7f8 fd07 	bl	8000b88 <__aeabi_d2iz>
 800817a:	4682      	mov	sl, r0
 800817c:	f7f8 f9ea 	bl	8000554 <__aeabi_i2d>
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	f7f8 fa50 	bl	8000628 <__aeabi_dmul>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4630      	mov	r0, r6
 800818e:	4639      	mov	r1, r7
 8008190:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008194:	f7f8 f890 	bl	80002b8 <__aeabi_dsub>
 8008198:	f805 6b01 	strb.w	r6, [r5], #1
 800819c:	9e01      	ldr	r6, [sp, #4]
 800819e:	9f03      	ldr	r7, [sp, #12]
 80081a0:	1bae      	subs	r6, r5, r6
 80081a2:	42b7      	cmp	r7, r6
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	d135      	bne.n	8008216 <_dtoa_r+0x6e6>
 80081aa:	f7f8 f887 	bl	80002bc <__adddf3>
 80081ae:	4642      	mov	r2, r8
 80081b0:	464b      	mov	r3, r9
 80081b2:	4606      	mov	r6, r0
 80081b4:	460f      	mov	r7, r1
 80081b6:	f7f8 fcc7 	bl	8000b48 <__aeabi_dcmpgt>
 80081ba:	b9d0      	cbnz	r0, 80081f2 <_dtoa_r+0x6c2>
 80081bc:	4642      	mov	r2, r8
 80081be:	464b      	mov	r3, r9
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 fc98 	bl	8000af8 <__aeabi_dcmpeq>
 80081c8:	b110      	cbz	r0, 80081d0 <_dtoa_r+0x6a0>
 80081ca:	f01a 0f01 	tst.w	sl, #1
 80081ce:	d110      	bne.n	80081f2 <_dtoa_r+0x6c2>
 80081d0:	4620      	mov	r0, r4
 80081d2:	ee18 1a10 	vmov	r1, s16
 80081d6:	f000 fe75 	bl	8008ec4 <_Bfree>
 80081da:	2300      	movs	r3, #0
 80081dc:	9800      	ldr	r0, [sp, #0]
 80081de:	702b      	strb	r3, [r5, #0]
 80081e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081e2:	3001      	adds	r0, #1
 80081e4:	6018      	str	r0, [r3, #0]
 80081e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f43f acf1 	beq.w	8007bd0 <_dtoa_r+0xa0>
 80081ee:	601d      	str	r5, [r3, #0]
 80081f0:	e4ee      	b.n	8007bd0 <_dtoa_r+0xa0>
 80081f2:	9f00      	ldr	r7, [sp, #0]
 80081f4:	462b      	mov	r3, r5
 80081f6:	461d      	mov	r5, r3
 80081f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081fc:	2a39      	cmp	r2, #57	; 0x39
 80081fe:	d106      	bne.n	800820e <_dtoa_r+0x6de>
 8008200:	9a01      	ldr	r2, [sp, #4]
 8008202:	429a      	cmp	r2, r3
 8008204:	d1f7      	bne.n	80081f6 <_dtoa_r+0x6c6>
 8008206:	9901      	ldr	r1, [sp, #4]
 8008208:	2230      	movs	r2, #48	; 0x30
 800820a:	3701      	adds	r7, #1
 800820c:	700a      	strb	r2, [r1, #0]
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	3201      	adds	r2, #1
 8008212:	701a      	strb	r2, [r3, #0]
 8008214:	e790      	b.n	8008138 <_dtoa_r+0x608>
 8008216:	4ba6      	ldr	r3, [pc, #664]	; (80084b0 <_dtoa_r+0x980>)
 8008218:	2200      	movs	r2, #0
 800821a:	f7f8 fa05 	bl	8000628 <__aeabi_dmul>
 800821e:	2200      	movs	r2, #0
 8008220:	2300      	movs	r3, #0
 8008222:	4606      	mov	r6, r0
 8008224:	460f      	mov	r7, r1
 8008226:	f7f8 fc67 	bl	8000af8 <__aeabi_dcmpeq>
 800822a:	2800      	cmp	r0, #0
 800822c:	d09d      	beq.n	800816a <_dtoa_r+0x63a>
 800822e:	e7cf      	b.n	80081d0 <_dtoa_r+0x6a0>
 8008230:	9a08      	ldr	r2, [sp, #32]
 8008232:	2a00      	cmp	r2, #0
 8008234:	f000 80d7 	beq.w	80083e6 <_dtoa_r+0x8b6>
 8008238:	9a06      	ldr	r2, [sp, #24]
 800823a:	2a01      	cmp	r2, #1
 800823c:	f300 80ba 	bgt.w	80083b4 <_dtoa_r+0x884>
 8008240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008242:	2a00      	cmp	r2, #0
 8008244:	f000 80b2 	beq.w	80083ac <_dtoa_r+0x87c>
 8008248:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800824c:	9e07      	ldr	r6, [sp, #28]
 800824e:	9d04      	ldr	r5, [sp, #16]
 8008250:	9a04      	ldr	r2, [sp, #16]
 8008252:	441a      	add	r2, r3
 8008254:	9204      	str	r2, [sp, #16]
 8008256:	9a05      	ldr	r2, [sp, #20]
 8008258:	2101      	movs	r1, #1
 800825a:	441a      	add	r2, r3
 800825c:	4620      	mov	r0, r4
 800825e:	9205      	str	r2, [sp, #20]
 8008260:	f000 ff32 	bl	80090c8 <__i2b>
 8008264:	4607      	mov	r7, r0
 8008266:	2d00      	cmp	r5, #0
 8008268:	dd0c      	ble.n	8008284 <_dtoa_r+0x754>
 800826a:	9b05      	ldr	r3, [sp, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	dd09      	ble.n	8008284 <_dtoa_r+0x754>
 8008270:	42ab      	cmp	r3, r5
 8008272:	9a04      	ldr	r2, [sp, #16]
 8008274:	bfa8      	it	ge
 8008276:	462b      	movge	r3, r5
 8008278:	1ad2      	subs	r2, r2, r3
 800827a:	9204      	str	r2, [sp, #16]
 800827c:	9a05      	ldr	r2, [sp, #20]
 800827e:	1aed      	subs	r5, r5, r3
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	9b07      	ldr	r3, [sp, #28]
 8008286:	b31b      	cbz	r3, 80082d0 <_dtoa_r+0x7a0>
 8008288:	9b08      	ldr	r3, [sp, #32]
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 80af 	beq.w	80083ee <_dtoa_r+0x8be>
 8008290:	2e00      	cmp	r6, #0
 8008292:	dd13      	ble.n	80082bc <_dtoa_r+0x78c>
 8008294:	4639      	mov	r1, r7
 8008296:	4632      	mov	r2, r6
 8008298:	4620      	mov	r0, r4
 800829a:	f000 ffd5 	bl	8009248 <__pow5mult>
 800829e:	ee18 2a10 	vmov	r2, s16
 80082a2:	4601      	mov	r1, r0
 80082a4:	4607      	mov	r7, r0
 80082a6:	4620      	mov	r0, r4
 80082a8:	f000 ff24 	bl	80090f4 <__multiply>
 80082ac:	ee18 1a10 	vmov	r1, s16
 80082b0:	4680      	mov	r8, r0
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 fe06 	bl	8008ec4 <_Bfree>
 80082b8:	ee08 8a10 	vmov	s16, r8
 80082bc:	9b07      	ldr	r3, [sp, #28]
 80082be:	1b9a      	subs	r2, r3, r6
 80082c0:	d006      	beq.n	80082d0 <_dtoa_r+0x7a0>
 80082c2:	ee18 1a10 	vmov	r1, s16
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 ffbe 	bl	8009248 <__pow5mult>
 80082cc:	ee08 0a10 	vmov	s16, r0
 80082d0:	2101      	movs	r1, #1
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 fef8 	bl	80090c8 <__i2b>
 80082d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082da:	2b00      	cmp	r3, #0
 80082dc:	4606      	mov	r6, r0
 80082de:	f340 8088 	ble.w	80083f2 <_dtoa_r+0x8c2>
 80082e2:	461a      	mov	r2, r3
 80082e4:	4601      	mov	r1, r0
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 ffae 	bl	8009248 <__pow5mult>
 80082ec:	9b06      	ldr	r3, [sp, #24]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	4606      	mov	r6, r0
 80082f2:	f340 8081 	ble.w	80083f8 <_dtoa_r+0x8c8>
 80082f6:	f04f 0800 	mov.w	r8, #0
 80082fa:	6933      	ldr	r3, [r6, #16]
 80082fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008300:	6918      	ldr	r0, [r3, #16]
 8008302:	f000 fe91 	bl	8009028 <__hi0bits>
 8008306:	f1c0 0020 	rsb	r0, r0, #32
 800830a:	9b05      	ldr	r3, [sp, #20]
 800830c:	4418      	add	r0, r3
 800830e:	f010 001f 	ands.w	r0, r0, #31
 8008312:	f000 8092 	beq.w	800843a <_dtoa_r+0x90a>
 8008316:	f1c0 0320 	rsb	r3, r0, #32
 800831a:	2b04      	cmp	r3, #4
 800831c:	f340 808a 	ble.w	8008434 <_dtoa_r+0x904>
 8008320:	f1c0 001c 	rsb	r0, r0, #28
 8008324:	9b04      	ldr	r3, [sp, #16]
 8008326:	4403      	add	r3, r0
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	9b05      	ldr	r3, [sp, #20]
 800832c:	4403      	add	r3, r0
 800832e:	4405      	add	r5, r0
 8008330:	9305      	str	r3, [sp, #20]
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	dd07      	ble.n	8008348 <_dtoa_r+0x818>
 8008338:	ee18 1a10 	vmov	r1, s16
 800833c:	461a      	mov	r2, r3
 800833e:	4620      	mov	r0, r4
 8008340:	f000 ffdc 	bl	80092fc <__lshift>
 8008344:	ee08 0a10 	vmov	s16, r0
 8008348:	9b05      	ldr	r3, [sp, #20]
 800834a:	2b00      	cmp	r3, #0
 800834c:	dd05      	ble.n	800835a <_dtoa_r+0x82a>
 800834e:	4631      	mov	r1, r6
 8008350:	461a      	mov	r2, r3
 8008352:	4620      	mov	r0, r4
 8008354:	f000 ffd2 	bl	80092fc <__lshift>
 8008358:	4606      	mov	r6, r0
 800835a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d06e      	beq.n	800843e <_dtoa_r+0x90e>
 8008360:	ee18 0a10 	vmov	r0, s16
 8008364:	4631      	mov	r1, r6
 8008366:	f001 f839 	bl	80093dc <__mcmp>
 800836a:	2800      	cmp	r0, #0
 800836c:	da67      	bge.n	800843e <_dtoa_r+0x90e>
 800836e:	9b00      	ldr	r3, [sp, #0]
 8008370:	3b01      	subs	r3, #1
 8008372:	ee18 1a10 	vmov	r1, s16
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	220a      	movs	r2, #10
 800837a:	2300      	movs	r3, #0
 800837c:	4620      	mov	r0, r4
 800837e:	f000 fdc3 	bl	8008f08 <__multadd>
 8008382:	9b08      	ldr	r3, [sp, #32]
 8008384:	ee08 0a10 	vmov	s16, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 81b1 	beq.w	80086f0 <_dtoa_r+0xbc0>
 800838e:	2300      	movs	r3, #0
 8008390:	4639      	mov	r1, r7
 8008392:	220a      	movs	r2, #10
 8008394:	4620      	mov	r0, r4
 8008396:	f000 fdb7 	bl	8008f08 <__multadd>
 800839a:	9b02      	ldr	r3, [sp, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	4607      	mov	r7, r0
 80083a0:	f300 808e 	bgt.w	80084c0 <_dtoa_r+0x990>
 80083a4:	9b06      	ldr	r3, [sp, #24]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	dc51      	bgt.n	800844e <_dtoa_r+0x91e>
 80083aa:	e089      	b.n	80084c0 <_dtoa_r+0x990>
 80083ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083b2:	e74b      	b.n	800824c <_dtoa_r+0x71c>
 80083b4:	9b03      	ldr	r3, [sp, #12]
 80083b6:	1e5e      	subs	r6, r3, #1
 80083b8:	9b07      	ldr	r3, [sp, #28]
 80083ba:	42b3      	cmp	r3, r6
 80083bc:	bfbf      	itttt	lt
 80083be:	9b07      	ldrlt	r3, [sp, #28]
 80083c0:	9607      	strlt	r6, [sp, #28]
 80083c2:	1af2      	sublt	r2, r6, r3
 80083c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083c6:	bfb6      	itet	lt
 80083c8:	189b      	addlt	r3, r3, r2
 80083ca:	1b9e      	subge	r6, r3, r6
 80083cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80083ce:	9b03      	ldr	r3, [sp, #12]
 80083d0:	bfb8      	it	lt
 80083d2:	2600      	movlt	r6, #0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfb7      	itett	lt
 80083d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083e0:	1a9d      	sublt	r5, r3, r2
 80083e2:	2300      	movlt	r3, #0
 80083e4:	e734      	b.n	8008250 <_dtoa_r+0x720>
 80083e6:	9e07      	ldr	r6, [sp, #28]
 80083e8:	9d04      	ldr	r5, [sp, #16]
 80083ea:	9f08      	ldr	r7, [sp, #32]
 80083ec:	e73b      	b.n	8008266 <_dtoa_r+0x736>
 80083ee:	9a07      	ldr	r2, [sp, #28]
 80083f0:	e767      	b.n	80082c2 <_dtoa_r+0x792>
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	dc18      	bgt.n	800842a <_dtoa_r+0x8fa>
 80083f8:	f1ba 0f00 	cmp.w	sl, #0
 80083fc:	d115      	bne.n	800842a <_dtoa_r+0x8fa>
 80083fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008402:	b993      	cbnz	r3, 800842a <_dtoa_r+0x8fa>
 8008404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008408:	0d1b      	lsrs	r3, r3, #20
 800840a:	051b      	lsls	r3, r3, #20
 800840c:	b183      	cbz	r3, 8008430 <_dtoa_r+0x900>
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	3301      	adds	r3, #1
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	9b05      	ldr	r3, [sp, #20]
 8008416:	3301      	adds	r3, #1
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	f04f 0801 	mov.w	r8, #1
 800841e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008420:	2b00      	cmp	r3, #0
 8008422:	f47f af6a 	bne.w	80082fa <_dtoa_r+0x7ca>
 8008426:	2001      	movs	r0, #1
 8008428:	e76f      	b.n	800830a <_dtoa_r+0x7da>
 800842a:	f04f 0800 	mov.w	r8, #0
 800842e:	e7f6      	b.n	800841e <_dtoa_r+0x8ee>
 8008430:	4698      	mov	r8, r3
 8008432:	e7f4      	b.n	800841e <_dtoa_r+0x8ee>
 8008434:	f43f af7d 	beq.w	8008332 <_dtoa_r+0x802>
 8008438:	4618      	mov	r0, r3
 800843a:	301c      	adds	r0, #28
 800843c:	e772      	b.n	8008324 <_dtoa_r+0x7f4>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	dc37      	bgt.n	80084b4 <_dtoa_r+0x984>
 8008444:	9b06      	ldr	r3, [sp, #24]
 8008446:	2b02      	cmp	r3, #2
 8008448:	dd34      	ble.n	80084b4 <_dtoa_r+0x984>
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	9302      	str	r3, [sp, #8]
 800844e:	9b02      	ldr	r3, [sp, #8]
 8008450:	b96b      	cbnz	r3, 800846e <_dtoa_r+0x93e>
 8008452:	4631      	mov	r1, r6
 8008454:	2205      	movs	r2, #5
 8008456:	4620      	mov	r0, r4
 8008458:	f000 fd56 	bl	8008f08 <__multadd>
 800845c:	4601      	mov	r1, r0
 800845e:	4606      	mov	r6, r0
 8008460:	ee18 0a10 	vmov	r0, s16
 8008464:	f000 ffba 	bl	80093dc <__mcmp>
 8008468:	2800      	cmp	r0, #0
 800846a:	f73f adbb 	bgt.w	8007fe4 <_dtoa_r+0x4b4>
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	9d01      	ldr	r5, [sp, #4]
 8008472:	43db      	mvns	r3, r3
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	4631      	mov	r1, r6
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fd21 	bl	8008ec4 <_Bfree>
 8008482:	2f00      	cmp	r7, #0
 8008484:	f43f aea4 	beq.w	80081d0 <_dtoa_r+0x6a0>
 8008488:	f1b8 0f00 	cmp.w	r8, #0
 800848c:	d005      	beq.n	800849a <_dtoa_r+0x96a>
 800848e:	45b8      	cmp	r8, r7
 8008490:	d003      	beq.n	800849a <_dtoa_r+0x96a>
 8008492:	4641      	mov	r1, r8
 8008494:	4620      	mov	r0, r4
 8008496:	f000 fd15 	bl	8008ec4 <_Bfree>
 800849a:	4639      	mov	r1, r7
 800849c:	4620      	mov	r0, r4
 800849e:	f000 fd11 	bl	8008ec4 <_Bfree>
 80084a2:	e695      	b.n	80081d0 <_dtoa_r+0x6a0>
 80084a4:	2600      	movs	r6, #0
 80084a6:	4637      	mov	r7, r6
 80084a8:	e7e1      	b.n	800846e <_dtoa_r+0x93e>
 80084aa:	9700      	str	r7, [sp, #0]
 80084ac:	4637      	mov	r7, r6
 80084ae:	e599      	b.n	8007fe4 <_dtoa_r+0x4b4>
 80084b0:	40240000 	.word	0x40240000
 80084b4:	9b08      	ldr	r3, [sp, #32]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 80ca 	beq.w	8008650 <_dtoa_r+0xb20>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	9302      	str	r3, [sp, #8]
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	dd05      	ble.n	80084d0 <_dtoa_r+0x9a0>
 80084c4:	4639      	mov	r1, r7
 80084c6:	462a      	mov	r2, r5
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 ff17 	bl	80092fc <__lshift>
 80084ce:	4607      	mov	r7, r0
 80084d0:	f1b8 0f00 	cmp.w	r8, #0
 80084d4:	d05b      	beq.n	800858e <_dtoa_r+0xa5e>
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fcb3 	bl	8008e44 <_Balloc>
 80084de:	4605      	mov	r5, r0
 80084e0:	b928      	cbnz	r0, 80084ee <_dtoa_r+0x9be>
 80084e2:	4b87      	ldr	r3, [pc, #540]	; (8008700 <_dtoa_r+0xbd0>)
 80084e4:	4602      	mov	r2, r0
 80084e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084ea:	f7ff bb3b 	b.w	8007b64 <_dtoa_r+0x34>
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	3202      	adds	r2, #2
 80084f2:	0092      	lsls	r2, r2, #2
 80084f4:	f107 010c 	add.w	r1, r7, #12
 80084f8:	300c      	adds	r0, #12
 80084fa:	f000 fc95 	bl	8008e28 <memcpy>
 80084fe:	2201      	movs	r2, #1
 8008500:	4629      	mov	r1, r5
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fefa 	bl	80092fc <__lshift>
 8008508:	9b01      	ldr	r3, [sp, #4]
 800850a:	f103 0901 	add.w	r9, r3, #1
 800850e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008512:	4413      	add	r3, r2
 8008514:	9305      	str	r3, [sp, #20]
 8008516:	f00a 0301 	and.w	r3, sl, #1
 800851a:	46b8      	mov	r8, r7
 800851c:	9304      	str	r3, [sp, #16]
 800851e:	4607      	mov	r7, r0
 8008520:	4631      	mov	r1, r6
 8008522:	ee18 0a10 	vmov	r0, s16
 8008526:	f7ff fa77 	bl	8007a18 <quorem>
 800852a:	4641      	mov	r1, r8
 800852c:	9002      	str	r0, [sp, #8]
 800852e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008532:	ee18 0a10 	vmov	r0, s16
 8008536:	f000 ff51 	bl	80093dc <__mcmp>
 800853a:	463a      	mov	r2, r7
 800853c:	9003      	str	r0, [sp, #12]
 800853e:	4631      	mov	r1, r6
 8008540:	4620      	mov	r0, r4
 8008542:	f000 ff67 	bl	8009414 <__mdiff>
 8008546:	68c2      	ldr	r2, [r0, #12]
 8008548:	f109 3bff 	add.w	fp, r9, #4294967295
 800854c:	4605      	mov	r5, r0
 800854e:	bb02      	cbnz	r2, 8008592 <_dtoa_r+0xa62>
 8008550:	4601      	mov	r1, r0
 8008552:	ee18 0a10 	vmov	r0, s16
 8008556:	f000 ff41 	bl	80093dc <__mcmp>
 800855a:	4602      	mov	r2, r0
 800855c:	4629      	mov	r1, r5
 800855e:	4620      	mov	r0, r4
 8008560:	9207      	str	r2, [sp, #28]
 8008562:	f000 fcaf 	bl	8008ec4 <_Bfree>
 8008566:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800856a:	ea43 0102 	orr.w	r1, r3, r2
 800856e:	9b04      	ldr	r3, [sp, #16]
 8008570:	430b      	orrs	r3, r1
 8008572:	464d      	mov	r5, r9
 8008574:	d10f      	bne.n	8008596 <_dtoa_r+0xa66>
 8008576:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800857a:	d02a      	beq.n	80085d2 <_dtoa_r+0xaa2>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	dd02      	ble.n	8008588 <_dtoa_r+0xa58>
 8008582:	9b02      	ldr	r3, [sp, #8]
 8008584:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008588:	f88b a000 	strb.w	sl, [fp]
 800858c:	e775      	b.n	800847a <_dtoa_r+0x94a>
 800858e:	4638      	mov	r0, r7
 8008590:	e7ba      	b.n	8008508 <_dtoa_r+0x9d8>
 8008592:	2201      	movs	r2, #1
 8008594:	e7e2      	b.n	800855c <_dtoa_r+0xa2c>
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	db04      	blt.n	80085a6 <_dtoa_r+0xa76>
 800859c:	9906      	ldr	r1, [sp, #24]
 800859e:	430b      	orrs	r3, r1
 80085a0:	9904      	ldr	r1, [sp, #16]
 80085a2:	430b      	orrs	r3, r1
 80085a4:	d122      	bne.n	80085ec <_dtoa_r+0xabc>
 80085a6:	2a00      	cmp	r2, #0
 80085a8:	ddee      	ble.n	8008588 <_dtoa_r+0xa58>
 80085aa:	ee18 1a10 	vmov	r1, s16
 80085ae:	2201      	movs	r2, #1
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fea3 	bl	80092fc <__lshift>
 80085b6:	4631      	mov	r1, r6
 80085b8:	ee08 0a10 	vmov	s16, r0
 80085bc:	f000 ff0e 	bl	80093dc <__mcmp>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	dc03      	bgt.n	80085cc <_dtoa_r+0xa9c>
 80085c4:	d1e0      	bne.n	8008588 <_dtoa_r+0xa58>
 80085c6:	f01a 0f01 	tst.w	sl, #1
 80085ca:	d0dd      	beq.n	8008588 <_dtoa_r+0xa58>
 80085cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085d0:	d1d7      	bne.n	8008582 <_dtoa_r+0xa52>
 80085d2:	2339      	movs	r3, #57	; 0x39
 80085d4:	f88b 3000 	strb.w	r3, [fp]
 80085d8:	462b      	mov	r3, r5
 80085da:	461d      	mov	r5, r3
 80085dc:	3b01      	subs	r3, #1
 80085de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085e2:	2a39      	cmp	r2, #57	; 0x39
 80085e4:	d071      	beq.n	80086ca <_dtoa_r+0xb9a>
 80085e6:	3201      	adds	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	e746      	b.n	800847a <_dtoa_r+0x94a>
 80085ec:	2a00      	cmp	r2, #0
 80085ee:	dd07      	ble.n	8008600 <_dtoa_r+0xad0>
 80085f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085f4:	d0ed      	beq.n	80085d2 <_dtoa_r+0xaa2>
 80085f6:	f10a 0301 	add.w	r3, sl, #1
 80085fa:	f88b 3000 	strb.w	r3, [fp]
 80085fe:	e73c      	b.n	800847a <_dtoa_r+0x94a>
 8008600:	9b05      	ldr	r3, [sp, #20]
 8008602:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008606:	4599      	cmp	r9, r3
 8008608:	d047      	beq.n	800869a <_dtoa_r+0xb6a>
 800860a:	ee18 1a10 	vmov	r1, s16
 800860e:	2300      	movs	r3, #0
 8008610:	220a      	movs	r2, #10
 8008612:	4620      	mov	r0, r4
 8008614:	f000 fc78 	bl	8008f08 <__multadd>
 8008618:	45b8      	cmp	r8, r7
 800861a:	ee08 0a10 	vmov	s16, r0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	f04f 020a 	mov.w	r2, #10
 8008626:	4641      	mov	r1, r8
 8008628:	4620      	mov	r0, r4
 800862a:	d106      	bne.n	800863a <_dtoa_r+0xb0a>
 800862c:	f000 fc6c 	bl	8008f08 <__multadd>
 8008630:	4680      	mov	r8, r0
 8008632:	4607      	mov	r7, r0
 8008634:	f109 0901 	add.w	r9, r9, #1
 8008638:	e772      	b.n	8008520 <_dtoa_r+0x9f0>
 800863a:	f000 fc65 	bl	8008f08 <__multadd>
 800863e:	4639      	mov	r1, r7
 8008640:	4680      	mov	r8, r0
 8008642:	2300      	movs	r3, #0
 8008644:	220a      	movs	r2, #10
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fc5e 	bl	8008f08 <__multadd>
 800864c:	4607      	mov	r7, r0
 800864e:	e7f1      	b.n	8008634 <_dtoa_r+0xb04>
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	9d01      	ldr	r5, [sp, #4]
 8008656:	ee18 0a10 	vmov	r0, s16
 800865a:	4631      	mov	r1, r6
 800865c:	f7ff f9dc 	bl	8007a18 <quorem>
 8008660:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008664:	9b01      	ldr	r3, [sp, #4]
 8008666:	f805 ab01 	strb.w	sl, [r5], #1
 800866a:	1aea      	subs	r2, r5, r3
 800866c:	9b02      	ldr	r3, [sp, #8]
 800866e:	4293      	cmp	r3, r2
 8008670:	dd09      	ble.n	8008686 <_dtoa_r+0xb56>
 8008672:	ee18 1a10 	vmov	r1, s16
 8008676:	2300      	movs	r3, #0
 8008678:	220a      	movs	r2, #10
 800867a:	4620      	mov	r0, r4
 800867c:	f000 fc44 	bl	8008f08 <__multadd>
 8008680:	ee08 0a10 	vmov	s16, r0
 8008684:	e7e7      	b.n	8008656 <_dtoa_r+0xb26>
 8008686:	9b02      	ldr	r3, [sp, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	bfc8      	it	gt
 800868c:	461d      	movgt	r5, r3
 800868e:	9b01      	ldr	r3, [sp, #4]
 8008690:	bfd8      	it	le
 8008692:	2501      	movle	r5, #1
 8008694:	441d      	add	r5, r3
 8008696:	f04f 0800 	mov.w	r8, #0
 800869a:	ee18 1a10 	vmov	r1, s16
 800869e:	2201      	movs	r2, #1
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 fe2b 	bl	80092fc <__lshift>
 80086a6:	4631      	mov	r1, r6
 80086a8:	ee08 0a10 	vmov	s16, r0
 80086ac:	f000 fe96 	bl	80093dc <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	dc91      	bgt.n	80085d8 <_dtoa_r+0xaa8>
 80086b4:	d102      	bne.n	80086bc <_dtoa_r+0xb8c>
 80086b6:	f01a 0f01 	tst.w	sl, #1
 80086ba:	d18d      	bne.n	80085d8 <_dtoa_r+0xaa8>
 80086bc:	462b      	mov	r3, r5
 80086be:	461d      	mov	r5, r3
 80086c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086c4:	2a30      	cmp	r2, #48	; 0x30
 80086c6:	d0fa      	beq.n	80086be <_dtoa_r+0xb8e>
 80086c8:	e6d7      	b.n	800847a <_dtoa_r+0x94a>
 80086ca:	9a01      	ldr	r2, [sp, #4]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d184      	bne.n	80085da <_dtoa_r+0xaaa>
 80086d0:	9b00      	ldr	r3, [sp, #0]
 80086d2:	3301      	adds	r3, #1
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	2331      	movs	r3, #49	; 0x31
 80086d8:	7013      	strb	r3, [r2, #0]
 80086da:	e6ce      	b.n	800847a <_dtoa_r+0x94a>
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <_dtoa_r+0xbd4>)
 80086de:	f7ff ba95 	b.w	8007c0c <_dtoa_r+0xdc>
 80086e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f47f aa6e 	bne.w	8007bc6 <_dtoa_r+0x96>
 80086ea:	4b07      	ldr	r3, [pc, #28]	; (8008708 <_dtoa_r+0xbd8>)
 80086ec:	f7ff ba8e 	b.w	8007c0c <_dtoa_r+0xdc>
 80086f0:	9b02      	ldr	r3, [sp, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dcae      	bgt.n	8008654 <_dtoa_r+0xb24>
 80086f6:	9b06      	ldr	r3, [sp, #24]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	f73f aea8 	bgt.w	800844e <_dtoa_r+0x91e>
 80086fe:	e7a9      	b.n	8008654 <_dtoa_r+0xb24>
 8008700:	0800b870 	.word	0x0800b870
 8008704:	0800b670 	.word	0x0800b670
 8008708:	0800b7f1 	.word	0x0800b7f1

0800870c <rshift>:
 800870c:	6903      	ldr	r3, [r0, #16]
 800870e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008716:	ea4f 1261 	mov.w	r2, r1, asr #5
 800871a:	f100 0414 	add.w	r4, r0, #20
 800871e:	dd45      	ble.n	80087ac <rshift+0xa0>
 8008720:	f011 011f 	ands.w	r1, r1, #31
 8008724:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008728:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800872c:	d10c      	bne.n	8008748 <rshift+0x3c>
 800872e:	f100 0710 	add.w	r7, r0, #16
 8008732:	4629      	mov	r1, r5
 8008734:	42b1      	cmp	r1, r6
 8008736:	d334      	bcc.n	80087a2 <rshift+0x96>
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	1eea      	subs	r2, r5, #3
 800873e:	4296      	cmp	r6, r2
 8008740:	bf38      	it	cc
 8008742:	2300      	movcc	r3, #0
 8008744:	4423      	add	r3, r4
 8008746:	e015      	b.n	8008774 <rshift+0x68>
 8008748:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800874c:	f1c1 0820 	rsb	r8, r1, #32
 8008750:	40cf      	lsrs	r7, r1
 8008752:	f105 0e04 	add.w	lr, r5, #4
 8008756:	46a1      	mov	r9, r4
 8008758:	4576      	cmp	r6, lr
 800875a:	46f4      	mov	ip, lr
 800875c:	d815      	bhi.n	800878a <rshift+0x7e>
 800875e:	1a9a      	subs	r2, r3, r2
 8008760:	0092      	lsls	r2, r2, #2
 8008762:	3a04      	subs	r2, #4
 8008764:	3501      	adds	r5, #1
 8008766:	42ae      	cmp	r6, r5
 8008768:	bf38      	it	cc
 800876a:	2200      	movcc	r2, #0
 800876c:	18a3      	adds	r3, r4, r2
 800876e:	50a7      	str	r7, [r4, r2]
 8008770:	b107      	cbz	r7, 8008774 <rshift+0x68>
 8008772:	3304      	adds	r3, #4
 8008774:	1b1a      	subs	r2, r3, r4
 8008776:	42a3      	cmp	r3, r4
 8008778:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800877c:	bf08      	it	eq
 800877e:	2300      	moveq	r3, #0
 8008780:	6102      	str	r2, [r0, #16]
 8008782:	bf08      	it	eq
 8008784:	6143      	streq	r3, [r0, #20]
 8008786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800878a:	f8dc c000 	ldr.w	ip, [ip]
 800878e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008792:	ea4c 0707 	orr.w	r7, ip, r7
 8008796:	f849 7b04 	str.w	r7, [r9], #4
 800879a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800879e:	40cf      	lsrs	r7, r1
 80087a0:	e7da      	b.n	8008758 <rshift+0x4c>
 80087a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80087a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80087aa:	e7c3      	b.n	8008734 <rshift+0x28>
 80087ac:	4623      	mov	r3, r4
 80087ae:	e7e1      	b.n	8008774 <rshift+0x68>

080087b0 <__hexdig_fun>:
 80087b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	d802      	bhi.n	80087be <__hexdig_fun+0xe>
 80087b8:	3820      	subs	r0, #32
 80087ba:	b2c0      	uxtb	r0, r0
 80087bc:	4770      	bx	lr
 80087be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087c2:	2b05      	cmp	r3, #5
 80087c4:	d801      	bhi.n	80087ca <__hexdig_fun+0x1a>
 80087c6:	3847      	subs	r0, #71	; 0x47
 80087c8:	e7f7      	b.n	80087ba <__hexdig_fun+0xa>
 80087ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d801      	bhi.n	80087d6 <__hexdig_fun+0x26>
 80087d2:	3827      	subs	r0, #39	; 0x27
 80087d4:	e7f1      	b.n	80087ba <__hexdig_fun+0xa>
 80087d6:	2000      	movs	r0, #0
 80087d8:	4770      	bx	lr
	...

080087dc <__gethex>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	ed2d 8b02 	vpush	{d8}
 80087e4:	b089      	sub	sp, #36	; 0x24
 80087e6:	ee08 0a10 	vmov	s16, r0
 80087ea:	9304      	str	r3, [sp, #16]
 80087ec:	4bb4      	ldr	r3, [pc, #720]	; (8008ac0 <__gethex+0x2e4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	468b      	mov	fp, r1
 80087f6:	4690      	mov	r8, r2
 80087f8:	f7f7 fcfc 	bl	80001f4 <strlen>
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	f8db 2000 	ldr.w	r2, [fp]
 8008802:	4403      	add	r3, r0
 8008804:	4682      	mov	sl, r0
 8008806:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800880a:	9305      	str	r3, [sp, #20]
 800880c:	1c93      	adds	r3, r2, #2
 800880e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008812:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008816:	32fe      	adds	r2, #254	; 0xfe
 8008818:	18d1      	adds	r1, r2, r3
 800881a:	461f      	mov	r7, r3
 800881c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008820:	9100      	str	r1, [sp, #0]
 8008822:	2830      	cmp	r0, #48	; 0x30
 8008824:	d0f8      	beq.n	8008818 <__gethex+0x3c>
 8008826:	f7ff ffc3 	bl	80087b0 <__hexdig_fun>
 800882a:	4604      	mov	r4, r0
 800882c:	2800      	cmp	r0, #0
 800882e:	d13a      	bne.n	80088a6 <__gethex+0xca>
 8008830:	9901      	ldr	r1, [sp, #4]
 8008832:	4652      	mov	r2, sl
 8008834:	4638      	mov	r0, r7
 8008836:	f001 fa33 	bl	8009ca0 <strncmp>
 800883a:	4605      	mov	r5, r0
 800883c:	2800      	cmp	r0, #0
 800883e:	d168      	bne.n	8008912 <__gethex+0x136>
 8008840:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008844:	eb07 060a 	add.w	r6, r7, sl
 8008848:	f7ff ffb2 	bl	80087b0 <__hexdig_fun>
 800884c:	2800      	cmp	r0, #0
 800884e:	d062      	beq.n	8008916 <__gethex+0x13a>
 8008850:	4633      	mov	r3, r6
 8008852:	7818      	ldrb	r0, [r3, #0]
 8008854:	2830      	cmp	r0, #48	; 0x30
 8008856:	461f      	mov	r7, r3
 8008858:	f103 0301 	add.w	r3, r3, #1
 800885c:	d0f9      	beq.n	8008852 <__gethex+0x76>
 800885e:	f7ff ffa7 	bl	80087b0 <__hexdig_fun>
 8008862:	2301      	movs	r3, #1
 8008864:	fab0 f480 	clz	r4, r0
 8008868:	0964      	lsrs	r4, r4, #5
 800886a:	4635      	mov	r5, r6
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	463a      	mov	r2, r7
 8008870:	4616      	mov	r6, r2
 8008872:	3201      	adds	r2, #1
 8008874:	7830      	ldrb	r0, [r6, #0]
 8008876:	f7ff ff9b 	bl	80087b0 <__hexdig_fun>
 800887a:	2800      	cmp	r0, #0
 800887c:	d1f8      	bne.n	8008870 <__gethex+0x94>
 800887e:	9901      	ldr	r1, [sp, #4]
 8008880:	4652      	mov	r2, sl
 8008882:	4630      	mov	r0, r6
 8008884:	f001 fa0c 	bl	8009ca0 <strncmp>
 8008888:	b980      	cbnz	r0, 80088ac <__gethex+0xd0>
 800888a:	b94d      	cbnz	r5, 80088a0 <__gethex+0xc4>
 800888c:	eb06 050a 	add.w	r5, r6, sl
 8008890:	462a      	mov	r2, r5
 8008892:	4616      	mov	r6, r2
 8008894:	3201      	adds	r2, #1
 8008896:	7830      	ldrb	r0, [r6, #0]
 8008898:	f7ff ff8a 	bl	80087b0 <__hexdig_fun>
 800889c:	2800      	cmp	r0, #0
 800889e:	d1f8      	bne.n	8008892 <__gethex+0xb6>
 80088a0:	1bad      	subs	r5, r5, r6
 80088a2:	00ad      	lsls	r5, r5, #2
 80088a4:	e004      	b.n	80088b0 <__gethex+0xd4>
 80088a6:	2400      	movs	r4, #0
 80088a8:	4625      	mov	r5, r4
 80088aa:	e7e0      	b.n	800886e <__gethex+0x92>
 80088ac:	2d00      	cmp	r5, #0
 80088ae:	d1f7      	bne.n	80088a0 <__gethex+0xc4>
 80088b0:	7833      	ldrb	r3, [r6, #0]
 80088b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088b6:	2b50      	cmp	r3, #80	; 0x50
 80088b8:	d13b      	bne.n	8008932 <__gethex+0x156>
 80088ba:	7873      	ldrb	r3, [r6, #1]
 80088bc:	2b2b      	cmp	r3, #43	; 0x2b
 80088be:	d02c      	beq.n	800891a <__gethex+0x13e>
 80088c0:	2b2d      	cmp	r3, #45	; 0x2d
 80088c2:	d02e      	beq.n	8008922 <__gethex+0x146>
 80088c4:	1c71      	adds	r1, r6, #1
 80088c6:	f04f 0900 	mov.w	r9, #0
 80088ca:	7808      	ldrb	r0, [r1, #0]
 80088cc:	f7ff ff70 	bl	80087b0 <__hexdig_fun>
 80088d0:	1e43      	subs	r3, r0, #1
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b18      	cmp	r3, #24
 80088d6:	d82c      	bhi.n	8008932 <__gethex+0x156>
 80088d8:	f1a0 0210 	sub.w	r2, r0, #16
 80088dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088e0:	f7ff ff66 	bl	80087b0 <__hexdig_fun>
 80088e4:	1e43      	subs	r3, r0, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b18      	cmp	r3, #24
 80088ea:	d91d      	bls.n	8008928 <__gethex+0x14c>
 80088ec:	f1b9 0f00 	cmp.w	r9, #0
 80088f0:	d000      	beq.n	80088f4 <__gethex+0x118>
 80088f2:	4252      	negs	r2, r2
 80088f4:	4415      	add	r5, r2
 80088f6:	f8cb 1000 	str.w	r1, [fp]
 80088fa:	b1e4      	cbz	r4, 8008936 <__gethex+0x15a>
 80088fc:	9b00      	ldr	r3, [sp, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bf14      	ite	ne
 8008902:	2700      	movne	r7, #0
 8008904:	2706      	moveq	r7, #6
 8008906:	4638      	mov	r0, r7
 8008908:	b009      	add	sp, #36	; 0x24
 800890a:	ecbd 8b02 	vpop	{d8}
 800890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008912:	463e      	mov	r6, r7
 8008914:	4625      	mov	r5, r4
 8008916:	2401      	movs	r4, #1
 8008918:	e7ca      	b.n	80088b0 <__gethex+0xd4>
 800891a:	f04f 0900 	mov.w	r9, #0
 800891e:	1cb1      	adds	r1, r6, #2
 8008920:	e7d3      	b.n	80088ca <__gethex+0xee>
 8008922:	f04f 0901 	mov.w	r9, #1
 8008926:	e7fa      	b.n	800891e <__gethex+0x142>
 8008928:	230a      	movs	r3, #10
 800892a:	fb03 0202 	mla	r2, r3, r2, r0
 800892e:	3a10      	subs	r2, #16
 8008930:	e7d4      	b.n	80088dc <__gethex+0x100>
 8008932:	4631      	mov	r1, r6
 8008934:	e7df      	b.n	80088f6 <__gethex+0x11a>
 8008936:	1bf3      	subs	r3, r6, r7
 8008938:	3b01      	subs	r3, #1
 800893a:	4621      	mov	r1, r4
 800893c:	2b07      	cmp	r3, #7
 800893e:	dc0b      	bgt.n	8008958 <__gethex+0x17c>
 8008940:	ee18 0a10 	vmov	r0, s16
 8008944:	f000 fa7e 	bl	8008e44 <_Balloc>
 8008948:	4604      	mov	r4, r0
 800894a:	b940      	cbnz	r0, 800895e <__gethex+0x182>
 800894c:	4b5d      	ldr	r3, [pc, #372]	; (8008ac4 <__gethex+0x2e8>)
 800894e:	4602      	mov	r2, r0
 8008950:	21de      	movs	r1, #222	; 0xde
 8008952:	485d      	ldr	r0, [pc, #372]	; (8008ac8 <__gethex+0x2ec>)
 8008954:	f001 f9c6 	bl	8009ce4 <__assert_func>
 8008958:	3101      	adds	r1, #1
 800895a:	105b      	asrs	r3, r3, #1
 800895c:	e7ee      	b.n	800893c <__gethex+0x160>
 800895e:	f100 0914 	add.w	r9, r0, #20
 8008962:	f04f 0b00 	mov.w	fp, #0
 8008966:	f1ca 0301 	rsb	r3, sl, #1
 800896a:	f8cd 9008 	str.w	r9, [sp, #8]
 800896e:	f8cd b000 	str.w	fp, [sp]
 8008972:	9306      	str	r3, [sp, #24]
 8008974:	42b7      	cmp	r7, r6
 8008976:	d340      	bcc.n	80089fa <__gethex+0x21e>
 8008978:	9802      	ldr	r0, [sp, #8]
 800897a:	9b00      	ldr	r3, [sp, #0]
 800897c:	f840 3b04 	str.w	r3, [r0], #4
 8008980:	eba0 0009 	sub.w	r0, r0, r9
 8008984:	1080      	asrs	r0, r0, #2
 8008986:	0146      	lsls	r6, r0, #5
 8008988:	6120      	str	r0, [r4, #16]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fb4c 	bl	8009028 <__hi0bits>
 8008990:	1a30      	subs	r0, r6, r0
 8008992:	f8d8 6000 	ldr.w	r6, [r8]
 8008996:	42b0      	cmp	r0, r6
 8008998:	dd63      	ble.n	8008a62 <__gethex+0x286>
 800899a:	1b87      	subs	r7, r0, r6
 800899c:	4639      	mov	r1, r7
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 fef0 	bl	8009784 <__any_on>
 80089a4:	4682      	mov	sl, r0
 80089a6:	b1a8      	cbz	r0, 80089d4 <__gethex+0x1f8>
 80089a8:	1e7b      	subs	r3, r7, #1
 80089aa:	1159      	asrs	r1, r3, #5
 80089ac:	f003 021f 	and.w	r2, r3, #31
 80089b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80089b4:	f04f 0a01 	mov.w	sl, #1
 80089b8:	fa0a f202 	lsl.w	r2, sl, r2
 80089bc:	420a      	tst	r2, r1
 80089be:	d009      	beq.n	80089d4 <__gethex+0x1f8>
 80089c0:	4553      	cmp	r3, sl
 80089c2:	dd05      	ble.n	80089d0 <__gethex+0x1f4>
 80089c4:	1eb9      	subs	r1, r7, #2
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 fedc 	bl	8009784 <__any_on>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d145      	bne.n	8008a5c <__gethex+0x280>
 80089d0:	f04f 0a02 	mov.w	sl, #2
 80089d4:	4639      	mov	r1, r7
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7ff fe98 	bl	800870c <rshift>
 80089dc:	443d      	add	r5, r7
 80089de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089e2:	42ab      	cmp	r3, r5
 80089e4:	da4c      	bge.n	8008a80 <__gethex+0x2a4>
 80089e6:	ee18 0a10 	vmov	r0, s16
 80089ea:	4621      	mov	r1, r4
 80089ec:	f000 fa6a 	bl	8008ec4 <_Bfree>
 80089f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089f2:	2300      	movs	r3, #0
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	27a3      	movs	r7, #163	; 0xa3
 80089f8:	e785      	b.n	8008906 <__gethex+0x12a>
 80089fa:	1e73      	subs	r3, r6, #1
 80089fc:	9a05      	ldr	r2, [sp, #20]
 80089fe:	9303      	str	r3, [sp, #12]
 8008a00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d019      	beq.n	8008a3c <__gethex+0x260>
 8008a08:	f1bb 0f20 	cmp.w	fp, #32
 8008a0c:	d107      	bne.n	8008a1e <__gethex+0x242>
 8008a0e:	9b02      	ldr	r3, [sp, #8]
 8008a10:	9a00      	ldr	r2, [sp, #0]
 8008a12:	f843 2b04 	str.w	r2, [r3], #4
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	469b      	mov	fp, r3
 8008a1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a22:	f7ff fec5 	bl	80087b0 <__hexdig_fun>
 8008a26:	9b00      	ldr	r3, [sp, #0]
 8008a28:	f000 000f 	and.w	r0, r0, #15
 8008a2c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a30:	4303      	orrs	r3, r0
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	f10b 0b04 	add.w	fp, fp, #4
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	e00d      	b.n	8008a58 <__gethex+0x27c>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	9a06      	ldr	r2, [sp, #24]
 8008a40:	4413      	add	r3, r2
 8008a42:	42bb      	cmp	r3, r7
 8008a44:	d3e0      	bcc.n	8008a08 <__gethex+0x22c>
 8008a46:	4618      	mov	r0, r3
 8008a48:	9901      	ldr	r1, [sp, #4]
 8008a4a:	9307      	str	r3, [sp, #28]
 8008a4c:	4652      	mov	r2, sl
 8008a4e:	f001 f927 	bl	8009ca0 <strncmp>
 8008a52:	9b07      	ldr	r3, [sp, #28]
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d1d7      	bne.n	8008a08 <__gethex+0x22c>
 8008a58:	461e      	mov	r6, r3
 8008a5a:	e78b      	b.n	8008974 <__gethex+0x198>
 8008a5c:	f04f 0a03 	mov.w	sl, #3
 8008a60:	e7b8      	b.n	80089d4 <__gethex+0x1f8>
 8008a62:	da0a      	bge.n	8008a7a <__gethex+0x29e>
 8008a64:	1a37      	subs	r7, r6, r0
 8008a66:	4621      	mov	r1, r4
 8008a68:	ee18 0a10 	vmov	r0, s16
 8008a6c:	463a      	mov	r2, r7
 8008a6e:	f000 fc45 	bl	80092fc <__lshift>
 8008a72:	1bed      	subs	r5, r5, r7
 8008a74:	4604      	mov	r4, r0
 8008a76:	f100 0914 	add.w	r9, r0, #20
 8008a7a:	f04f 0a00 	mov.w	sl, #0
 8008a7e:	e7ae      	b.n	80089de <__gethex+0x202>
 8008a80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a84:	42a8      	cmp	r0, r5
 8008a86:	dd72      	ble.n	8008b6e <__gethex+0x392>
 8008a88:	1b45      	subs	r5, r0, r5
 8008a8a:	42ae      	cmp	r6, r5
 8008a8c:	dc36      	bgt.n	8008afc <__gethex+0x320>
 8008a8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d02a      	beq.n	8008aec <__gethex+0x310>
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d02c      	beq.n	8008af4 <__gethex+0x318>
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d11c      	bne.n	8008ad8 <__gethex+0x2fc>
 8008a9e:	42ae      	cmp	r6, r5
 8008aa0:	d11a      	bne.n	8008ad8 <__gethex+0x2fc>
 8008aa2:	2e01      	cmp	r6, #1
 8008aa4:	d112      	bne.n	8008acc <__gethex+0x2f0>
 8008aa6:	9a04      	ldr	r2, [sp, #16]
 8008aa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	2301      	movs	r3, #1
 8008ab0:	6123      	str	r3, [r4, #16]
 8008ab2:	f8c9 3000 	str.w	r3, [r9]
 8008ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ab8:	2762      	movs	r7, #98	; 0x62
 8008aba:	601c      	str	r4, [r3, #0]
 8008abc:	e723      	b.n	8008906 <__gethex+0x12a>
 8008abe:	bf00      	nop
 8008ac0:	0800b8e8 	.word	0x0800b8e8
 8008ac4:	0800b870 	.word	0x0800b870
 8008ac8:	0800b881 	.word	0x0800b881
 8008acc:	1e71      	subs	r1, r6, #1
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 fe58 	bl	8009784 <__any_on>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d1e6      	bne.n	8008aa6 <__gethex+0x2ca>
 8008ad8:	ee18 0a10 	vmov	r0, s16
 8008adc:	4621      	mov	r1, r4
 8008ade:	f000 f9f1 	bl	8008ec4 <_Bfree>
 8008ae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	2750      	movs	r7, #80	; 0x50
 8008aea:	e70c      	b.n	8008906 <__gethex+0x12a>
 8008aec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f2      	bne.n	8008ad8 <__gethex+0x2fc>
 8008af2:	e7d8      	b.n	8008aa6 <__gethex+0x2ca>
 8008af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1d5      	bne.n	8008aa6 <__gethex+0x2ca>
 8008afa:	e7ed      	b.n	8008ad8 <__gethex+0x2fc>
 8008afc:	1e6f      	subs	r7, r5, #1
 8008afe:	f1ba 0f00 	cmp.w	sl, #0
 8008b02:	d131      	bne.n	8008b68 <__gethex+0x38c>
 8008b04:	b127      	cbz	r7, 8008b10 <__gethex+0x334>
 8008b06:	4639      	mov	r1, r7
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fe3b 	bl	8009784 <__any_on>
 8008b0e:	4682      	mov	sl, r0
 8008b10:	117b      	asrs	r3, r7, #5
 8008b12:	2101      	movs	r1, #1
 8008b14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b18:	f007 071f 	and.w	r7, r7, #31
 8008b1c:	fa01 f707 	lsl.w	r7, r1, r7
 8008b20:	421f      	tst	r7, r3
 8008b22:	4629      	mov	r1, r5
 8008b24:	4620      	mov	r0, r4
 8008b26:	bf18      	it	ne
 8008b28:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b2c:	1b76      	subs	r6, r6, r5
 8008b2e:	f7ff fded 	bl	800870c <rshift>
 8008b32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b36:	2702      	movs	r7, #2
 8008b38:	f1ba 0f00 	cmp.w	sl, #0
 8008b3c:	d048      	beq.n	8008bd0 <__gethex+0x3f4>
 8008b3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d015      	beq.n	8008b72 <__gethex+0x396>
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d017      	beq.n	8008b7a <__gethex+0x39e>
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d109      	bne.n	8008b62 <__gethex+0x386>
 8008b4e:	f01a 0f02 	tst.w	sl, #2
 8008b52:	d006      	beq.n	8008b62 <__gethex+0x386>
 8008b54:	f8d9 0000 	ldr.w	r0, [r9]
 8008b58:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b5c:	f01a 0f01 	tst.w	sl, #1
 8008b60:	d10e      	bne.n	8008b80 <__gethex+0x3a4>
 8008b62:	f047 0710 	orr.w	r7, r7, #16
 8008b66:	e033      	b.n	8008bd0 <__gethex+0x3f4>
 8008b68:	f04f 0a01 	mov.w	sl, #1
 8008b6c:	e7d0      	b.n	8008b10 <__gethex+0x334>
 8008b6e:	2701      	movs	r7, #1
 8008b70:	e7e2      	b.n	8008b38 <__gethex+0x35c>
 8008b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b74:	f1c3 0301 	rsb	r3, r3, #1
 8008b78:	9315      	str	r3, [sp, #84]	; 0x54
 8008b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0f0      	beq.n	8008b62 <__gethex+0x386>
 8008b80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b84:	f104 0314 	add.w	r3, r4, #20
 8008b88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b90:	f04f 0c00 	mov.w	ip, #0
 8008b94:	4618      	mov	r0, r3
 8008b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b9e:	d01c      	beq.n	8008bda <__gethex+0x3fe>
 8008ba0:	3201      	adds	r2, #1
 8008ba2:	6002      	str	r2, [r0, #0]
 8008ba4:	2f02      	cmp	r7, #2
 8008ba6:	f104 0314 	add.w	r3, r4, #20
 8008baa:	d13f      	bne.n	8008c2c <__gethex+0x450>
 8008bac:	f8d8 2000 	ldr.w	r2, [r8]
 8008bb0:	3a01      	subs	r2, #1
 8008bb2:	42b2      	cmp	r2, r6
 8008bb4:	d10a      	bne.n	8008bcc <__gethex+0x3f0>
 8008bb6:	1171      	asrs	r1, r6, #5
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bbe:	f006 061f 	and.w	r6, r6, #31
 8008bc2:	fa02 f606 	lsl.w	r6, r2, r6
 8008bc6:	421e      	tst	r6, r3
 8008bc8:	bf18      	it	ne
 8008bca:	4617      	movne	r7, r2
 8008bcc:	f047 0720 	orr.w	r7, r7, #32
 8008bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bd2:	601c      	str	r4, [r3, #0]
 8008bd4:	9b04      	ldr	r3, [sp, #16]
 8008bd6:	601d      	str	r5, [r3, #0]
 8008bd8:	e695      	b.n	8008906 <__gethex+0x12a>
 8008bda:	4299      	cmp	r1, r3
 8008bdc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008be0:	d8d8      	bhi.n	8008b94 <__gethex+0x3b8>
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	459b      	cmp	fp, r3
 8008be6:	db19      	blt.n	8008c1c <__gethex+0x440>
 8008be8:	6861      	ldr	r1, [r4, #4]
 8008bea:	ee18 0a10 	vmov	r0, s16
 8008bee:	3101      	adds	r1, #1
 8008bf0:	f000 f928 	bl	8008e44 <_Balloc>
 8008bf4:	4681      	mov	r9, r0
 8008bf6:	b918      	cbnz	r0, 8008c00 <__gethex+0x424>
 8008bf8:	4b1a      	ldr	r3, [pc, #104]	; (8008c64 <__gethex+0x488>)
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	2184      	movs	r1, #132	; 0x84
 8008bfe:	e6a8      	b.n	8008952 <__gethex+0x176>
 8008c00:	6922      	ldr	r2, [r4, #16]
 8008c02:	3202      	adds	r2, #2
 8008c04:	f104 010c 	add.w	r1, r4, #12
 8008c08:	0092      	lsls	r2, r2, #2
 8008c0a:	300c      	adds	r0, #12
 8008c0c:	f000 f90c 	bl	8008e28 <memcpy>
 8008c10:	4621      	mov	r1, r4
 8008c12:	ee18 0a10 	vmov	r0, s16
 8008c16:	f000 f955 	bl	8008ec4 <_Bfree>
 8008c1a:	464c      	mov	r4, r9
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c24:	6122      	str	r2, [r4, #16]
 8008c26:	2201      	movs	r2, #1
 8008c28:	615a      	str	r2, [r3, #20]
 8008c2a:	e7bb      	b.n	8008ba4 <__gethex+0x3c8>
 8008c2c:	6922      	ldr	r2, [r4, #16]
 8008c2e:	455a      	cmp	r2, fp
 8008c30:	dd0b      	ble.n	8008c4a <__gethex+0x46e>
 8008c32:	2101      	movs	r1, #1
 8008c34:	4620      	mov	r0, r4
 8008c36:	f7ff fd69 	bl	800870c <rshift>
 8008c3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c3e:	3501      	adds	r5, #1
 8008c40:	42ab      	cmp	r3, r5
 8008c42:	f6ff aed0 	blt.w	80089e6 <__gethex+0x20a>
 8008c46:	2701      	movs	r7, #1
 8008c48:	e7c0      	b.n	8008bcc <__gethex+0x3f0>
 8008c4a:	f016 061f 	ands.w	r6, r6, #31
 8008c4e:	d0fa      	beq.n	8008c46 <__gethex+0x46a>
 8008c50:	4453      	add	r3, sl
 8008c52:	f1c6 0620 	rsb	r6, r6, #32
 8008c56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c5a:	f000 f9e5 	bl	8009028 <__hi0bits>
 8008c5e:	42b0      	cmp	r0, r6
 8008c60:	dbe7      	blt.n	8008c32 <__gethex+0x456>
 8008c62:	e7f0      	b.n	8008c46 <__gethex+0x46a>
 8008c64:	0800b870 	.word	0x0800b870

08008c68 <L_shift>:
 8008c68:	f1c2 0208 	rsb	r2, r2, #8
 8008c6c:	0092      	lsls	r2, r2, #2
 8008c6e:	b570      	push	{r4, r5, r6, lr}
 8008c70:	f1c2 0620 	rsb	r6, r2, #32
 8008c74:	6843      	ldr	r3, [r0, #4]
 8008c76:	6804      	ldr	r4, [r0, #0]
 8008c78:	fa03 f506 	lsl.w	r5, r3, r6
 8008c7c:	432c      	orrs	r4, r5
 8008c7e:	40d3      	lsrs	r3, r2
 8008c80:	6004      	str	r4, [r0, #0]
 8008c82:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c86:	4288      	cmp	r0, r1
 8008c88:	d3f4      	bcc.n	8008c74 <L_shift+0xc>
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}

08008c8c <__match>:
 8008c8c:	b530      	push	{r4, r5, lr}
 8008c8e:	6803      	ldr	r3, [r0, #0]
 8008c90:	3301      	adds	r3, #1
 8008c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c96:	b914      	cbnz	r4, 8008c9e <__match+0x12>
 8008c98:	6003      	str	r3, [r0, #0]
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	bd30      	pop	{r4, r5, pc}
 8008c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008ca6:	2d19      	cmp	r5, #25
 8008ca8:	bf98      	it	ls
 8008caa:	3220      	addls	r2, #32
 8008cac:	42a2      	cmp	r2, r4
 8008cae:	d0f0      	beq.n	8008c92 <__match+0x6>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	e7f3      	b.n	8008c9c <__match+0x10>

08008cb4 <__hexnan>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	680b      	ldr	r3, [r1, #0]
 8008cba:	115e      	asrs	r6, r3, #5
 8008cbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cc0:	f013 031f 	ands.w	r3, r3, #31
 8008cc4:	b087      	sub	sp, #28
 8008cc6:	bf18      	it	ne
 8008cc8:	3604      	addne	r6, #4
 8008cca:	2500      	movs	r5, #0
 8008ccc:	1f37      	subs	r7, r6, #4
 8008cce:	4690      	mov	r8, r2
 8008cd0:	6802      	ldr	r2, [r0, #0]
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	4682      	mov	sl, r0
 8008cd6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cda:	46b9      	mov	r9, r7
 8008cdc:	463c      	mov	r4, r7
 8008cde:	9502      	str	r5, [sp, #8]
 8008ce0:	46ab      	mov	fp, r5
 8008ce2:	7851      	ldrb	r1, [r2, #1]
 8008ce4:	1c53      	adds	r3, r2, #1
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	b341      	cbz	r1, 8008d3c <__hexnan+0x88>
 8008cea:	4608      	mov	r0, r1
 8008cec:	9205      	str	r2, [sp, #20]
 8008cee:	9104      	str	r1, [sp, #16]
 8008cf0:	f7ff fd5e 	bl	80087b0 <__hexdig_fun>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d14f      	bne.n	8008d98 <__hexnan+0xe4>
 8008cf8:	9904      	ldr	r1, [sp, #16]
 8008cfa:	9a05      	ldr	r2, [sp, #20]
 8008cfc:	2920      	cmp	r1, #32
 8008cfe:	d818      	bhi.n	8008d32 <__hexnan+0x7e>
 8008d00:	9b02      	ldr	r3, [sp, #8]
 8008d02:	459b      	cmp	fp, r3
 8008d04:	dd13      	ble.n	8008d2e <__hexnan+0x7a>
 8008d06:	454c      	cmp	r4, r9
 8008d08:	d206      	bcs.n	8008d18 <__hexnan+0x64>
 8008d0a:	2d07      	cmp	r5, #7
 8008d0c:	dc04      	bgt.n	8008d18 <__hexnan+0x64>
 8008d0e:	462a      	mov	r2, r5
 8008d10:	4649      	mov	r1, r9
 8008d12:	4620      	mov	r0, r4
 8008d14:	f7ff ffa8 	bl	8008c68 <L_shift>
 8008d18:	4544      	cmp	r4, r8
 8008d1a:	d950      	bls.n	8008dbe <__hexnan+0x10a>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f1a4 0904 	sub.w	r9, r4, #4
 8008d22:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d26:	f8cd b008 	str.w	fp, [sp, #8]
 8008d2a:	464c      	mov	r4, r9
 8008d2c:	461d      	mov	r5, r3
 8008d2e:	9a03      	ldr	r2, [sp, #12]
 8008d30:	e7d7      	b.n	8008ce2 <__hexnan+0x2e>
 8008d32:	2929      	cmp	r1, #41	; 0x29
 8008d34:	d156      	bne.n	8008de4 <__hexnan+0x130>
 8008d36:	3202      	adds	r2, #2
 8008d38:	f8ca 2000 	str.w	r2, [sl]
 8008d3c:	f1bb 0f00 	cmp.w	fp, #0
 8008d40:	d050      	beq.n	8008de4 <__hexnan+0x130>
 8008d42:	454c      	cmp	r4, r9
 8008d44:	d206      	bcs.n	8008d54 <__hexnan+0xa0>
 8008d46:	2d07      	cmp	r5, #7
 8008d48:	dc04      	bgt.n	8008d54 <__hexnan+0xa0>
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f7ff ff8a 	bl	8008c68 <L_shift>
 8008d54:	4544      	cmp	r4, r8
 8008d56:	d934      	bls.n	8008dc2 <__hexnan+0x10e>
 8008d58:	f1a8 0204 	sub.w	r2, r8, #4
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d62:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d66:	429f      	cmp	r7, r3
 8008d68:	d2f9      	bcs.n	8008d5e <__hexnan+0xaa>
 8008d6a:	1b3b      	subs	r3, r7, r4
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	3304      	adds	r3, #4
 8008d72:	3401      	adds	r4, #1
 8008d74:	3e03      	subs	r6, #3
 8008d76:	42b4      	cmp	r4, r6
 8008d78:	bf88      	it	hi
 8008d7a:	2304      	movhi	r3, #4
 8008d7c:	4443      	add	r3, r8
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f843 2b04 	str.w	r2, [r3], #4
 8008d84:	429f      	cmp	r7, r3
 8008d86:	d2fb      	bcs.n	8008d80 <__hexnan+0xcc>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	b91b      	cbnz	r3, 8008d94 <__hexnan+0xe0>
 8008d8c:	4547      	cmp	r7, r8
 8008d8e:	d127      	bne.n	8008de0 <__hexnan+0x12c>
 8008d90:	2301      	movs	r3, #1
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	2005      	movs	r0, #5
 8008d96:	e026      	b.n	8008de6 <__hexnan+0x132>
 8008d98:	3501      	adds	r5, #1
 8008d9a:	2d08      	cmp	r5, #8
 8008d9c:	f10b 0b01 	add.w	fp, fp, #1
 8008da0:	dd06      	ble.n	8008db0 <__hexnan+0xfc>
 8008da2:	4544      	cmp	r4, r8
 8008da4:	d9c3      	bls.n	8008d2e <__hexnan+0x7a>
 8008da6:	2300      	movs	r3, #0
 8008da8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dac:	2501      	movs	r5, #1
 8008dae:	3c04      	subs	r4, #4
 8008db0:	6822      	ldr	r2, [r4, #0]
 8008db2:	f000 000f 	and.w	r0, r0, #15
 8008db6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008dba:	6022      	str	r2, [r4, #0]
 8008dbc:	e7b7      	b.n	8008d2e <__hexnan+0x7a>
 8008dbe:	2508      	movs	r5, #8
 8008dc0:	e7b5      	b.n	8008d2e <__hexnan+0x7a>
 8008dc2:	9b01      	ldr	r3, [sp, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0df      	beq.n	8008d88 <__hexnan+0xd4>
 8008dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dcc:	f1c3 0320 	rsb	r3, r3, #32
 8008dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008dd8:	401a      	ands	r2, r3
 8008dda:	f846 2c04 	str.w	r2, [r6, #-4]
 8008dde:	e7d3      	b.n	8008d88 <__hexnan+0xd4>
 8008de0:	3f04      	subs	r7, #4
 8008de2:	e7d1      	b.n	8008d88 <__hexnan+0xd4>
 8008de4:	2004      	movs	r0, #4
 8008de6:	b007      	add	sp, #28
 8008de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dec <_localeconv_r>:
 8008dec:	4800      	ldr	r0, [pc, #0]	; (8008df0 <_localeconv_r+0x4>)
 8008dee:	4770      	bx	lr
 8008df0:	20000188 	.word	0x20000188

08008df4 <malloc>:
 8008df4:	4b02      	ldr	r3, [pc, #8]	; (8008e00 <malloc+0xc>)
 8008df6:	4601      	mov	r1, r0
 8008df8:	6818      	ldr	r0, [r3, #0]
 8008dfa:	f000 bd67 	b.w	80098cc <_malloc_r>
 8008dfe:	bf00      	nop
 8008e00:	20000030 	.word	0x20000030

08008e04 <__ascii_mbtowc>:
 8008e04:	b082      	sub	sp, #8
 8008e06:	b901      	cbnz	r1, 8008e0a <__ascii_mbtowc+0x6>
 8008e08:	a901      	add	r1, sp, #4
 8008e0a:	b142      	cbz	r2, 8008e1e <__ascii_mbtowc+0x1a>
 8008e0c:	b14b      	cbz	r3, 8008e22 <__ascii_mbtowc+0x1e>
 8008e0e:	7813      	ldrb	r3, [r2, #0]
 8008e10:	600b      	str	r3, [r1, #0]
 8008e12:	7812      	ldrb	r2, [r2, #0]
 8008e14:	1e10      	subs	r0, r2, #0
 8008e16:	bf18      	it	ne
 8008e18:	2001      	movne	r0, #1
 8008e1a:	b002      	add	sp, #8
 8008e1c:	4770      	bx	lr
 8008e1e:	4610      	mov	r0, r2
 8008e20:	e7fb      	b.n	8008e1a <__ascii_mbtowc+0x16>
 8008e22:	f06f 0001 	mvn.w	r0, #1
 8008e26:	e7f8      	b.n	8008e1a <__ascii_mbtowc+0x16>

08008e28 <memcpy>:
 8008e28:	440a      	add	r2, r1
 8008e2a:	4291      	cmp	r1, r2
 8008e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e30:	d100      	bne.n	8008e34 <memcpy+0xc>
 8008e32:	4770      	bx	lr
 8008e34:	b510      	push	{r4, lr}
 8008e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e3e:	4291      	cmp	r1, r2
 8008e40:	d1f9      	bne.n	8008e36 <memcpy+0xe>
 8008e42:	bd10      	pop	{r4, pc}

08008e44 <_Balloc>:
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e48:	4604      	mov	r4, r0
 8008e4a:	460d      	mov	r5, r1
 8008e4c:	b976      	cbnz	r6, 8008e6c <_Balloc+0x28>
 8008e4e:	2010      	movs	r0, #16
 8008e50:	f7ff ffd0 	bl	8008df4 <malloc>
 8008e54:	4602      	mov	r2, r0
 8008e56:	6260      	str	r0, [r4, #36]	; 0x24
 8008e58:	b920      	cbnz	r0, 8008e64 <_Balloc+0x20>
 8008e5a:	4b18      	ldr	r3, [pc, #96]	; (8008ebc <_Balloc+0x78>)
 8008e5c:	4818      	ldr	r0, [pc, #96]	; (8008ec0 <_Balloc+0x7c>)
 8008e5e:	2166      	movs	r1, #102	; 0x66
 8008e60:	f000 ff40 	bl	8009ce4 <__assert_func>
 8008e64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e68:	6006      	str	r6, [r0, #0]
 8008e6a:	60c6      	str	r6, [r0, #12]
 8008e6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e6e:	68f3      	ldr	r3, [r6, #12]
 8008e70:	b183      	cbz	r3, 8008e94 <_Balloc+0x50>
 8008e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e7a:	b9b8      	cbnz	r0, 8008eac <_Balloc+0x68>
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	fa01 f605 	lsl.w	r6, r1, r5
 8008e82:	1d72      	adds	r2, r6, #5
 8008e84:	0092      	lsls	r2, r2, #2
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 fc9d 	bl	80097c6 <_calloc_r>
 8008e8c:	b160      	cbz	r0, 8008ea8 <_Balloc+0x64>
 8008e8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e92:	e00e      	b.n	8008eb2 <_Balloc+0x6e>
 8008e94:	2221      	movs	r2, #33	; 0x21
 8008e96:	2104      	movs	r1, #4
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 fc94 	bl	80097c6 <_calloc_r>
 8008e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ea0:	60f0      	str	r0, [r6, #12]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e4      	bne.n	8008e72 <_Balloc+0x2e>
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	6802      	ldr	r2, [r0, #0]
 8008eae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008eb8:	e7f7      	b.n	8008eaa <_Balloc+0x66>
 8008eba:	bf00      	nop
 8008ebc:	0800b7fe 	.word	0x0800b7fe
 8008ec0:	0800b8fc 	.word	0x0800b8fc

08008ec4 <_Bfree>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ec8:	4605      	mov	r5, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	b976      	cbnz	r6, 8008eec <_Bfree+0x28>
 8008ece:	2010      	movs	r0, #16
 8008ed0:	f7ff ff90 	bl	8008df4 <malloc>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	6268      	str	r0, [r5, #36]	; 0x24
 8008ed8:	b920      	cbnz	r0, 8008ee4 <_Bfree+0x20>
 8008eda:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <_Bfree+0x3c>)
 8008edc:	4809      	ldr	r0, [pc, #36]	; (8008f04 <_Bfree+0x40>)
 8008ede:	218a      	movs	r1, #138	; 0x8a
 8008ee0:	f000 ff00 	bl	8009ce4 <__assert_func>
 8008ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ee8:	6006      	str	r6, [r0, #0]
 8008eea:	60c6      	str	r6, [r0, #12]
 8008eec:	b13c      	cbz	r4, 8008efe <_Bfree+0x3a>
 8008eee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ef0:	6862      	ldr	r2, [r4, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ef8:	6021      	str	r1, [r4, #0]
 8008efa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	0800b7fe 	.word	0x0800b7fe
 8008f04:	0800b8fc 	.word	0x0800b8fc

08008f08 <__multadd>:
 8008f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0c:	690d      	ldr	r5, [r1, #16]
 8008f0e:	4607      	mov	r7, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	461e      	mov	r6, r3
 8008f14:	f101 0c14 	add.w	ip, r1, #20
 8008f18:	2000      	movs	r0, #0
 8008f1a:	f8dc 3000 	ldr.w	r3, [ip]
 8008f1e:	b299      	uxth	r1, r3
 8008f20:	fb02 6101 	mla	r1, r2, r1, r6
 8008f24:	0c1e      	lsrs	r6, r3, #16
 8008f26:	0c0b      	lsrs	r3, r1, #16
 8008f28:	fb02 3306 	mla	r3, r2, r6, r3
 8008f2c:	b289      	uxth	r1, r1
 8008f2e:	3001      	adds	r0, #1
 8008f30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f34:	4285      	cmp	r5, r0
 8008f36:	f84c 1b04 	str.w	r1, [ip], #4
 8008f3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f3e:	dcec      	bgt.n	8008f1a <__multadd+0x12>
 8008f40:	b30e      	cbz	r6, 8008f86 <__multadd+0x7e>
 8008f42:	68a3      	ldr	r3, [r4, #8]
 8008f44:	42ab      	cmp	r3, r5
 8008f46:	dc19      	bgt.n	8008f7c <__multadd+0x74>
 8008f48:	6861      	ldr	r1, [r4, #4]
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	3101      	adds	r1, #1
 8008f4e:	f7ff ff79 	bl	8008e44 <_Balloc>
 8008f52:	4680      	mov	r8, r0
 8008f54:	b928      	cbnz	r0, 8008f62 <__multadd+0x5a>
 8008f56:	4602      	mov	r2, r0
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <__multadd+0x84>)
 8008f5a:	480d      	ldr	r0, [pc, #52]	; (8008f90 <__multadd+0x88>)
 8008f5c:	21b5      	movs	r1, #181	; 0xb5
 8008f5e:	f000 fec1 	bl	8009ce4 <__assert_func>
 8008f62:	6922      	ldr	r2, [r4, #16]
 8008f64:	3202      	adds	r2, #2
 8008f66:	f104 010c 	add.w	r1, r4, #12
 8008f6a:	0092      	lsls	r2, r2, #2
 8008f6c:	300c      	adds	r0, #12
 8008f6e:	f7ff ff5b 	bl	8008e28 <memcpy>
 8008f72:	4621      	mov	r1, r4
 8008f74:	4638      	mov	r0, r7
 8008f76:	f7ff ffa5 	bl	8008ec4 <_Bfree>
 8008f7a:	4644      	mov	r4, r8
 8008f7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f80:	3501      	adds	r5, #1
 8008f82:	615e      	str	r6, [r3, #20]
 8008f84:	6125      	str	r5, [r4, #16]
 8008f86:	4620      	mov	r0, r4
 8008f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f8c:	0800b870 	.word	0x0800b870
 8008f90:	0800b8fc 	.word	0x0800b8fc

08008f94 <__s2b>:
 8008f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f98:	460c      	mov	r4, r1
 8008f9a:	4615      	mov	r5, r2
 8008f9c:	461f      	mov	r7, r3
 8008f9e:	2209      	movs	r2, #9
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fa8:	2100      	movs	r1, #0
 8008faa:	2201      	movs	r2, #1
 8008fac:	429a      	cmp	r2, r3
 8008fae:	db09      	blt.n	8008fc4 <__s2b+0x30>
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7ff ff47 	bl	8008e44 <_Balloc>
 8008fb6:	b940      	cbnz	r0, 8008fca <__s2b+0x36>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4b19      	ldr	r3, [pc, #100]	; (8009020 <__s2b+0x8c>)
 8008fbc:	4819      	ldr	r0, [pc, #100]	; (8009024 <__s2b+0x90>)
 8008fbe:	21ce      	movs	r1, #206	; 0xce
 8008fc0:	f000 fe90 	bl	8009ce4 <__assert_func>
 8008fc4:	0052      	lsls	r2, r2, #1
 8008fc6:	3101      	adds	r1, #1
 8008fc8:	e7f0      	b.n	8008fac <__s2b+0x18>
 8008fca:	9b08      	ldr	r3, [sp, #32]
 8008fcc:	6143      	str	r3, [r0, #20]
 8008fce:	2d09      	cmp	r5, #9
 8008fd0:	f04f 0301 	mov.w	r3, #1
 8008fd4:	6103      	str	r3, [r0, #16]
 8008fd6:	dd16      	ble.n	8009006 <__s2b+0x72>
 8008fd8:	f104 0909 	add.w	r9, r4, #9
 8008fdc:	46c8      	mov	r8, r9
 8008fde:	442c      	add	r4, r5
 8008fe0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fe4:	4601      	mov	r1, r0
 8008fe6:	3b30      	subs	r3, #48	; 0x30
 8008fe8:	220a      	movs	r2, #10
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7ff ff8c 	bl	8008f08 <__multadd>
 8008ff0:	45a0      	cmp	r8, r4
 8008ff2:	d1f5      	bne.n	8008fe0 <__s2b+0x4c>
 8008ff4:	f1a5 0408 	sub.w	r4, r5, #8
 8008ff8:	444c      	add	r4, r9
 8008ffa:	1b2d      	subs	r5, r5, r4
 8008ffc:	1963      	adds	r3, r4, r5
 8008ffe:	42bb      	cmp	r3, r7
 8009000:	db04      	blt.n	800900c <__s2b+0x78>
 8009002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009006:	340a      	adds	r4, #10
 8009008:	2509      	movs	r5, #9
 800900a:	e7f6      	b.n	8008ffa <__s2b+0x66>
 800900c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009010:	4601      	mov	r1, r0
 8009012:	3b30      	subs	r3, #48	; 0x30
 8009014:	220a      	movs	r2, #10
 8009016:	4630      	mov	r0, r6
 8009018:	f7ff ff76 	bl	8008f08 <__multadd>
 800901c:	e7ee      	b.n	8008ffc <__s2b+0x68>
 800901e:	bf00      	nop
 8009020:	0800b870 	.word	0x0800b870
 8009024:	0800b8fc 	.word	0x0800b8fc

08009028 <__hi0bits>:
 8009028:	0c03      	lsrs	r3, r0, #16
 800902a:	041b      	lsls	r3, r3, #16
 800902c:	b9d3      	cbnz	r3, 8009064 <__hi0bits+0x3c>
 800902e:	0400      	lsls	r0, r0, #16
 8009030:	2310      	movs	r3, #16
 8009032:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009036:	bf04      	itt	eq
 8009038:	0200      	lsleq	r0, r0, #8
 800903a:	3308      	addeq	r3, #8
 800903c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009040:	bf04      	itt	eq
 8009042:	0100      	lsleq	r0, r0, #4
 8009044:	3304      	addeq	r3, #4
 8009046:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800904a:	bf04      	itt	eq
 800904c:	0080      	lsleq	r0, r0, #2
 800904e:	3302      	addeq	r3, #2
 8009050:	2800      	cmp	r0, #0
 8009052:	db05      	blt.n	8009060 <__hi0bits+0x38>
 8009054:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009058:	f103 0301 	add.w	r3, r3, #1
 800905c:	bf08      	it	eq
 800905e:	2320      	moveq	r3, #32
 8009060:	4618      	mov	r0, r3
 8009062:	4770      	bx	lr
 8009064:	2300      	movs	r3, #0
 8009066:	e7e4      	b.n	8009032 <__hi0bits+0xa>

08009068 <__lo0bits>:
 8009068:	6803      	ldr	r3, [r0, #0]
 800906a:	f013 0207 	ands.w	r2, r3, #7
 800906e:	4601      	mov	r1, r0
 8009070:	d00b      	beq.n	800908a <__lo0bits+0x22>
 8009072:	07da      	lsls	r2, r3, #31
 8009074:	d423      	bmi.n	80090be <__lo0bits+0x56>
 8009076:	0798      	lsls	r0, r3, #30
 8009078:	bf49      	itett	mi
 800907a:	085b      	lsrmi	r3, r3, #1
 800907c:	089b      	lsrpl	r3, r3, #2
 800907e:	2001      	movmi	r0, #1
 8009080:	600b      	strmi	r3, [r1, #0]
 8009082:	bf5c      	itt	pl
 8009084:	600b      	strpl	r3, [r1, #0]
 8009086:	2002      	movpl	r0, #2
 8009088:	4770      	bx	lr
 800908a:	b298      	uxth	r0, r3
 800908c:	b9a8      	cbnz	r0, 80090ba <__lo0bits+0x52>
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	2010      	movs	r0, #16
 8009092:	b2da      	uxtb	r2, r3
 8009094:	b90a      	cbnz	r2, 800909a <__lo0bits+0x32>
 8009096:	3008      	adds	r0, #8
 8009098:	0a1b      	lsrs	r3, r3, #8
 800909a:	071a      	lsls	r2, r3, #28
 800909c:	bf04      	itt	eq
 800909e:	091b      	lsreq	r3, r3, #4
 80090a0:	3004      	addeq	r0, #4
 80090a2:	079a      	lsls	r2, r3, #30
 80090a4:	bf04      	itt	eq
 80090a6:	089b      	lsreq	r3, r3, #2
 80090a8:	3002      	addeq	r0, #2
 80090aa:	07da      	lsls	r2, r3, #31
 80090ac:	d403      	bmi.n	80090b6 <__lo0bits+0x4e>
 80090ae:	085b      	lsrs	r3, r3, #1
 80090b0:	f100 0001 	add.w	r0, r0, #1
 80090b4:	d005      	beq.n	80090c2 <__lo0bits+0x5a>
 80090b6:	600b      	str	r3, [r1, #0]
 80090b8:	4770      	bx	lr
 80090ba:	4610      	mov	r0, r2
 80090bc:	e7e9      	b.n	8009092 <__lo0bits+0x2a>
 80090be:	2000      	movs	r0, #0
 80090c0:	4770      	bx	lr
 80090c2:	2020      	movs	r0, #32
 80090c4:	4770      	bx	lr
	...

080090c8 <__i2b>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	460c      	mov	r4, r1
 80090cc:	2101      	movs	r1, #1
 80090ce:	f7ff feb9 	bl	8008e44 <_Balloc>
 80090d2:	4602      	mov	r2, r0
 80090d4:	b928      	cbnz	r0, 80090e2 <__i2b+0x1a>
 80090d6:	4b05      	ldr	r3, [pc, #20]	; (80090ec <__i2b+0x24>)
 80090d8:	4805      	ldr	r0, [pc, #20]	; (80090f0 <__i2b+0x28>)
 80090da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090de:	f000 fe01 	bl	8009ce4 <__assert_func>
 80090e2:	2301      	movs	r3, #1
 80090e4:	6144      	str	r4, [r0, #20]
 80090e6:	6103      	str	r3, [r0, #16]
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	bf00      	nop
 80090ec:	0800b870 	.word	0x0800b870
 80090f0:	0800b8fc 	.word	0x0800b8fc

080090f4 <__multiply>:
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	4691      	mov	r9, r2
 80090fa:	690a      	ldr	r2, [r1, #16]
 80090fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009100:	429a      	cmp	r2, r3
 8009102:	bfb8      	it	lt
 8009104:	460b      	movlt	r3, r1
 8009106:	460c      	mov	r4, r1
 8009108:	bfbc      	itt	lt
 800910a:	464c      	movlt	r4, r9
 800910c:	4699      	movlt	r9, r3
 800910e:	6927      	ldr	r7, [r4, #16]
 8009110:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009114:	68a3      	ldr	r3, [r4, #8]
 8009116:	6861      	ldr	r1, [r4, #4]
 8009118:	eb07 060a 	add.w	r6, r7, sl
 800911c:	42b3      	cmp	r3, r6
 800911e:	b085      	sub	sp, #20
 8009120:	bfb8      	it	lt
 8009122:	3101      	addlt	r1, #1
 8009124:	f7ff fe8e 	bl	8008e44 <_Balloc>
 8009128:	b930      	cbnz	r0, 8009138 <__multiply+0x44>
 800912a:	4602      	mov	r2, r0
 800912c:	4b44      	ldr	r3, [pc, #272]	; (8009240 <__multiply+0x14c>)
 800912e:	4845      	ldr	r0, [pc, #276]	; (8009244 <__multiply+0x150>)
 8009130:	f240 115d 	movw	r1, #349	; 0x15d
 8009134:	f000 fdd6 	bl	8009ce4 <__assert_func>
 8009138:	f100 0514 	add.w	r5, r0, #20
 800913c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009140:	462b      	mov	r3, r5
 8009142:	2200      	movs	r2, #0
 8009144:	4543      	cmp	r3, r8
 8009146:	d321      	bcc.n	800918c <__multiply+0x98>
 8009148:	f104 0314 	add.w	r3, r4, #20
 800914c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009150:	f109 0314 	add.w	r3, r9, #20
 8009154:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009158:	9202      	str	r2, [sp, #8]
 800915a:	1b3a      	subs	r2, r7, r4
 800915c:	3a15      	subs	r2, #21
 800915e:	f022 0203 	bic.w	r2, r2, #3
 8009162:	3204      	adds	r2, #4
 8009164:	f104 0115 	add.w	r1, r4, #21
 8009168:	428f      	cmp	r7, r1
 800916a:	bf38      	it	cc
 800916c:	2204      	movcc	r2, #4
 800916e:	9201      	str	r2, [sp, #4]
 8009170:	9a02      	ldr	r2, [sp, #8]
 8009172:	9303      	str	r3, [sp, #12]
 8009174:	429a      	cmp	r2, r3
 8009176:	d80c      	bhi.n	8009192 <__multiply+0x9e>
 8009178:	2e00      	cmp	r6, #0
 800917a:	dd03      	ble.n	8009184 <__multiply+0x90>
 800917c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009180:	2b00      	cmp	r3, #0
 8009182:	d05a      	beq.n	800923a <__multiply+0x146>
 8009184:	6106      	str	r6, [r0, #16]
 8009186:	b005      	add	sp, #20
 8009188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918c:	f843 2b04 	str.w	r2, [r3], #4
 8009190:	e7d8      	b.n	8009144 <__multiply+0x50>
 8009192:	f8b3 a000 	ldrh.w	sl, [r3]
 8009196:	f1ba 0f00 	cmp.w	sl, #0
 800919a:	d024      	beq.n	80091e6 <__multiply+0xf2>
 800919c:	f104 0e14 	add.w	lr, r4, #20
 80091a0:	46a9      	mov	r9, r5
 80091a2:	f04f 0c00 	mov.w	ip, #0
 80091a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091aa:	f8d9 1000 	ldr.w	r1, [r9]
 80091ae:	fa1f fb82 	uxth.w	fp, r2
 80091b2:	b289      	uxth	r1, r1
 80091b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80091b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091bc:	f8d9 2000 	ldr.w	r2, [r9]
 80091c0:	4461      	add	r1, ip
 80091c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80091ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091ce:	b289      	uxth	r1, r1
 80091d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091d4:	4577      	cmp	r7, lr
 80091d6:	f849 1b04 	str.w	r1, [r9], #4
 80091da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091de:	d8e2      	bhi.n	80091a6 <__multiply+0xb2>
 80091e0:	9a01      	ldr	r2, [sp, #4]
 80091e2:	f845 c002 	str.w	ip, [r5, r2]
 80091e6:	9a03      	ldr	r2, [sp, #12]
 80091e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091ec:	3304      	adds	r3, #4
 80091ee:	f1b9 0f00 	cmp.w	r9, #0
 80091f2:	d020      	beq.n	8009236 <__multiply+0x142>
 80091f4:	6829      	ldr	r1, [r5, #0]
 80091f6:	f104 0c14 	add.w	ip, r4, #20
 80091fa:	46ae      	mov	lr, r5
 80091fc:	f04f 0a00 	mov.w	sl, #0
 8009200:	f8bc b000 	ldrh.w	fp, [ip]
 8009204:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009208:	fb09 220b 	mla	r2, r9, fp, r2
 800920c:	4492      	add	sl, r2
 800920e:	b289      	uxth	r1, r1
 8009210:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009214:	f84e 1b04 	str.w	r1, [lr], #4
 8009218:	f85c 2b04 	ldr.w	r2, [ip], #4
 800921c:	f8be 1000 	ldrh.w	r1, [lr]
 8009220:	0c12      	lsrs	r2, r2, #16
 8009222:	fb09 1102 	mla	r1, r9, r2, r1
 8009226:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800922a:	4567      	cmp	r7, ip
 800922c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009230:	d8e6      	bhi.n	8009200 <__multiply+0x10c>
 8009232:	9a01      	ldr	r2, [sp, #4]
 8009234:	50a9      	str	r1, [r5, r2]
 8009236:	3504      	adds	r5, #4
 8009238:	e79a      	b.n	8009170 <__multiply+0x7c>
 800923a:	3e01      	subs	r6, #1
 800923c:	e79c      	b.n	8009178 <__multiply+0x84>
 800923e:	bf00      	nop
 8009240:	0800b870 	.word	0x0800b870
 8009244:	0800b8fc 	.word	0x0800b8fc

08009248 <__pow5mult>:
 8009248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800924c:	4615      	mov	r5, r2
 800924e:	f012 0203 	ands.w	r2, r2, #3
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	d007      	beq.n	8009268 <__pow5mult+0x20>
 8009258:	4c25      	ldr	r4, [pc, #148]	; (80092f0 <__pow5mult+0xa8>)
 800925a:	3a01      	subs	r2, #1
 800925c:	2300      	movs	r3, #0
 800925e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009262:	f7ff fe51 	bl	8008f08 <__multadd>
 8009266:	4607      	mov	r7, r0
 8009268:	10ad      	asrs	r5, r5, #2
 800926a:	d03d      	beq.n	80092e8 <__pow5mult+0xa0>
 800926c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800926e:	b97c      	cbnz	r4, 8009290 <__pow5mult+0x48>
 8009270:	2010      	movs	r0, #16
 8009272:	f7ff fdbf 	bl	8008df4 <malloc>
 8009276:	4602      	mov	r2, r0
 8009278:	6270      	str	r0, [r6, #36]	; 0x24
 800927a:	b928      	cbnz	r0, 8009288 <__pow5mult+0x40>
 800927c:	4b1d      	ldr	r3, [pc, #116]	; (80092f4 <__pow5mult+0xac>)
 800927e:	481e      	ldr	r0, [pc, #120]	; (80092f8 <__pow5mult+0xb0>)
 8009280:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009284:	f000 fd2e 	bl	8009ce4 <__assert_func>
 8009288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800928c:	6004      	str	r4, [r0, #0]
 800928e:	60c4      	str	r4, [r0, #12]
 8009290:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009298:	b94c      	cbnz	r4, 80092ae <__pow5mult+0x66>
 800929a:	f240 2171 	movw	r1, #625	; 0x271
 800929e:	4630      	mov	r0, r6
 80092a0:	f7ff ff12 	bl	80090c8 <__i2b>
 80092a4:	2300      	movs	r3, #0
 80092a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092aa:	4604      	mov	r4, r0
 80092ac:	6003      	str	r3, [r0, #0]
 80092ae:	f04f 0900 	mov.w	r9, #0
 80092b2:	07eb      	lsls	r3, r5, #31
 80092b4:	d50a      	bpl.n	80092cc <__pow5mult+0x84>
 80092b6:	4639      	mov	r1, r7
 80092b8:	4622      	mov	r2, r4
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7ff ff1a 	bl	80090f4 <__multiply>
 80092c0:	4639      	mov	r1, r7
 80092c2:	4680      	mov	r8, r0
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff fdfd 	bl	8008ec4 <_Bfree>
 80092ca:	4647      	mov	r7, r8
 80092cc:	106d      	asrs	r5, r5, #1
 80092ce:	d00b      	beq.n	80092e8 <__pow5mult+0xa0>
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	b938      	cbnz	r0, 80092e4 <__pow5mult+0x9c>
 80092d4:	4622      	mov	r2, r4
 80092d6:	4621      	mov	r1, r4
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff ff0b 	bl	80090f4 <__multiply>
 80092de:	6020      	str	r0, [r4, #0]
 80092e0:	f8c0 9000 	str.w	r9, [r0]
 80092e4:	4604      	mov	r4, r0
 80092e6:	e7e4      	b.n	80092b2 <__pow5mult+0x6a>
 80092e8:	4638      	mov	r0, r7
 80092ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ee:	bf00      	nop
 80092f0:	0800ba48 	.word	0x0800ba48
 80092f4:	0800b7fe 	.word	0x0800b7fe
 80092f8:	0800b8fc 	.word	0x0800b8fc

080092fc <__lshift>:
 80092fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009300:	460c      	mov	r4, r1
 8009302:	6849      	ldr	r1, [r1, #4]
 8009304:	6923      	ldr	r3, [r4, #16]
 8009306:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	4607      	mov	r7, r0
 800930e:	4691      	mov	r9, r2
 8009310:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009314:	f108 0601 	add.w	r6, r8, #1
 8009318:	42b3      	cmp	r3, r6
 800931a:	db0b      	blt.n	8009334 <__lshift+0x38>
 800931c:	4638      	mov	r0, r7
 800931e:	f7ff fd91 	bl	8008e44 <_Balloc>
 8009322:	4605      	mov	r5, r0
 8009324:	b948      	cbnz	r0, 800933a <__lshift+0x3e>
 8009326:	4602      	mov	r2, r0
 8009328:	4b2a      	ldr	r3, [pc, #168]	; (80093d4 <__lshift+0xd8>)
 800932a:	482b      	ldr	r0, [pc, #172]	; (80093d8 <__lshift+0xdc>)
 800932c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009330:	f000 fcd8 	bl	8009ce4 <__assert_func>
 8009334:	3101      	adds	r1, #1
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	e7ee      	b.n	8009318 <__lshift+0x1c>
 800933a:	2300      	movs	r3, #0
 800933c:	f100 0114 	add.w	r1, r0, #20
 8009340:	f100 0210 	add.w	r2, r0, #16
 8009344:	4618      	mov	r0, r3
 8009346:	4553      	cmp	r3, sl
 8009348:	db37      	blt.n	80093ba <__lshift+0xbe>
 800934a:	6920      	ldr	r0, [r4, #16]
 800934c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009350:	f104 0314 	add.w	r3, r4, #20
 8009354:	f019 091f 	ands.w	r9, r9, #31
 8009358:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800935c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009360:	d02f      	beq.n	80093c2 <__lshift+0xc6>
 8009362:	f1c9 0e20 	rsb	lr, r9, #32
 8009366:	468a      	mov	sl, r1
 8009368:	f04f 0c00 	mov.w	ip, #0
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	fa02 f209 	lsl.w	r2, r2, r9
 8009372:	ea42 020c 	orr.w	r2, r2, ip
 8009376:	f84a 2b04 	str.w	r2, [sl], #4
 800937a:	f853 2b04 	ldr.w	r2, [r3], #4
 800937e:	4298      	cmp	r0, r3
 8009380:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009384:	d8f2      	bhi.n	800936c <__lshift+0x70>
 8009386:	1b03      	subs	r3, r0, r4
 8009388:	3b15      	subs	r3, #21
 800938a:	f023 0303 	bic.w	r3, r3, #3
 800938e:	3304      	adds	r3, #4
 8009390:	f104 0215 	add.w	r2, r4, #21
 8009394:	4290      	cmp	r0, r2
 8009396:	bf38      	it	cc
 8009398:	2304      	movcc	r3, #4
 800939a:	f841 c003 	str.w	ip, [r1, r3]
 800939e:	f1bc 0f00 	cmp.w	ip, #0
 80093a2:	d001      	beq.n	80093a8 <__lshift+0xac>
 80093a4:	f108 0602 	add.w	r6, r8, #2
 80093a8:	3e01      	subs	r6, #1
 80093aa:	4638      	mov	r0, r7
 80093ac:	612e      	str	r6, [r5, #16]
 80093ae:	4621      	mov	r1, r4
 80093b0:	f7ff fd88 	bl	8008ec4 <_Bfree>
 80093b4:	4628      	mov	r0, r5
 80093b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80093be:	3301      	adds	r3, #1
 80093c0:	e7c1      	b.n	8009346 <__lshift+0x4a>
 80093c2:	3904      	subs	r1, #4
 80093c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80093cc:	4298      	cmp	r0, r3
 80093ce:	d8f9      	bhi.n	80093c4 <__lshift+0xc8>
 80093d0:	e7ea      	b.n	80093a8 <__lshift+0xac>
 80093d2:	bf00      	nop
 80093d4:	0800b870 	.word	0x0800b870
 80093d8:	0800b8fc 	.word	0x0800b8fc

080093dc <__mcmp>:
 80093dc:	b530      	push	{r4, r5, lr}
 80093de:	6902      	ldr	r2, [r0, #16]
 80093e0:	690c      	ldr	r4, [r1, #16]
 80093e2:	1b12      	subs	r2, r2, r4
 80093e4:	d10e      	bne.n	8009404 <__mcmp+0x28>
 80093e6:	f100 0314 	add.w	r3, r0, #20
 80093ea:	3114      	adds	r1, #20
 80093ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093fc:	42a5      	cmp	r5, r4
 80093fe:	d003      	beq.n	8009408 <__mcmp+0x2c>
 8009400:	d305      	bcc.n	800940e <__mcmp+0x32>
 8009402:	2201      	movs	r2, #1
 8009404:	4610      	mov	r0, r2
 8009406:	bd30      	pop	{r4, r5, pc}
 8009408:	4283      	cmp	r3, r0
 800940a:	d3f3      	bcc.n	80093f4 <__mcmp+0x18>
 800940c:	e7fa      	b.n	8009404 <__mcmp+0x28>
 800940e:	f04f 32ff 	mov.w	r2, #4294967295
 8009412:	e7f7      	b.n	8009404 <__mcmp+0x28>

08009414 <__mdiff>:
 8009414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	460c      	mov	r4, r1
 800941a:	4606      	mov	r6, r0
 800941c:	4611      	mov	r1, r2
 800941e:	4620      	mov	r0, r4
 8009420:	4690      	mov	r8, r2
 8009422:	f7ff ffdb 	bl	80093dc <__mcmp>
 8009426:	1e05      	subs	r5, r0, #0
 8009428:	d110      	bne.n	800944c <__mdiff+0x38>
 800942a:	4629      	mov	r1, r5
 800942c:	4630      	mov	r0, r6
 800942e:	f7ff fd09 	bl	8008e44 <_Balloc>
 8009432:	b930      	cbnz	r0, 8009442 <__mdiff+0x2e>
 8009434:	4b3a      	ldr	r3, [pc, #232]	; (8009520 <__mdiff+0x10c>)
 8009436:	4602      	mov	r2, r0
 8009438:	f240 2132 	movw	r1, #562	; 0x232
 800943c:	4839      	ldr	r0, [pc, #228]	; (8009524 <__mdiff+0x110>)
 800943e:	f000 fc51 	bl	8009ce4 <__assert_func>
 8009442:	2301      	movs	r3, #1
 8009444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944c:	bfa4      	itt	ge
 800944e:	4643      	movge	r3, r8
 8009450:	46a0      	movge	r8, r4
 8009452:	4630      	mov	r0, r6
 8009454:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009458:	bfa6      	itte	ge
 800945a:	461c      	movge	r4, r3
 800945c:	2500      	movge	r5, #0
 800945e:	2501      	movlt	r5, #1
 8009460:	f7ff fcf0 	bl	8008e44 <_Balloc>
 8009464:	b920      	cbnz	r0, 8009470 <__mdiff+0x5c>
 8009466:	4b2e      	ldr	r3, [pc, #184]	; (8009520 <__mdiff+0x10c>)
 8009468:	4602      	mov	r2, r0
 800946a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800946e:	e7e5      	b.n	800943c <__mdiff+0x28>
 8009470:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009474:	6926      	ldr	r6, [r4, #16]
 8009476:	60c5      	str	r5, [r0, #12]
 8009478:	f104 0914 	add.w	r9, r4, #20
 800947c:	f108 0514 	add.w	r5, r8, #20
 8009480:	f100 0e14 	add.w	lr, r0, #20
 8009484:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009488:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800948c:	f108 0210 	add.w	r2, r8, #16
 8009490:	46f2      	mov	sl, lr
 8009492:	2100      	movs	r1, #0
 8009494:	f859 3b04 	ldr.w	r3, [r9], #4
 8009498:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800949c:	fa1f f883 	uxth.w	r8, r3
 80094a0:	fa11 f18b 	uxtah	r1, r1, fp
 80094a4:	0c1b      	lsrs	r3, r3, #16
 80094a6:	eba1 0808 	sub.w	r8, r1, r8
 80094aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094b2:	fa1f f888 	uxth.w	r8, r8
 80094b6:	1419      	asrs	r1, r3, #16
 80094b8:	454e      	cmp	r6, r9
 80094ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094be:	f84a 3b04 	str.w	r3, [sl], #4
 80094c2:	d8e7      	bhi.n	8009494 <__mdiff+0x80>
 80094c4:	1b33      	subs	r3, r6, r4
 80094c6:	3b15      	subs	r3, #21
 80094c8:	f023 0303 	bic.w	r3, r3, #3
 80094cc:	3304      	adds	r3, #4
 80094ce:	3415      	adds	r4, #21
 80094d0:	42a6      	cmp	r6, r4
 80094d2:	bf38      	it	cc
 80094d4:	2304      	movcc	r3, #4
 80094d6:	441d      	add	r5, r3
 80094d8:	4473      	add	r3, lr
 80094da:	469e      	mov	lr, r3
 80094dc:	462e      	mov	r6, r5
 80094de:	4566      	cmp	r6, ip
 80094e0:	d30e      	bcc.n	8009500 <__mdiff+0xec>
 80094e2:	f10c 0203 	add.w	r2, ip, #3
 80094e6:	1b52      	subs	r2, r2, r5
 80094e8:	f022 0203 	bic.w	r2, r2, #3
 80094ec:	3d03      	subs	r5, #3
 80094ee:	45ac      	cmp	ip, r5
 80094f0:	bf38      	it	cc
 80094f2:	2200      	movcc	r2, #0
 80094f4:	441a      	add	r2, r3
 80094f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094fa:	b17b      	cbz	r3, 800951c <__mdiff+0x108>
 80094fc:	6107      	str	r7, [r0, #16]
 80094fe:	e7a3      	b.n	8009448 <__mdiff+0x34>
 8009500:	f856 8b04 	ldr.w	r8, [r6], #4
 8009504:	fa11 f288 	uxtah	r2, r1, r8
 8009508:	1414      	asrs	r4, r2, #16
 800950a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800950e:	b292      	uxth	r2, r2
 8009510:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009514:	f84e 2b04 	str.w	r2, [lr], #4
 8009518:	1421      	asrs	r1, r4, #16
 800951a:	e7e0      	b.n	80094de <__mdiff+0xca>
 800951c:	3f01      	subs	r7, #1
 800951e:	e7ea      	b.n	80094f6 <__mdiff+0xe2>
 8009520:	0800b870 	.word	0x0800b870
 8009524:	0800b8fc 	.word	0x0800b8fc

08009528 <__ulp>:
 8009528:	b082      	sub	sp, #8
 800952a:	ed8d 0b00 	vstr	d0, [sp]
 800952e:	9b01      	ldr	r3, [sp, #4]
 8009530:	4912      	ldr	r1, [pc, #72]	; (800957c <__ulp+0x54>)
 8009532:	4019      	ands	r1, r3
 8009534:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009538:	2900      	cmp	r1, #0
 800953a:	dd05      	ble.n	8009548 <__ulp+0x20>
 800953c:	2200      	movs	r2, #0
 800953e:	460b      	mov	r3, r1
 8009540:	ec43 2b10 	vmov	d0, r2, r3
 8009544:	b002      	add	sp, #8
 8009546:	4770      	bx	lr
 8009548:	4249      	negs	r1, r1
 800954a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800954e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009552:	f04f 0200 	mov.w	r2, #0
 8009556:	f04f 0300 	mov.w	r3, #0
 800955a:	da04      	bge.n	8009566 <__ulp+0x3e>
 800955c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009560:	fa41 f300 	asr.w	r3, r1, r0
 8009564:	e7ec      	b.n	8009540 <__ulp+0x18>
 8009566:	f1a0 0114 	sub.w	r1, r0, #20
 800956a:	291e      	cmp	r1, #30
 800956c:	bfda      	itte	le
 800956e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009572:	fa20 f101 	lsrle.w	r1, r0, r1
 8009576:	2101      	movgt	r1, #1
 8009578:	460a      	mov	r2, r1
 800957a:	e7e1      	b.n	8009540 <__ulp+0x18>
 800957c:	7ff00000 	.word	0x7ff00000

08009580 <__b2d>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	6905      	ldr	r5, [r0, #16]
 8009584:	f100 0714 	add.w	r7, r0, #20
 8009588:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800958c:	1f2e      	subs	r6, r5, #4
 800958e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009592:	4620      	mov	r0, r4
 8009594:	f7ff fd48 	bl	8009028 <__hi0bits>
 8009598:	f1c0 0320 	rsb	r3, r0, #32
 800959c:	280a      	cmp	r0, #10
 800959e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800961c <__b2d+0x9c>
 80095a2:	600b      	str	r3, [r1, #0]
 80095a4:	dc14      	bgt.n	80095d0 <__b2d+0x50>
 80095a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80095aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80095ae:	42b7      	cmp	r7, r6
 80095b0:	ea41 030c 	orr.w	r3, r1, ip
 80095b4:	bf34      	ite	cc
 80095b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095ba:	2100      	movcs	r1, #0
 80095bc:	3015      	adds	r0, #21
 80095be:	fa04 f000 	lsl.w	r0, r4, r0
 80095c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80095c6:	ea40 0201 	orr.w	r2, r0, r1
 80095ca:	ec43 2b10 	vmov	d0, r2, r3
 80095ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d0:	42b7      	cmp	r7, r6
 80095d2:	bf3a      	itte	cc
 80095d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80095dc:	2100      	movcs	r1, #0
 80095de:	380b      	subs	r0, #11
 80095e0:	d017      	beq.n	8009612 <__b2d+0x92>
 80095e2:	f1c0 0c20 	rsb	ip, r0, #32
 80095e6:	fa04 f500 	lsl.w	r5, r4, r0
 80095ea:	42be      	cmp	r6, r7
 80095ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80095f0:	ea45 0504 	orr.w	r5, r5, r4
 80095f4:	bf8c      	ite	hi
 80095f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80095fa:	2400      	movls	r4, #0
 80095fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009600:	fa01 f000 	lsl.w	r0, r1, r0
 8009604:	fa24 f40c 	lsr.w	r4, r4, ip
 8009608:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800960c:	ea40 0204 	orr.w	r2, r0, r4
 8009610:	e7db      	b.n	80095ca <__b2d+0x4a>
 8009612:	ea44 030c 	orr.w	r3, r4, ip
 8009616:	460a      	mov	r2, r1
 8009618:	e7d7      	b.n	80095ca <__b2d+0x4a>
 800961a:	bf00      	nop
 800961c:	3ff00000 	.word	0x3ff00000

08009620 <__d2b>:
 8009620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009624:	4689      	mov	r9, r1
 8009626:	2101      	movs	r1, #1
 8009628:	ec57 6b10 	vmov	r6, r7, d0
 800962c:	4690      	mov	r8, r2
 800962e:	f7ff fc09 	bl	8008e44 <_Balloc>
 8009632:	4604      	mov	r4, r0
 8009634:	b930      	cbnz	r0, 8009644 <__d2b+0x24>
 8009636:	4602      	mov	r2, r0
 8009638:	4b25      	ldr	r3, [pc, #148]	; (80096d0 <__d2b+0xb0>)
 800963a:	4826      	ldr	r0, [pc, #152]	; (80096d4 <__d2b+0xb4>)
 800963c:	f240 310a 	movw	r1, #778	; 0x30a
 8009640:	f000 fb50 	bl	8009ce4 <__assert_func>
 8009644:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800964c:	bb35      	cbnz	r5, 800969c <__d2b+0x7c>
 800964e:	2e00      	cmp	r6, #0
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	d028      	beq.n	80096a6 <__d2b+0x86>
 8009654:	4668      	mov	r0, sp
 8009656:	9600      	str	r6, [sp, #0]
 8009658:	f7ff fd06 	bl	8009068 <__lo0bits>
 800965c:	9900      	ldr	r1, [sp, #0]
 800965e:	b300      	cbz	r0, 80096a2 <__d2b+0x82>
 8009660:	9a01      	ldr	r2, [sp, #4]
 8009662:	f1c0 0320 	rsb	r3, r0, #32
 8009666:	fa02 f303 	lsl.w	r3, r2, r3
 800966a:	430b      	orrs	r3, r1
 800966c:	40c2      	lsrs	r2, r0
 800966e:	6163      	str	r3, [r4, #20]
 8009670:	9201      	str	r2, [sp, #4]
 8009672:	9b01      	ldr	r3, [sp, #4]
 8009674:	61a3      	str	r3, [r4, #24]
 8009676:	2b00      	cmp	r3, #0
 8009678:	bf14      	ite	ne
 800967a:	2202      	movne	r2, #2
 800967c:	2201      	moveq	r2, #1
 800967e:	6122      	str	r2, [r4, #16]
 8009680:	b1d5      	cbz	r5, 80096b8 <__d2b+0x98>
 8009682:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009686:	4405      	add	r5, r0
 8009688:	f8c9 5000 	str.w	r5, [r9]
 800968c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009690:	f8c8 0000 	str.w	r0, [r8]
 8009694:	4620      	mov	r0, r4
 8009696:	b003      	add	sp, #12
 8009698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800969c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096a0:	e7d5      	b.n	800964e <__d2b+0x2e>
 80096a2:	6161      	str	r1, [r4, #20]
 80096a4:	e7e5      	b.n	8009672 <__d2b+0x52>
 80096a6:	a801      	add	r0, sp, #4
 80096a8:	f7ff fcde 	bl	8009068 <__lo0bits>
 80096ac:	9b01      	ldr	r3, [sp, #4]
 80096ae:	6163      	str	r3, [r4, #20]
 80096b0:	2201      	movs	r2, #1
 80096b2:	6122      	str	r2, [r4, #16]
 80096b4:	3020      	adds	r0, #32
 80096b6:	e7e3      	b.n	8009680 <__d2b+0x60>
 80096b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096c0:	f8c9 0000 	str.w	r0, [r9]
 80096c4:	6918      	ldr	r0, [r3, #16]
 80096c6:	f7ff fcaf 	bl	8009028 <__hi0bits>
 80096ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096ce:	e7df      	b.n	8009690 <__d2b+0x70>
 80096d0:	0800b870 	.word	0x0800b870
 80096d4:	0800b8fc 	.word	0x0800b8fc

080096d8 <__ratio>:
 80096d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	4688      	mov	r8, r1
 80096de:	4669      	mov	r1, sp
 80096e0:	4681      	mov	r9, r0
 80096e2:	f7ff ff4d 	bl	8009580 <__b2d>
 80096e6:	a901      	add	r1, sp, #4
 80096e8:	4640      	mov	r0, r8
 80096ea:	ec55 4b10 	vmov	r4, r5, d0
 80096ee:	f7ff ff47 	bl	8009580 <__b2d>
 80096f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80096fa:	eba3 0c02 	sub.w	ip, r3, r2
 80096fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009708:	ec51 0b10 	vmov	r0, r1, d0
 800970c:	2b00      	cmp	r3, #0
 800970e:	bfd6      	itet	le
 8009710:	460a      	movle	r2, r1
 8009712:	462a      	movgt	r2, r5
 8009714:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009718:	468b      	mov	fp, r1
 800971a:	462f      	mov	r7, r5
 800971c:	bfd4      	ite	le
 800971e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009722:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009726:	4620      	mov	r0, r4
 8009728:	ee10 2a10 	vmov	r2, s0
 800972c:	465b      	mov	r3, fp
 800972e:	4639      	mov	r1, r7
 8009730:	f7f7 f8a4 	bl	800087c <__aeabi_ddiv>
 8009734:	ec41 0b10 	vmov	d0, r0, r1
 8009738:	b003      	add	sp, #12
 800973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800973e <__copybits>:
 800973e:	3901      	subs	r1, #1
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	1149      	asrs	r1, r1, #5
 8009744:	6914      	ldr	r4, [r2, #16]
 8009746:	3101      	adds	r1, #1
 8009748:	f102 0314 	add.w	r3, r2, #20
 800974c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009750:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009754:	1f05      	subs	r5, r0, #4
 8009756:	42a3      	cmp	r3, r4
 8009758:	d30c      	bcc.n	8009774 <__copybits+0x36>
 800975a:	1aa3      	subs	r3, r4, r2
 800975c:	3b11      	subs	r3, #17
 800975e:	f023 0303 	bic.w	r3, r3, #3
 8009762:	3211      	adds	r2, #17
 8009764:	42a2      	cmp	r2, r4
 8009766:	bf88      	it	hi
 8009768:	2300      	movhi	r3, #0
 800976a:	4418      	add	r0, r3
 800976c:	2300      	movs	r3, #0
 800976e:	4288      	cmp	r0, r1
 8009770:	d305      	bcc.n	800977e <__copybits+0x40>
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	f853 6b04 	ldr.w	r6, [r3], #4
 8009778:	f845 6f04 	str.w	r6, [r5, #4]!
 800977c:	e7eb      	b.n	8009756 <__copybits+0x18>
 800977e:	f840 3b04 	str.w	r3, [r0], #4
 8009782:	e7f4      	b.n	800976e <__copybits+0x30>

08009784 <__any_on>:
 8009784:	f100 0214 	add.w	r2, r0, #20
 8009788:	6900      	ldr	r0, [r0, #16]
 800978a:	114b      	asrs	r3, r1, #5
 800978c:	4298      	cmp	r0, r3
 800978e:	b510      	push	{r4, lr}
 8009790:	db11      	blt.n	80097b6 <__any_on+0x32>
 8009792:	dd0a      	ble.n	80097aa <__any_on+0x26>
 8009794:	f011 011f 	ands.w	r1, r1, #31
 8009798:	d007      	beq.n	80097aa <__any_on+0x26>
 800979a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800979e:	fa24 f001 	lsr.w	r0, r4, r1
 80097a2:	fa00 f101 	lsl.w	r1, r0, r1
 80097a6:	428c      	cmp	r4, r1
 80097a8:	d10b      	bne.n	80097c2 <__any_on+0x3e>
 80097aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d803      	bhi.n	80097ba <__any_on+0x36>
 80097b2:	2000      	movs	r0, #0
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	4603      	mov	r3, r0
 80097b8:	e7f7      	b.n	80097aa <__any_on+0x26>
 80097ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097be:	2900      	cmp	r1, #0
 80097c0:	d0f5      	beq.n	80097ae <__any_on+0x2a>
 80097c2:	2001      	movs	r0, #1
 80097c4:	e7f6      	b.n	80097b4 <__any_on+0x30>

080097c6 <_calloc_r>:
 80097c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097c8:	fba1 2402 	umull	r2, r4, r1, r2
 80097cc:	b94c      	cbnz	r4, 80097e2 <_calloc_r+0x1c>
 80097ce:	4611      	mov	r1, r2
 80097d0:	9201      	str	r2, [sp, #4]
 80097d2:	f000 f87b 	bl	80098cc <_malloc_r>
 80097d6:	9a01      	ldr	r2, [sp, #4]
 80097d8:	4605      	mov	r5, r0
 80097da:	b930      	cbnz	r0, 80097ea <_calloc_r+0x24>
 80097dc:	4628      	mov	r0, r5
 80097de:	b003      	add	sp, #12
 80097e0:	bd30      	pop	{r4, r5, pc}
 80097e2:	220c      	movs	r2, #12
 80097e4:	6002      	str	r2, [r0, #0]
 80097e6:	2500      	movs	r5, #0
 80097e8:	e7f8      	b.n	80097dc <_calloc_r+0x16>
 80097ea:	4621      	mov	r1, r4
 80097ec:	f7fc fbc0 	bl	8005f70 <memset>
 80097f0:	e7f4      	b.n	80097dc <_calloc_r+0x16>
	...

080097f4 <_free_r>:
 80097f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097f6:	2900      	cmp	r1, #0
 80097f8:	d044      	beq.n	8009884 <_free_r+0x90>
 80097fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fe:	9001      	str	r0, [sp, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f1a1 0404 	sub.w	r4, r1, #4
 8009806:	bfb8      	it	lt
 8009808:	18e4      	addlt	r4, r4, r3
 800980a:	f000 fab5 	bl	8009d78 <__malloc_lock>
 800980e:	4a1e      	ldr	r2, [pc, #120]	; (8009888 <_free_r+0x94>)
 8009810:	9801      	ldr	r0, [sp, #4]
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	b933      	cbnz	r3, 8009824 <_free_r+0x30>
 8009816:	6063      	str	r3, [r4, #4]
 8009818:	6014      	str	r4, [r2, #0]
 800981a:	b003      	add	sp, #12
 800981c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009820:	f000 bab0 	b.w	8009d84 <__malloc_unlock>
 8009824:	42a3      	cmp	r3, r4
 8009826:	d908      	bls.n	800983a <_free_r+0x46>
 8009828:	6825      	ldr	r5, [r4, #0]
 800982a:	1961      	adds	r1, r4, r5
 800982c:	428b      	cmp	r3, r1
 800982e:	bf01      	itttt	eq
 8009830:	6819      	ldreq	r1, [r3, #0]
 8009832:	685b      	ldreq	r3, [r3, #4]
 8009834:	1949      	addeq	r1, r1, r5
 8009836:	6021      	streq	r1, [r4, #0]
 8009838:	e7ed      	b.n	8009816 <_free_r+0x22>
 800983a:	461a      	mov	r2, r3
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	b10b      	cbz	r3, 8009844 <_free_r+0x50>
 8009840:	42a3      	cmp	r3, r4
 8009842:	d9fa      	bls.n	800983a <_free_r+0x46>
 8009844:	6811      	ldr	r1, [r2, #0]
 8009846:	1855      	adds	r5, r2, r1
 8009848:	42a5      	cmp	r5, r4
 800984a:	d10b      	bne.n	8009864 <_free_r+0x70>
 800984c:	6824      	ldr	r4, [r4, #0]
 800984e:	4421      	add	r1, r4
 8009850:	1854      	adds	r4, r2, r1
 8009852:	42a3      	cmp	r3, r4
 8009854:	6011      	str	r1, [r2, #0]
 8009856:	d1e0      	bne.n	800981a <_free_r+0x26>
 8009858:	681c      	ldr	r4, [r3, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	6053      	str	r3, [r2, #4]
 800985e:	4421      	add	r1, r4
 8009860:	6011      	str	r1, [r2, #0]
 8009862:	e7da      	b.n	800981a <_free_r+0x26>
 8009864:	d902      	bls.n	800986c <_free_r+0x78>
 8009866:	230c      	movs	r3, #12
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	e7d6      	b.n	800981a <_free_r+0x26>
 800986c:	6825      	ldr	r5, [r4, #0]
 800986e:	1961      	adds	r1, r4, r5
 8009870:	428b      	cmp	r3, r1
 8009872:	bf04      	itt	eq
 8009874:	6819      	ldreq	r1, [r3, #0]
 8009876:	685b      	ldreq	r3, [r3, #4]
 8009878:	6063      	str	r3, [r4, #4]
 800987a:	bf04      	itt	eq
 800987c:	1949      	addeq	r1, r1, r5
 800987e:	6021      	streq	r1, [r4, #0]
 8009880:	6054      	str	r4, [r2, #4]
 8009882:	e7ca      	b.n	800981a <_free_r+0x26>
 8009884:	b003      	add	sp, #12
 8009886:	bd30      	pop	{r4, r5, pc}
 8009888:	200007cc 	.word	0x200007cc

0800988c <sbrk_aligned>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	4e0e      	ldr	r6, [pc, #56]	; (80098c8 <sbrk_aligned+0x3c>)
 8009890:	460c      	mov	r4, r1
 8009892:	6831      	ldr	r1, [r6, #0]
 8009894:	4605      	mov	r5, r0
 8009896:	b911      	cbnz	r1, 800989e <sbrk_aligned+0x12>
 8009898:	f000 f9f2 	bl	8009c80 <_sbrk_r>
 800989c:	6030      	str	r0, [r6, #0]
 800989e:	4621      	mov	r1, r4
 80098a0:	4628      	mov	r0, r5
 80098a2:	f000 f9ed 	bl	8009c80 <_sbrk_r>
 80098a6:	1c43      	adds	r3, r0, #1
 80098a8:	d00a      	beq.n	80098c0 <sbrk_aligned+0x34>
 80098aa:	1cc4      	adds	r4, r0, #3
 80098ac:	f024 0403 	bic.w	r4, r4, #3
 80098b0:	42a0      	cmp	r0, r4
 80098b2:	d007      	beq.n	80098c4 <sbrk_aligned+0x38>
 80098b4:	1a21      	subs	r1, r4, r0
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 f9e2 	bl	8009c80 <_sbrk_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	d101      	bne.n	80098c4 <sbrk_aligned+0x38>
 80098c0:	f04f 34ff 	mov.w	r4, #4294967295
 80098c4:	4620      	mov	r0, r4
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	200007d0 	.word	0x200007d0

080098cc <_malloc_r>:
 80098cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	1ccd      	adds	r5, r1, #3
 80098d2:	f025 0503 	bic.w	r5, r5, #3
 80098d6:	3508      	adds	r5, #8
 80098d8:	2d0c      	cmp	r5, #12
 80098da:	bf38      	it	cc
 80098dc:	250c      	movcc	r5, #12
 80098de:	2d00      	cmp	r5, #0
 80098e0:	4607      	mov	r7, r0
 80098e2:	db01      	blt.n	80098e8 <_malloc_r+0x1c>
 80098e4:	42a9      	cmp	r1, r5
 80098e6:	d905      	bls.n	80098f4 <_malloc_r+0x28>
 80098e8:	230c      	movs	r3, #12
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	2600      	movs	r6, #0
 80098ee:	4630      	mov	r0, r6
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f4:	4e2e      	ldr	r6, [pc, #184]	; (80099b0 <_malloc_r+0xe4>)
 80098f6:	f000 fa3f 	bl	8009d78 <__malloc_lock>
 80098fa:	6833      	ldr	r3, [r6, #0]
 80098fc:	461c      	mov	r4, r3
 80098fe:	bb34      	cbnz	r4, 800994e <_malloc_r+0x82>
 8009900:	4629      	mov	r1, r5
 8009902:	4638      	mov	r0, r7
 8009904:	f7ff ffc2 	bl	800988c <sbrk_aligned>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	4604      	mov	r4, r0
 800990c:	d14d      	bne.n	80099aa <_malloc_r+0xde>
 800990e:	6834      	ldr	r4, [r6, #0]
 8009910:	4626      	mov	r6, r4
 8009912:	2e00      	cmp	r6, #0
 8009914:	d140      	bne.n	8009998 <_malloc_r+0xcc>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	4631      	mov	r1, r6
 800991a:	4638      	mov	r0, r7
 800991c:	eb04 0803 	add.w	r8, r4, r3
 8009920:	f000 f9ae 	bl	8009c80 <_sbrk_r>
 8009924:	4580      	cmp	r8, r0
 8009926:	d13a      	bne.n	800999e <_malloc_r+0xd2>
 8009928:	6821      	ldr	r1, [r4, #0]
 800992a:	3503      	adds	r5, #3
 800992c:	1a6d      	subs	r5, r5, r1
 800992e:	f025 0503 	bic.w	r5, r5, #3
 8009932:	3508      	adds	r5, #8
 8009934:	2d0c      	cmp	r5, #12
 8009936:	bf38      	it	cc
 8009938:	250c      	movcc	r5, #12
 800993a:	4629      	mov	r1, r5
 800993c:	4638      	mov	r0, r7
 800993e:	f7ff ffa5 	bl	800988c <sbrk_aligned>
 8009942:	3001      	adds	r0, #1
 8009944:	d02b      	beq.n	800999e <_malloc_r+0xd2>
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	442b      	add	r3, r5
 800994a:	6023      	str	r3, [r4, #0]
 800994c:	e00e      	b.n	800996c <_malloc_r+0xa0>
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	1b52      	subs	r2, r2, r5
 8009952:	d41e      	bmi.n	8009992 <_malloc_r+0xc6>
 8009954:	2a0b      	cmp	r2, #11
 8009956:	d916      	bls.n	8009986 <_malloc_r+0xba>
 8009958:	1961      	adds	r1, r4, r5
 800995a:	42a3      	cmp	r3, r4
 800995c:	6025      	str	r5, [r4, #0]
 800995e:	bf18      	it	ne
 8009960:	6059      	strne	r1, [r3, #4]
 8009962:	6863      	ldr	r3, [r4, #4]
 8009964:	bf08      	it	eq
 8009966:	6031      	streq	r1, [r6, #0]
 8009968:	5162      	str	r2, [r4, r5]
 800996a:	604b      	str	r3, [r1, #4]
 800996c:	4638      	mov	r0, r7
 800996e:	f104 060b 	add.w	r6, r4, #11
 8009972:	f000 fa07 	bl	8009d84 <__malloc_unlock>
 8009976:	f026 0607 	bic.w	r6, r6, #7
 800997a:	1d23      	adds	r3, r4, #4
 800997c:	1af2      	subs	r2, r6, r3
 800997e:	d0b6      	beq.n	80098ee <_malloc_r+0x22>
 8009980:	1b9b      	subs	r3, r3, r6
 8009982:	50a3      	str	r3, [r4, r2]
 8009984:	e7b3      	b.n	80098ee <_malloc_r+0x22>
 8009986:	6862      	ldr	r2, [r4, #4]
 8009988:	42a3      	cmp	r3, r4
 800998a:	bf0c      	ite	eq
 800998c:	6032      	streq	r2, [r6, #0]
 800998e:	605a      	strne	r2, [r3, #4]
 8009990:	e7ec      	b.n	800996c <_malloc_r+0xa0>
 8009992:	4623      	mov	r3, r4
 8009994:	6864      	ldr	r4, [r4, #4]
 8009996:	e7b2      	b.n	80098fe <_malloc_r+0x32>
 8009998:	4634      	mov	r4, r6
 800999a:	6876      	ldr	r6, [r6, #4]
 800999c:	e7b9      	b.n	8009912 <_malloc_r+0x46>
 800999e:	230c      	movs	r3, #12
 80099a0:	603b      	str	r3, [r7, #0]
 80099a2:	4638      	mov	r0, r7
 80099a4:	f000 f9ee 	bl	8009d84 <__malloc_unlock>
 80099a8:	e7a1      	b.n	80098ee <_malloc_r+0x22>
 80099aa:	6025      	str	r5, [r4, #0]
 80099ac:	e7de      	b.n	800996c <_malloc_r+0xa0>
 80099ae:	bf00      	nop
 80099b0:	200007cc 	.word	0x200007cc

080099b4 <__ssputs_r>:
 80099b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	688e      	ldr	r6, [r1, #8]
 80099ba:	429e      	cmp	r6, r3
 80099bc:	4682      	mov	sl, r0
 80099be:	460c      	mov	r4, r1
 80099c0:	4690      	mov	r8, r2
 80099c2:	461f      	mov	r7, r3
 80099c4:	d838      	bhi.n	8009a38 <__ssputs_r+0x84>
 80099c6:	898a      	ldrh	r2, [r1, #12]
 80099c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099cc:	d032      	beq.n	8009a34 <__ssputs_r+0x80>
 80099ce:	6825      	ldr	r5, [r4, #0]
 80099d0:	6909      	ldr	r1, [r1, #16]
 80099d2:	eba5 0901 	sub.w	r9, r5, r1
 80099d6:	6965      	ldr	r5, [r4, #20]
 80099d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e0:	3301      	adds	r3, #1
 80099e2:	444b      	add	r3, r9
 80099e4:	106d      	asrs	r5, r5, #1
 80099e6:	429d      	cmp	r5, r3
 80099e8:	bf38      	it	cc
 80099ea:	461d      	movcc	r5, r3
 80099ec:	0553      	lsls	r3, r2, #21
 80099ee:	d531      	bpl.n	8009a54 <__ssputs_r+0xa0>
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7ff ff6b 	bl	80098cc <_malloc_r>
 80099f6:	4606      	mov	r6, r0
 80099f8:	b950      	cbnz	r0, 8009a10 <__ssputs_r+0x5c>
 80099fa:	230c      	movs	r3, #12
 80099fc:	f8ca 3000 	str.w	r3, [sl]
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a10:	6921      	ldr	r1, [r4, #16]
 8009a12:	464a      	mov	r2, r9
 8009a14:	f7ff fa08 	bl	8008e28 <memcpy>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	6126      	str	r6, [r4, #16]
 8009a26:	6165      	str	r5, [r4, #20]
 8009a28:	444e      	add	r6, r9
 8009a2a:	eba5 0509 	sub.w	r5, r5, r9
 8009a2e:	6026      	str	r6, [r4, #0]
 8009a30:	60a5      	str	r5, [r4, #8]
 8009a32:	463e      	mov	r6, r7
 8009a34:	42be      	cmp	r6, r7
 8009a36:	d900      	bls.n	8009a3a <__ssputs_r+0x86>
 8009a38:	463e      	mov	r6, r7
 8009a3a:	6820      	ldr	r0, [r4, #0]
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	4641      	mov	r1, r8
 8009a40:	f000 f980 	bl	8009d44 <memmove>
 8009a44:	68a3      	ldr	r3, [r4, #8]
 8009a46:	1b9b      	subs	r3, r3, r6
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	4433      	add	r3, r6
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	2000      	movs	r0, #0
 8009a52:	e7db      	b.n	8009a0c <__ssputs_r+0x58>
 8009a54:	462a      	mov	r2, r5
 8009a56:	f000 f99b 	bl	8009d90 <_realloc_r>
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d1e1      	bne.n	8009a24 <__ssputs_r+0x70>
 8009a60:	6921      	ldr	r1, [r4, #16]
 8009a62:	4650      	mov	r0, sl
 8009a64:	f7ff fec6 	bl	80097f4 <_free_r>
 8009a68:	e7c7      	b.n	80099fa <__ssputs_r+0x46>
	...

08009a6c <_svfiprintf_r>:
 8009a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a70:	4698      	mov	r8, r3
 8009a72:	898b      	ldrh	r3, [r1, #12]
 8009a74:	061b      	lsls	r3, r3, #24
 8009a76:	b09d      	sub	sp, #116	; 0x74
 8009a78:	4607      	mov	r7, r0
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	d50e      	bpl.n	8009a9e <_svfiprintf_r+0x32>
 8009a80:	690b      	ldr	r3, [r1, #16]
 8009a82:	b963      	cbnz	r3, 8009a9e <_svfiprintf_r+0x32>
 8009a84:	2140      	movs	r1, #64	; 0x40
 8009a86:	f7ff ff21 	bl	80098cc <_malloc_r>
 8009a8a:	6028      	str	r0, [r5, #0]
 8009a8c:	6128      	str	r0, [r5, #16]
 8009a8e:	b920      	cbnz	r0, 8009a9a <_svfiprintf_r+0x2e>
 8009a90:	230c      	movs	r3, #12
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	f04f 30ff 	mov.w	r0, #4294967295
 8009a98:	e0d1      	b.n	8009c3e <_svfiprintf_r+0x1d2>
 8009a9a:	2340      	movs	r3, #64	; 0x40
 8009a9c:	616b      	str	r3, [r5, #20]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa2:	2320      	movs	r3, #32
 8009aa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aac:	2330      	movs	r3, #48	; 0x30
 8009aae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c58 <_svfiprintf_r+0x1ec>
 8009ab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ab6:	f04f 0901 	mov.w	r9, #1
 8009aba:	4623      	mov	r3, r4
 8009abc:	469a      	mov	sl, r3
 8009abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac2:	b10a      	cbz	r2, 8009ac8 <_svfiprintf_r+0x5c>
 8009ac4:	2a25      	cmp	r2, #37	; 0x25
 8009ac6:	d1f9      	bne.n	8009abc <_svfiprintf_r+0x50>
 8009ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8009acc:	d00b      	beq.n	8009ae6 <_svfiprintf_r+0x7a>
 8009ace:	465b      	mov	r3, fp
 8009ad0:	4622      	mov	r2, r4
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	f7ff ff6d 	bl	80099b4 <__ssputs_r>
 8009ada:	3001      	adds	r0, #1
 8009adc:	f000 80aa 	beq.w	8009c34 <_svfiprintf_r+0x1c8>
 8009ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae2:	445a      	add	r2, fp
 8009ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 80a2 	beq.w	8009c34 <_svfiprintf_r+0x1c8>
 8009af0:	2300      	movs	r3, #0
 8009af2:	f04f 32ff 	mov.w	r2, #4294967295
 8009af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009afa:	f10a 0a01 	add.w	sl, sl, #1
 8009afe:	9304      	str	r3, [sp, #16]
 8009b00:	9307      	str	r3, [sp, #28]
 8009b02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b06:	931a      	str	r3, [sp, #104]	; 0x68
 8009b08:	4654      	mov	r4, sl
 8009b0a:	2205      	movs	r2, #5
 8009b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b10:	4851      	ldr	r0, [pc, #324]	; (8009c58 <_svfiprintf_r+0x1ec>)
 8009b12:	f7f6 fb7d 	bl	8000210 <memchr>
 8009b16:	9a04      	ldr	r2, [sp, #16]
 8009b18:	b9d8      	cbnz	r0, 8009b52 <_svfiprintf_r+0xe6>
 8009b1a:	06d0      	lsls	r0, r2, #27
 8009b1c:	bf44      	itt	mi
 8009b1e:	2320      	movmi	r3, #32
 8009b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b24:	0711      	lsls	r1, r2, #28
 8009b26:	bf44      	itt	mi
 8009b28:	232b      	movmi	r3, #43	; 0x2b
 8009b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b32:	2b2a      	cmp	r3, #42	; 0x2a
 8009b34:	d015      	beq.n	8009b62 <_svfiprintf_r+0xf6>
 8009b36:	9a07      	ldr	r2, [sp, #28]
 8009b38:	4654      	mov	r4, sl
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	f04f 0c0a 	mov.w	ip, #10
 8009b40:	4621      	mov	r1, r4
 8009b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b46:	3b30      	subs	r3, #48	; 0x30
 8009b48:	2b09      	cmp	r3, #9
 8009b4a:	d94e      	bls.n	8009bea <_svfiprintf_r+0x17e>
 8009b4c:	b1b0      	cbz	r0, 8009b7c <_svfiprintf_r+0x110>
 8009b4e:	9207      	str	r2, [sp, #28]
 8009b50:	e014      	b.n	8009b7c <_svfiprintf_r+0x110>
 8009b52:	eba0 0308 	sub.w	r3, r0, r8
 8009b56:	fa09 f303 	lsl.w	r3, r9, r3
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	46a2      	mov	sl, r4
 8009b60:	e7d2      	b.n	8009b08 <_svfiprintf_r+0x9c>
 8009b62:	9b03      	ldr	r3, [sp, #12]
 8009b64:	1d19      	adds	r1, r3, #4
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	9103      	str	r1, [sp, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	bfbb      	ittet	lt
 8009b6e:	425b      	neglt	r3, r3
 8009b70:	f042 0202 	orrlt.w	r2, r2, #2
 8009b74:	9307      	strge	r3, [sp, #28]
 8009b76:	9307      	strlt	r3, [sp, #28]
 8009b78:	bfb8      	it	lt
 8009b7a:	9204      	strlt	r2, [sp, #16]
 8009b7c:	7823      	ldrb	r3, [r4, #0]
 8009b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8009b80:	d10c      	bne.n	8009b9c <_svfiprintf_r+0x130>
 8009b82:	7863      	ldrb	r3, [r4, #1]
 8009b84:	2b2a      	cmp	r3, #42	; 0x2a
 8009b86:	d135      	bne.n	8009bf4 <_svfiprintf_r+0x188>
 8009b88:	9b03      	ldr	r3, [sp, #12]
 8009b8a:	1d1a      	adds	r2, r3, #4
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	9203      	str	r2, [sp, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	bfb8      	it	lt
 8009b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b98:	3402      	adds	r4, #2
 8009b9a:	9305      	str	r3, [sp, #20]
 8009b9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c68 <_svfiprintf_r+0x1fc>
 8009ba0:	7821      	ldrb	r1, [r4, #0]
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	4650      	mov	r0, sl
 8009ba6:	f7f6 fb33 	bl	8000210 <memchr>
 8009baa:	b140      	cbz	r0, 8009bbe <_svfiprintf_r+0x152>
 8009bac:	2340      	movs	r3, #64	; 0x40
 8009bae:	eba0 000a 	sub.w	r0, r0, sl
 8009bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8009bb6:	9b04      	ldr	r3, [sp, #16]
 8009bb8:	4303      	orrs	r3, r0
 8009bba:	3401      	adds	r4, #1
 8009bbc:	9304      	str	r3, [sp, #16]
 8009bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc2:	4826      	ldr	r0, [pc, #152]	; (8009c5c <_svfiprintf_r+0x1f0>)
 8009bc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bc8:	2206      	movs	r2, #6
 8009bca:	f7f6 fb21 	bl	8000210 <memchr>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d038      	beq.n	8009c44 <_svfiprintf_r+0x1d8>
 8009bd2:	4b23      	ldr	r3, [pc, #140]	; (8009c60 <_svfiprintf_r+0x1f4>)
 8009bd4:	bb1b      	cbnz	r3, 8009c1e <_svfiprintf_r+0x1b2>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	3307      	adds	r3, #7
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	3308      	adds	r3, #8
 8009be0:	9303      	str	r3, [sp, #12]
 8009be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be4:	4433      	add	r3, r6
 8009be6:	9309      	str	r3, [sp, #36]	; 0x24
 8009be8:	e767      	b.n	8009aba <_svfiprintf_r+0x4e>
 8009bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bee:	460c      	mov	r4, r1
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	e7a5      	b.n	8009b40 <_svfiprintf_r+0xd4>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	3401      	adds	r4, #1
 8009bf8:	9305      	str	r3, [sp, #20]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f04f 0c0a 	mov.w	ip, #10
 8009c00:	4620      	mov	r0, r4
 8009c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c06:	3a30      	subs	r2, #48	; 0x30
 8009c08:	2a09      	cmp	r2, #9
 8009c0a:	d903      	bls.n	8009c14 <_svfiprintf_r+0x1a8>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0c5      	beq.n	8009b9c <_svfiprintf_r+0x130>
 8009c10:	9105      	str	r1, [sp, #20]
 8009c12:	e7c3      	b.n	8009b9c <_svfiprintf_r+0x130>
 8009c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c18:	4604      	mov	r4, r0
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e7f0      	b.n	8009c00 <_svfiprintf_r+0x194>
 8009c1e:	ab03      	add	r3, sp, #12
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	462a      	mov	r2, r5
 8009c24:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <_svfiprintf_r+0x1f8>)
 8009c26:	a904      	add	r1, sp, #16
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7fc fa49 	bl	80060c0 <_printf_float>
 8009c2e:	1c42      	adds	r2, r0, #1
 8009c30:	4606      	mov	r6, r0
 8009c32:	d1d6      	bne.n	8009be2 <_svfiprintf_r+0x176>
 8009c34:	89ab      	ldrh	r3, [r5, #12]
 8009c36:	065b      	lsls	r3, r3, #25
 8009c38:	f53f af2c 	bmi.w	8009a94 <_svfiprintf_r+0x28>
 8009c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c3e:	b01d      	add	sp, #116	; 0x74
 8009c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c44:	ab03      	add	r3, sp, #12
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	462a      	mov	r2, r5
 8009c4a:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <_svfiprintf_r+0x1f8>)
 8009c4c:	a904      	add	r1, sp, #16
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f7fc fcda 	bl	8006608 <_printf_i>
 8009c54:	e7eb      	b.n	8009c2e <_svfiprintf_r+0x1c2>
 8009c56:	bf00      	nop
 8009c58:	0800ba54 	.word	0x0800ba54
 8009c5c:	0800ba5e 	.word	0x0800ba5e
 8009c60:	080060c1 	.word	0x080060c1
 8009c64:	080099b5 	.word	0x080099b5
 8009c68:	0800ba5a 	.word	0x0800ba5a
 8009c6c:	00000000 	.word	0x00000000

08009c70 <nan>:
 8009c70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c78 <nan+0x8>
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	00000000 	.word	0x00000000
 8009c7c:	7ff80000 	.word	0x7ff80000

08009c80 <_sbrk_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d06      	ldr	r5, [pc, #24]	; (8009c9c <_sbrk_r+0x1c>)
 8009c84:	2300      	movs	r3, #0
 8009c86:	4604      	mov	r4, r0
 8009c88:	4608      	mov	r0, r1
 8009c8a:	602b      	str	r3, [r5, #0]
 8009c8c:	f7f8 fdd2 	bl	8002834 <_sbrk>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d102      	bne.n	8009c9a <_sbrk_r+0x1a>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	b103      	cbz	r3, 8009c9a <_sbrk_r+0x1a>
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	bd38      	pop	{r3, r4, r5, pc}
 8009c9c:	200007d4 	.word	0x200007d4

08009ca0 <strncmp>:
 8009ca0:	b510      	push	{r4, lr}
 8009ca2:	b17a      	cbz	r2, 8009cc4 <strncmp+0x24>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	3901      	subs	r1, #1
 8009ca8:	1884      	adds	r4, r0, r2
 8009caa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009cb2:	4290      	cmp	r0, r2
 8009cb4:	d101      	bne.n	8009cba <strncmp+0x1a>
 8009cb6:	42a3      	cmp	r3, r4
 8009cb8:	d101      	bne.n	8009cbe <strncmp+0x1e>
 8009cba:	1a80      	subs	r0, r0, r2
 8009cbc:	bd10      	pop	{r4, pc}
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d1f3      	bne.n	8009caa <strncmp+0xa>
 8009cc2:	e7fa      	b.n	8009cba <strncmp+0x1a>
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	e7f9      	b.n	8009cbc <strncmp+0x1c>

08009cc8 <__ascii_wctomb>:
 8009cc8:	b149      	cbz	r1, 8009cde <__ascii_wctomb+0x16>
 8009cca:	2aff      	cmp	r2, #255	; 0xff
 8009ccc:	bf85      	ittet	hi
 8009cce:	238a      	movhi	r3, #138	; 0x8a
 8009cd0:	6003      	strhi	r3, [r0, #0]
 8009cd2:	700a      	strbls	r2, [r1, #0]
 8009cd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009cd8:	bf98      	it	ls
 8009cda:	2001      	movls	r0, #1
 8009cdc:	4770      	bx	lr
 8009cde:	4608      	mov	r0, r1
 8009ce0:	4770      	bx	lr
	...

08009ce4 <__assert_func>:
 8009ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ce6:	4614      	mov	r4, r2
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <__assert_func+0x2c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4605      	mov	r5, r0
 8009cf0:	68d8      	ldr	r0, [r3, #12]
 8009cf2:	b14c      	cbz	r4, 8009d08 <__assert_func+0x24>
 8009cf4:	4b07      	ldr	r3, [pc, #28]	; (8009d14 <__assert_func+0x30>)
 8009cf6:	9100      	str	r1, [sp, #0]
 8009cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cfc:	4906      	ldr	r1, [pc, #24]	; (8009d18 <__assert_func+0x34>)
 8009cfe:	462b      	mov	r3, r5
 8009d00:	f000 f80e 	bl	8009d20 <fiprintf>
 8009d04:	f000 fa8c 	bl	800a220 <abort>
 8009d08:	4b04      	ldr	r3, [pc, #16]	; (8009d1c <__assert_func+0x38>)
 8009d0a:	461c      	mov	r4, r3
 8009d0c:	e7f3      	b.n	8009cf6 <__assert_func+0x12>
 8009d0e:	bf00      	nop
 8009d10:	20000030 	.word	0x20000030
 8009d14:	0800ba65 	.word	0x0800ba65
 8009d18:	0800ba72 	.word	0x0800ba72
 8009d1c:	0800baa0 	.word	0x0800baa0

08009d20 <fiprintf>:
 8009d20:	b40e      	push	{r1, r2, r3}
 8009d22:	b503      	push	{r0, r1, lr}
 8009d24:	4601      	mov	r1, r0
 8009d26:	ab03      	add	r3, sp, #12
 8009d28:	4805      	ldr	r0, [pc, #20]	; (8009d40 <fiprintf+0x20>)
 8009d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2e:	6800      	ldr	r0, [r0, #0]
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	f000 f885 	bl	8009e40 <_vfiprintf_r>
 8009d36:	b002      	add	sp, #8
 8009d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d3c:	b003      	add	sp, #12
 8009d3e:	4770      	bx	lr
 8009d40:	20000030 	.word	0x20000030

08009d44 <memmove>:
 8009d44:	4288      	cmp	r0, r1
 8009d46:	b510      	push	{r4, lr}
 8009d48:	eb01 0402 	add.w	r4, r1, r2
 8009d4c:	d902      	bls.n	8009d54 <memmove+0x10>
 8009d4e:	4284      	cmp	r4, r0
 8009d50:	4623      	mov	r3, r4
 8009d52:	d807      	bhi.n	8009d64 <memmove+0x20>
 8009d54:	1e43      	subs	r3, r0, #1
 8009d56:	42a1      	cmp	r1, r4
 8009d58:	d008      	beq.n	8009d6c <memmove+0x28>
 8009d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d62:	e7f8      	b.n	8009d56 <memmove+0x12>
 8009d64:	4402      	add	r2, r0
 8009d66:	4601      	mov	r1, r0
 8009d68:	428a      	cmp	r2, r1
 8009d6a:	d100      	bne.n	8009d6e <memmove+0x2a>
 8009d6c:	bd10      	pop	{r4, pc}
 8009d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d76:	e7f7      	b.n	8009d68 <memmove+0x24>

08009d78 <__malloc_lock>:
 8009d78:	4801      	ldr	r0, [pc, #4]	; (8009d80 <__malloc_lock+0x8>)
 8009d7a:	f000 bc11 	b.w	800a5a0 <__retarget_lock_acquire_recursive>
 8009d7e:	bf00      	nop
 8009d80:	200007d8 	.word	0x200007d8

08009d84 <__malloc_unlock>:
 8009d84:	4801      	ldr	r0, [pc, #4]	; (8009d8c <__malloc_unlock+0x8>)
 8009d86:	f000 bc0c 	b.w	800a5a2 <__retarget_lock_release_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	200007d8 	.word	0x200007d8

08009d90 <_realloc_r>:
 8009d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d94:	4680      	mov	r8, r0
 8009d96:	4614      	mov	r4, r2
 8009d98:	460e      	mov	r6, r1
 8009d9a:	b921      	cbnz	r1, 8009da6 <_realloc_r+0x16>
 8009d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da0:	4611      	mov	r1, r2
 8009da2:	f7ff bd93 	b.w	80098cc <_malloc_r>
 8009da6:	b92a      	cbnz	r2, 8009db4 <_realloc_r+0x24>
 8009da8:	f7ff fd24 	bl	80097f4 <_free_r>
 8009dac:	4625      	mov	r5, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db4:	f000 fc5c 	bl	800a670 <_malloc_usable_size_r>
 8009db8:	4284      	cmp	r4, r0
 8009dba:	4607      	mov	r7, r0
 8009dbc:	d802      	bhi.n	8009dc4 <_realloc_r+0x34>
 8009dbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dc2:	d812      	bhi.n	8009dea <_realloc_r+0x5a>
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	f7ff fd80 	bl	80098cc <_malloc_r>
 8009dcc:	4605      	mov	r5, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d0ed      	beq.n	8009dae <_realloc_r+0x1e>
 8009dd2:	42bc      	cmp	r4, r7
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	bf28      	it	cs
 8009dda:	463a      	movcs	r2, r7
 8009ddc:	f7ff f824 	bl	8008e28 <memcpy>
 8009de0:	4631      	mov	r1, r6
 8009de2:	4640      	mov	r0, r8
 8009de4:	f7ff fd06 	bl	80097f4 <_free_r>
 8009de8:	e7e1      	b.n	8009dae <_realloc_r+0x1e>
 8009dea:	4635      	mov	r5, r6
 8009dec:	e7df      	b.n	8009dae <_realloc_r+0x1e>

08009dee <__sfputc_r>:
 8009dee:	6893      	ldr	r3, [r2, #8]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	b410      	push	{r4}
 8009df6:	6093      	str	r3, [r2, #8]
 8009df8:	da08      	bge.n	8009e0c <__sfputc_r+0x1e>
 8009dfa:	6994      	ldr	r4, [r2, #24]
 8009dfc:	42a3      	cmp	r3, r4
 8009dfe:	db01      	blt.n	8009e04 <__sfputc_r+0x16>
 8009e00:	290a      	cmp	r1, #10
 8009e02:	d103      	bne.n	8009e0c <__sfputc_r+0x1e>
 8009e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e08:	f000 b94a 	b.w	800a0a0 <__swbuf_r>
 8009e0c:	6813      	ldr	r3, [r2, #0]
 8009e0e:	1c58      	adds	r0, r3, #1
 8009e10:	6010      	str	r0, [r2, #0]
 8009e12:	7019      	strb	r1, [r3, #0]
 8009e14:	4608      	mov	r0, r1
 8009e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <__sfputs_r>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	4606      	mov	r6, r0
 8009e20:	460f      	mov	r7, r1
 8009e22:	4614      	mov	r4, r2
 8009e24:	18d5      	adds	r5, r2, r3
 8009e26:	42ac      	cmp	r4, r5
 8009e28:	d101      	bne.n	8009e2e <__sfputs_r+0x12>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e007      	b.n	8009e3e <__sfputs_r+0x22>
 8009e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e32:	463a      	mov	r2, r7
 8009e34:	4630      	mov	r0, r6
 8009e36:	f7ff ffda 	bl	8009dee <__sfputc_r>
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	d1f3      	bne.n	8009e26 <__sfputs_r+0xa>
 8009e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e40 <_vfiprintf_r>:
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	460d      	mov	r5, r1
 8009e46:	b09d      	sub	sp, #116	; 0x74
 8009e48:	4614      	mov	r4, r2
 8009e4a:	4698      	mov	r8, r3
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	b118      	cbz	r0, 8009e58 <_vfiprintf_r+0x18>
 8009e50:	6983      	ldr	r3, [r0, #24]
 8009e52:	b90b      	cbnz	r3, 8009e58 <_vfiprintf_r+0x18>
 8009e54:	f000 fb06 	bl	800a464 <__sinit>
 8009e58:	4b89      	ldr	r3, [pc, #548]	; (800a080 <_vfiprintf_r+0x240>)
 8009e5a:	429d      	cmp	r5, r3
 8009e5c:	d11b      	bne.n	8009e96 <_vfiprintf_r+0x56>
 8009e5e:	6875      	ldr	r5, [r6, #4]
 8009e60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e62:	07d9      	lsls	r1, r3, #31
 8009e64:	d405      	bmi.n	8009e72 <_vfiprintf_r+0x32>
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	059a      	lsls	r2, r3, #22
 8009e6a:	d402      	bmi.n	8009e72 <_vfiprintf_r+0x32>
 8009e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e6e:	f000 fb97 	bl	800a5a0 <__retarget_lock_acquire_recursive>
 8009e72:	89ab      	ldrh	r3, [r5, #12]
 8009e74:	071b      	lsls	r3, r3, #28
 8009e76:	d501      	bpl.n	8009e7c <_vfiprintf_r+0x3c>
 8009e78:	692b      	ldr	r3, [r5, #16]
 8009e7a:	b9eb      	cbnz	r3, 8009eb8 <_vfiprintf_r+0x78>
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f000 f960 	bl	800a144 <__swsetup_r>
 8009e84:	b1c0      	cbz	r0, 8009eb8 <_vfiprintf_r+0x78>
 8009e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e88:	07dc      	lsls	r4, r3, #31
 8009e8a:	d50e      	bpl.n	8009eaa <_vfiprintf_r+0x6a>
 8009e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e90:	b01d      	add	sp, #116	; 0x74
 8009e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e96:	4b7b      	ldr	r3, [pc, #492]	; (800a084 <_vfiprintf_r+0x244>)
 8009e98:	429d      	cmp	r5, r3
 8009e9a:	d101      	bne.n	8009ea0 <_vfiprintf_r+0x60>
 8009e9c:	68b5      	ldr	r5, [r6, #8]
 8009e9e:	e7df      	b.n	8009e60 <_vfiprintf_r+0x20>
 8009ea0:	4b79      	ldr	r3, [pc, #484]	; (800a088 <_vfiprintf_r+0x248>)
 8009ea2:	429d      	cmp	r5, r3
 8009ea4:	bf08      	it	eq
 8009ea6:	68f5      	ldreq	r5, [r6, #12]
 8009ea8:	e7da      	b.n	8009e60 <_vfiprintf_r+0x20>
 8009eaa:	89ab      	ldrh	r3, [r5, #12]
 8009eac:	0598      	lsls	r0, r3, #22
 8009eae:	d4ed      	bmi.n	8009e8c <_vfiprintf_r+0x4c>
 8009eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb2:	f000 fb76 	bl	800a5a2 <__retarget_lock_release_recursive>
 8009eb6:	e7e9      	b.n	8009e8c <_vfiprintf_r+0x4c>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9309      	str	r3, [sp, #36]	; 0x24
 8009ebc:	2320      	movs	r3, #32
 8009ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ec6:	2330      	movs	r3, #48	; 0x30
 8009ec8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a08c <_vfiprintf_r+0x24c>
 8009ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed0:	f04f 0901 	mov.w	r9, #1
 8009ed4:	4623      	mov	r3, r4
 8009ed6:	469a      	mov	sl, r3
 8009ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009edc:	b10a      	cbz	r2, 8009ee2 <_vfiprintf_r+0xa2>
 8009ede:	2a25      	cmp	r2, #37	; 0x25
 8009ee0:	d1f9      	bne.n	8009ed6 <_vfiprintf_r+0x96>
 8009ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ee6:	d00b      	beq.n	8009f00 <_vfiprintf_r+0xc0>
 8009ee8:	465b      	mov	r3, fp
 8009eea:	4622      	mov	r2, r4
 8009eec:	4629      	mov	r1, r5
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ff94 	bl	8009e1c <__sfputs_r>
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	f000 80aa 	beq.w	800a04e <_vfiprintf_r+0x20e>
 8009efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009efc:	445a      	add	r2, fp
 8009efe:	9209      	str	r2, [sp, #36]	; 0x24
 8009f00:	f89a 3000 	ldrb.w	r3, [sl]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 80a2 	beq.w	800a04e <_vfiprintf_r+0x20e>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f14:	f10a 0a01 	add.w	sl, sl, #1
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	9307      	str	r3, [sp, #28]
 8009f1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f20:	931a      	str	r3, [sp, #104]	; 0x68
 8009f22:	4654      	mov	r4, sl
 8009f24:	2205      	movs	r2, #5
 8009f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2a:	4858      	ldr	r0, [pc, #352]	; (800a08c <_vfiprintf_r+0x24c>)
 8009f2c:	f7f6 f970 	bl	8000210 <memchr>
 8009f30:	9a04      	ldr	r2, [sp, #16]
 8009f32:	b9d8      	cbnz	r0, 8009f6c <_vfiprintf_r+0x12c>
 8009f34:	06d1      	lsls	r1, r2, #27
 8009f36:	bf44      	itt	mi
 8009f38:	2320      	movmi	r3, #32
 8009f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3e:	0713      	lsls	r3, r2, #28
 8009f40:	bf44      	itt	mi
 8009f42:	232b      	movmi	r3, #43	; 0x2b
 8009f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f48:	f89a 3000 	ldrb.w	r3, [sl]
 8009f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f4e:	d015      	beq.n	8009f7c <_vfiprintf_r+0x13c>
 8009f50:	9a07      	ldr	r2, [sp, #28]
 8009f52:	4654      	mov	r4, sl
 8009f54:	2000      	movs	r0, #0
 8009f56:	f04f 0c0a 	mov.w	ip, #10
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f60:	3b30      	subs	r3, #48	; 0x30
 8009f62:	2b09      	cmp	r3, #9
 8009f64:	d94e      	bls.n	800a004 <_vfiprintf_r+0x1c4>
 8009f66:	b1b0      	cbz	r0, 8009f96 <_vfiprintf_r+0x156>
 8009f68:	9207      	str	r2, [sp, #28]
 8009f6a:	e014      	b.n	8009f96 <_vfiprintf_r+0x156>
 8009f6c:	eba0 0308 	sub.w	r3, r0, r8
 8009f70:	fa09 f303 	lsl.w	r3, r9, r3
 8009f74:	4313      	orrs	r3, r2
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	46a2      	mov	sl, r4
 8009f7a:	e7d2      	b.n	8009f22 <_vfiprintf_r+0xe2>
 8009f7c:	9b03      	ldr	r3, [sp, #12]
 8009f7e:	1d19      	adds	r1, r3, #4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	9103      	str	r1, [sp, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bfbb      	ittet	lt
 8009f88:	425b      	neglt	r3, r3
 8009f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8009f8e:	9307      	strge	r3, [sp, #28]
 8009f90:	9307      	strlt	r3, [sp, #28]
 8009f92:	bfb8      	it	lt
 8009f94:	9204      	strlt	r2, [sp, #16]
 8009f96:	7823      	ldrb	r3, [r4, #0]
 8009f98:	2b2e      	cmp	r3, #46	; 0x2e
 8009f9a:	d10c      	bne.n	8009fb6 <_vfiprintf_r+0x176>
 8009f9c:	7863      	ldrb	r3, [r4, #1]
 8009f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa0:	d135      	bne.n	800a00e <_vfiprintf_r+0x1ce>
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	1d1a      	adds	r2, r3, #4
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	9203      	str	r2, [sp, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	bfb8      	it	lt
 8009fae:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fb2:	3402      	adds	r4, #2
 8009fb4:	9305      	str	r3, [sp, #20]
 8009fb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a09c <_vfiprintf_r+0x25c>
 8009fba:	7821      	ldrb	r1, [r4, #0]
 8009fbc:	2203      	movs	r2, #3
 8009fbe:	4650      	mov	r0, sl
 8009fc0:	f7f6 f926 	bl	8000210 <memchr>
 8009fc4:	b140      	cbz	r0, 8009fd8 <_vfiprintf_r+0x198>
 8009fc6:	2340      	movs	r3, #64	; 0x40
 8009fc8:	eba0 000a 	sub.w	r0, r0, sl
 8009fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8009fd0:	9b04      	ldr	r3, [sp, #16]
 8009fd2:	4303      	orrs	r3, r0
 8009fd4:	3401      	adds	r4, #1
 8009fd6:	9304      	str	r3, [sp, #16]
 8009fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fdc:	482c      	ldr	r0, [pc, #176]	; (800a090 <_vfiprintf_r+0x250>)
 8009fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fe2:	2206      	movs	r2, #6
 8009fe4:	f7f6 f914 	bl	8000210 <memchr>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d03f      	beq.n	800a06c <_vfiprintf_r+0x22c>
 8009fec:	4b29      	ldr	r3, [pc, #164]	; (800a094 <_vfiprintf_r+0x254>)
 8009fee:	bb1b      	cbnz	r3, 800a038 <_vfiprintf_r+0x1f8>
 8009ff0:	9b03      	ldr	r3, [sp, #12]
 8009ff2:	3307      	adds	r3, #7
 8009ff4:	f023 0307 	bic.w	r3, r3, #7
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	9303      	str	r3, [sp, #12]
 8009ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffe:	443b      	add	r3, r7
 800a000:	9309      	str	r3, [sp, #36]	; 0x24
 800a002:	e767      	b.n	8009ed4 <_vfiprintf_r+0x94>
 800a004:	fb0c 3202 	mla	r2, ip, r2, r3
 800a008:	460c      	mov	r4, r1
 800a00a:	2001      	movs	r0, #1
 800a00c:	e7a5      	b.n	8009f5a <_vfiprintf_r+0x11a>
 800a00e:	2300      	movs	r3, #0
 800a010:	3401      	adds	r4, #1
 800a012:	9305      	str	r3, [sp, #20]
 800a014:	4619      	mov	r1, r3
 800a016:	f04f 0c0a 	mov.w	ip, #10
 800a01a:	4620      	mov	r0, r4
 800a01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a020:	3a30      	subs	r2, #48	; 0x30
 800a022:	2a09      	cmp	r2, #9
 800a024:	d903      	bls.n	800a02e <_vfiprintf_r+0x1ee>
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0c5      	beq.n	8009fb6 <_vfiprintf_r+0x176>
 800a02a:	9105      	str	r1, [sp, #20]
 800a02c:	e7c3      	b.n	8009fb6 <_vfiprintf_r+0x176>
 800a02e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a032:	4604      	mov	r4, r0
 800a034:	2301      	movs	r3, #1
 800a036:	e7f0      	b.n	800a01a <_vfiprintf_r+0x1da>
 800a038:	ab03      	add	r3, sp, #12
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	462a      	mov	r2, r5
 800a03e:	4b16      	ldr	r3, [pc, #88]	; (800a098 <_vfiprintf_r+0x258>)
 800a040:	a904      	add	r1, sp, #16
 800a042:	4630      	mov	r0, r6
 800a044:	f7fc f83c 	bl	80060c0 <_printf_float>
 800a048:	4607      	mov	r7, r0
 800a04a:	1c78      	adds	r0, r7, #1
 800a04c:	d1d6      	bne.n	8009ffc <_vfiprintf_r+0x1bc>
 800a04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a050:	07d9      	lsls	r1, r3, #31
 800a052:	d405      	bmi.n	800a060 <_vfiprintf_r+0x220>
 800a054:	89ab      	ldrh	r3, [r5, #12]
 800a056:	059a      	lsls	r2, r3, #22
 800a058:	d402      	bmi.n	800a060 <_vfiprintf_r+0x220>
 800a05a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a05c:	f000 faa1 	bl	800a5a2 <__retarget_lock_release_recursive>
 800a060:	89ab      	ldrh	r3, [r5, #12]
 800a062:	065b      	lsls	r3, r3, #25
 800a064:	f53f af12 	bmi.w	8009e8c <_vfiprintf_r+0x4c>
 800a068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a06a:	e711      	b.n	8009e90 <_vfiprintf_r+0x50>
 800a06c:	ab03      	add	r3, sp, #12
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	462a      	mov	r2, r5
 800a072:	4b09      	ldr	r3, [pc, #36]	; (800a098 <_vfiprintf_r+0x258>)
 800a074:	a904      	add	r1, sp, #16
 800a076:	4630      	mov	r0, r6
 800a078:	f7fc fac6 	bl	8006608 <_printf_i>
 800a07c:	e7e4      	b.n	800a048 <_vfiprintf_r+0x208>
 800a07e:	bf00      	nop
 800a080:	0800bac4 	.word	0x0800bac4
 800a084:	0800bae4 	.word	0x0800bae4
 800a088:	0800baa4 	.word	0x0800baa4
 800a08c:	0800ba54 	.word	0x0800ba54
 800a090:	0800ba5e 	.word	0x0800ba5e
 800a094:	080060c1 	.word	0x080060c1
 800a098:	08009e1d 	.word	0x08009e1d
 800a09c:	0800ba5a 	.word	0x0800ba5a

0800a0a0 <__swbuf_r>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	460e      	mov	r6, r1
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	b118      	cbz	r0, 800a0b2 <__swbuf_r+0x12>
 800a0aa:	6983      	ldr	r3, [r0, #24]
 800a0ac:	b90b      	cbnz	r3, 800a0b2 <__swbuf_r+0x12>
 800a0ae:	f000 f9d9 	bl	800a464 <__sinit>
 800a0b2:	4b21      	ldr	r3, [pc, #132]	; (800a138 <__swbuf_r+0x98>)
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	d12b      	bne.n	800a110 <__swbuf_r+0x70>
 800a0b8:	686c      	ldr	r4, [r5, #4]
 800a0ba:	69a3      	ldr	r3, [r4, #24]
 800a0bc:	60a3      	str	r3, [r4, #8]
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	071a      	lsls	r2, r3, #28
 800a0c2:	d52f      	bpl.n	800a124 <__swbuf_r+0x84>
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	b36b      	cbz	r3, 800a124 <__swbuf_r+0x84>
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	6820      	ldr	r0, [r4, #0]
 800a0cc:	1ac0      	subs	r0, r0, r3
 800a0ce:	6963      	ldr	r3, [r4, #20]
 800a0d0:	b2f6      	uxtb	r6, r6
 800a0d2:	4283      	cmp	r3, r0
 800a0d4:	4637      	mov	r7, r6
 800a0d6:	dc04      	bgt.n	800a0e2 <__swbuf_r+0x42>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f000 f92e 	bl	800a33c <_fflush_r>
 800a0e0:	bb30      	cbnz	r0, 800a130 <__swbuf_r+0x90>
 800a0e2:	68a3      	ldr	r3, [r4, #8]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	60a3      	str	r3, [r4, #8]
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	6022      	str	r2, [r4, #0]
 800a0ee:	701e      	strb	r6, [r3, #0]
 800a0f0:	6963      	ldr	r3, [r4, #20]
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	4283      	cmp	r3, r0
 800a0f6:	d004      	beq.n	800a102 <__swbuf_r+0x62>
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	07db      	lsls	r3, r3, #31
 800a0fc:	d506      	bpl.n	800a10c <__swbuf_r+0x6c>
 800a0fe:	2e0a      	cmp	r6, #10
 800a100:	d104      	bne.n	800a10c <__swbuf_r+0x6c>
 800a102:	4621      	mov	r1, r4
 800a104:	4628      	mov	r0, r5
 800a106:	f000 f919 	bl	800a33c <_fflush_r>
 800a10a:	b988      	cbnz	r0, 800a130 <__swbuf_r+0x90>
 800a10c:	4638      	mov	r0, r7
 800a10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a110:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <__swbuf_r+0x9c>)
 800a112:	429c      	cmp	r4, r3
 800a114:	d101      	bne.n	800a11a <__swbuf_r+0x7a>
 800a116:	68ac      	ldr	r4, [r5, #8]
 800a118:	e7cf      	b.n	800a0ba <__swbuf_r+0x1a>
 800a11a:	4b09      	ldr	r3, [pc, #36]	; (800a140 <__swbuf_r+0xa0>)
 800a11c:	429c      	cmp	r4, r3
 800a11e:	bf08      	it	eq
 800a120:	68ec      	ldreq	r4, [r5, #12]
 800a122:	e7ca      	b.n	800a0ba <__swbuf_r+0x1a>
 800a124:	4621      	mov	r1, r4
 800a126:	4628      	mov	r0, r5
 800a128:	f000 f80c 	bl	800a144 <__swsetup_r>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d0cb      	beq.n	800a0c8 <__swbuf_r+0x28>
 800a130:	f04f 37ff 	mov.w	r7, #4294967295
 800a134:	e7ea      	b.n	800a10c <__swbuf_r+0x6c>
 800a136:	bf00      	nop
 800a138:	0800bac4 	.word	0x0800bac4
 800a13c:	0800bae4 	.word	0x0800bae4
 800a140:	0800baa4 	.word	0x0800baa4

0800a144 <__swsetup_r>:
 800a144:	4b32      	ldr	r3, [pc, #200]	; (800a210 <__swsetup_r+0xcc>)
 800a146:	b570      	push	{r4, r5, r6, lr}
 800a148:	681d      	ldr	r5, [r3, #0]
 800a14a:	4606      	mov	r6, r0
 800a14c:	460c      	mov	r4, r1
 800a14e:	b125      	cbz	r5, 800a15a <__swsetup_r+0x16>
 800a150:	69ab      	ldr	r3, [r5, #24]
 800a152:	b913      	cbnz	r3, 800a15a <__swsetup_r+0x16>
 800a154:	4628      	mov	r0, r5
 800a156:	f000 f985 	bl	800a464 <__sinit>
 800a15a:	4b2e      	ldr	r3, [pc, #184]	; (800a214 <__swsetup_r+0xd0>)
 800a15c:	429c      	cmp	r4, r3
 800a15e:	d10f      	bne.n	800a180 <__swsetup_r+0x3c>
 800a160:	686c      	ldr	r4, [r5, #4]
 800a162:	89a3      	ldrh	r3, [r4, #12]
 800a164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a168:	0719      	lsls	r1, r3, #28
 800a16a:	d42c      	bmi.n	800a1c6 <__swsetup_r+0x82>
 800a16c:	06dd      	lsls	r5, r3, #27
 800a16e:	d411      	bmi.n	800a194 <__swsetup_r+0x50>
 800a170:	2309      	movs	r3, #9
 800a172:	6033      	str	r3, [r6, #0]
 800a174:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	f04f 30ff 	mov.w	r0, #4294967295
 800a17e:	e03e      	b.n	800a1fe <__swsetup_r+0xba>
 800a180:	4b25      	ldr	r3, [pc, #148]	; (800a218 <__swsetup_r+0xd4>)
 800a182:	429c      	cmp	r4, r3
 800a184:	d101      	bne.n	800a18a <__swsetup_r+0x46>
 800a186:	68ac      	ldr	r4, [r5, #8]
 800a188:	e7eb      	b.n	800a162 <__swsetup_r+0x1e>
 800a18a:	4b24      	ldr	r3, [pc, #144]	; (800a21c <__swsetup_r+0xd8>)
 800a18c:	429c      	cmp	r4, r3
 800a18e:	bf08      	it	eq
 800a190:	68ec      	ldreq	r4, [r5, #12]
 800a192:	e7e6      	b.n	800a162 <__swsetup_r+0x1e>
 800a194:	0758      	lsls	r0, r3, #29
 800a196:	d512      	bpl.n	800a1be <__swsetup_r+0x7a>
 800a198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a19a:	b141      	cbz	r1, 800a1ae <__swsetup_r+0x6a>
 800a19c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a0:	4299      	cmp	r1, r3
 800a1a2:	d002      	beq.n	800a1aa <__swsetup_r+0x66>
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff fb25 	bl	80097f4 <_free_r>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1b4:	81a3      	strh	r3, [r4, #12]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	6063      	str	r3, [r4, #4]
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	f043 0308 	orr.w	r3, r3, #8
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	6923      	ldr	r3, [r4, #16]
 800a1c8:	b94b      	cbnz	r3, 800a1de <__swsetup_r+0x9a>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d4:	d003      	beq.n	800a1de <__swsetup_r+0x9a>
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f000 fa09 	bl	800a5f0 <__smakebuf_r>
 800a1de:	89a0      	ldrh	r0, [r4, #12]
 800a1e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1e4:	f010 0301 	ands.w	r3, r0, #1
 800a1e8:	d00a      	beq.n	800a200 <__swsetup_r+0xbc>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60a3      	str	r3, [r4, #8]
 800a1ee:	6963      	ldr	r3, [r4, #20]
 800a1f0:	425b      	negs	r3, r3
 800a1f2:	61a3      	str	r3, [r4, #24]
 800a1f4:	6923      	ldr	r3, [r4, #16]
 800a1f6:	b943      	cbnz	r3, 800a20a <__swsetup_r+0xc6>
 800a1f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1fc:	d1ba      	bne.n	800a174 <__swsetup_r+0x30>
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	0781      	lsls	r1, r0, #30
 800a202:	bf58      	it	pl
 800a204:	6963      	ldrpl	r3, [r4, #20]
 800a206:	60a3      	str	r3, [r4, #8]
 800a208:	e7f4      	b.n	800a1f4 <__swsetup_r+0xb0>
 800a20a:	2000      	movs	r0, #0
 800a20c:	e7f7      	b.n	800a1fe <__swsetup_r+0xba>
 800a20e:	bf00      	nop
 800a210:	20000030 	.word	0x20000030
 800a214:	0800bac4 	.word	0x0800bac4
 800a218:	0800bae4 	.word	0x0800bae4
 800a21c:	0800baa4 	.word	0x0800baa4

0800a220 <abort>:
 800a220:	b508      	push	{r3, lr}
 800a222:	2006      	movs	r0, #6
 800a224:	f000 fa54 	bl	800a6d0 <raise>
 800a228:	2001      	movs	r0, #1
 800a22a:	f7f8 fa8b 	bl	8002744 <_exit>
	...

0800a230 <__sflush_r>:
 800a230:	898a      	ldrh	r2, [r1, #12]
 800a232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a236:	4605      	mov	r5, r0
 800a238:	0710      	lsls	r0, r2, #28
 800a23a:	460c      	mov	r4, r1
 800a23c:	d458      	bmi.n	800a2f0 <__sflush_r+0xc0>
 800a23e:	684b      	ldr	r3, [r1, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	dc05      	bgt.n	800a250 <__sflush_r+0x20>
 800a244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a246:	2b00      	cmp	r3, #0
 800a248:	dc02      	bgt.n	800a250 <__sflush_r+0x20>
 800a24a:	2000      	movs	r0, #0
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a252:	2e00      	cmp	r6, #0
 800a254:	d0f9      	beq.n	800a24a <__sflush_r+0x1a>
 800a256:	2300      	movs	r3, #0
 800a258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a25c:	682f      	ldr	r7, [r5, #0]
 800a25e:	602b      	str	r3, [r5, #0]
 800a260:	d032      	beq.n	800a2c8 <__sflush_r+0x98>
 800a262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	075a      	lsls	r2, r3, #29
 800a268:	d505      	bpl.n	800a276 <__sflush_r+0x46>
 800a26a:	6863      	ldr	r3, [r4, #4]
 800a26c:	1ac0      	subs	r0, r0, r3
 800a26e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a270:	b10b      	cbz	r3, 800a276 <__sflush_r+0x46>
 800a272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a274:	1ac0      	subs	r0, r0, r3
 800a276:	2300      	movs	r3, #0
 800a278:	4602      	mov	r2, r0
 800a27a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a27c:	6a21      	ldr	r1, [r4, #32]
 800a27e:	4628      	mov	r0, r5
 800a280:	47b0      	blx	r6
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	d106      	bne.n	800a296 <__sflush_r+0x66>
 800a288:	6829      	ldr	r1, [r5, #0]
 800a28a:	291d      	cmp	r1, #29
 800a28c:	d82c      	bhi.n	800a2e8 <__sflush_r+0xb8>
 800a28e:	4a2a      	ldr	r2, [pc, #168]	; (800a338 <__sflush_r+0x108>)
 800a290:	40ca      	lsrs	r2, r1
 800a292:	07d6      	lsls	r6, r2, #31
 800a294:	d528      	bpl.n	800a2e8 <__sflush_r+0xb8>
 800a296:	2200      	movs	r2, #0
 800a298:	6062      	str	r2, [r4, #4]
 800a29a:	04d9      	lsls	r1, r3, #19
 800a29c:	6922      	ldr	r2, [r4, #16]
 800a29e:	6022      	str	r2, [r4, #0]
 800a2a0:	d504      	bpl.n	800a2ac <__sflush_r+0x7c>
 800a2a2:	1c42      	adds	r2, r0, #1
 800a2a4:	d101      	bne.n	800a2aa <__sflush_r+0x7a>
 800a2a6:	682b      	ldr	r3, [r5, #0]
 800a2a8:	b903      	cbnz	r3, 800a2ac <__sflush_r+0x7c>
 800a2aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a2ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ae:	602f      	str	r7, [r5, #0]
 800a2b0:	2900      	cmp	r1, #0
 800a2b2:	d0ca      	beq.n	800a24a <__sflush_r+0x1a>
 800a2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2b8:	4299      	cmp	r1, r3
 800a2ba:	d002      	beq.n	800a2c2 <__sflush_r+0x92>
 800a2bc:	4628      	mov	r0, r5
 800a2be:	f7ff fa99 	bl	80097f4 <_free_r>
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a2c6:	e7c1      	b.n	800a24c <__sflush_r+0x1c>
 800a2c8:	6a21      	ldr	r1, [r4, #32]
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	47b0      	blx	r6
 800a2d0:	1c41      	adds	r1, r0, #1
 800a2d2:	d1c7      	bne.n	800a264 <__sflush_r+0x34>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0c4      	beq.n	800a264 <__sflush_r+0x34>
 800a2da:	2b1d      	cmp	r3, #29
 800a2dc:	d001      	beq.n	800a2e2 <__sflush_r+0xb2>
 800a2de:	2b16      	cmp	r3, #22
 800a2e0:	d101      	bne.n	800a2e6 <__sflush_r+0xb6>
 800a2e2:	602f      	str	r7, [r5, #0]
 800a2e4:	e7b1      	b.n	800a24a <__sflush_r+0x1a>
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ec:	81a3      	strh	r3, [r4, #12]
 800a2ee:	e7ad      	b.n	800a24c <__sflush_r+0x1c>
 800a2f0:	690f      	ldr	r7, [r1, #16]
 800a2f2:	2f00      	cmp	r7, #0
 800a2f4:	d0a9      	beq.n	800a24a <__sflush_r+0x1a>
 800a2f6:	0793      	lsls	r3, r2, #30
 800a2f8:	680e      	ldr	r6, [r1, #0]
 800a2fa:	bf08      	it	eq
 800a2fc:	694b      	ldreq	r3, [r1, #20]
 800a2fe:	600f      	str	r7, [r1, #0]
 800a300:	bf18      	it	ne
 800a302:	2300      	movne	r3, #0
 800a304:	eba6 0807 	sub.w	r8, r6, r7
 800a308:	608b      	str	r3, [r1, #8]
 800a30a:	f1b8 0f00 	cmp.w	r8, #0
 800a30e:	dd9c      	ble.n	800a24a <__sflush_r+0x1a>
 800a310:	6a21      	ldr	r1, [r4, #32]
 800a312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a314:	4643      	mov	r3, r8
 800a316:	463a      	mov	r2, r7
 800a318:	4628      	mov	r0, r5
 800a31a:	47b0      	blx	r6
 800a31c:	2800      	cmp	r0, #0
 800a31e:	dc06      	bgt.n	800a32e <__sflush_r+0xfe>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a326:	81a3      	strh	r3, [r4, #12]
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
 800a32c:	e78e      	b.n	800a24c <__sflush_r+0x1c>
 800a32e:	4407      	add	r7, r0
 800a330:	eba8 0800 	sub.w	r8, r8, r0
 800a334:	e7e9      	b.n	800a30a <__sflush_r+0xda>
 800a336:	bf00      	nop
 800a338:	20400001 	.word	0x20400001

0800a33c <_fflush_r>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	690b      	ldr	r3, [r1, #16]
 800a340:	4605      	mov	r5, r0
 800a342:	460c      	mov	r4, r1
 800a344:	b913      	cbnz	r3, 800a34c <_fflush_r+0x10>
 800a346:	2500      	movs	r5, #0
 800a348:	4628      	mov	r0, r5
 800a34a:	bd38      	pop	{r3, r4, r5, pc}
 800a34c:	b118      	cbz	r0, 800a356 <_fflush_r+0x1a>
 800a34e:	6983      	ldr	r3, [r0, #24]
 800a350:	b90b      	cbnz	r3, 800a356 <_fflush_r+0x1a>
 800a352:	f000 f887 	bl	800a464 <__sinit>
 800a356:	4b14      	ldr	r3, [pc, #80]	; (800a3a8 <_fflush_r+0x6c>)
 800a358:	429c      	cmp	r4, r3
 800a35a:	d11b      	bne.n	800a394 <_fflush_r+0x58>
 800a35c:	686c      	ldr	r4, [r5, #4]
 800a35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0ef      	beq.n	800a346 <_fflush_r+0xa>
 800a366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a368:	07d0      	lsls	r0, r2, #31
 800a36a:	d404      	bmi.n	800a376 <_fflush_r+0x3a>
 800a36c:	0599      	lsls	r1, r3, #22
 800a36e:	d402      	bmi.n	800a376 <_fflush_r+0x3a>
 800a370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a372:	f000 f915 	bl	800a5a0 <__retarget_lock_acquire_recursive>
 800a376:	4628      	mov	r0, r5
 800a378:	4621      	mov	r1, r4
 800a37a:	f7ff ff59 	bl	800a230 <__sflush_r>
 800a37e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a380:	07da      	lsls	r2, r3, #31
 800a382:	4605      	mov	r5, r0
 800a384:	d4e0      	bmi.n	800a348 <_fflush_r+0xc>
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	059b      	lsls	r3, r3, #22
 800a38a:	d4dd      	bmi.n	800a348 <_fflush_r+0xc>
 800a38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a38e:	f000 f908 	bl	800a5a2 <__retarget_lock_release_recursive>
 800a392:	e7d9      	b.n	800a348 <_fflush_r+0xc>
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <_fflush_r+0x70>)
 800a396:	429c      	cmp	r4, r3
 800a398:	d101      	bne.n	800a39e <_fflush_r+0x62>
 800a39a:	68ac      	ldr	r4, [r5, #8]
 800a39c:	e7df      	b.n	800a35e <_fflush_r+0x22>
 800a39e:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <_fflush_r+0x74>)
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	bf08      	it	eq
 800a3a4:	68ec      	ldreq	r4, [r5, #12]
 800a3a6:	e7da      	b.n	800a35e <_fflush_r+0x22>
 800a3a8:	0800bac4 	.word	0x0800bac4
 800a3ac:	0800bae4 	.word	0x0800bae4
 800a3b0:	0800baa4 	.word	0x0800baa4

0800a3b4 <std>:
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	b510      	push	{r4, lr}
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a3be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3c2:	6083      	str	r3, [r0, #8]
 800a3c4:	8181      	strh	r1, [r0, #12]
 800a3c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a3c8:	81c2      	strh	r2, [r0, #14]
 800a3ca:	6183      	str	r3, [r0, #24]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	2208      	movs	r2, #8
 800a3d0:	305c      	adds	r0, #92	; 0x5c
 800a3d2:	f7fb fdcd 	bl	8005f70 <memset>
 800a3d6:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <std+0x38>)
 800a3d8:	6263      	str	r3, [r4, #36]	; 0x24
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <std+0x3c>)
 800a3dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3de:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <std+0x40>)
 800a3e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <std+0x44>)
 800a3e4:	6224      	str	r4, [r4, #32]
 800a3e6:	6323      	str	r3, [r4, #48]	; 0x30
 800a3e8:	bd10      	pop	{r4, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0800a709 	.word	0x0800a709
 800a3f0:	0800a72b 	.word	0x0800a72b
 800a3f4:	0800a763 	.word	0x0800a763
 800a3f8:	0800a787 	.word	0x0800a787

0800a3fc <_cleanup_r>:
 800a3fc:	4901      	ldr	r1, [pc, #4]	; (800a404 <_cleanup_r+0x8>)
 800a3fe:	f000 b8af 	b.w	800a560 <_fwalk_reent>
 800a402:	bf00      	nop
 800a404:	0800a33d 	.word	0x0800a33d

0800a408 <__sfmoreglue>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	2268      	movs	r2, #104	; 0x68
 800a40c:	1e4d      	subs	r5, r1, #1
 800a40e:	4355      	muls	r5, r2
 800a410:	460e      	mov	r6, r1
 800a412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a416:	f7ff fa59 	bl	80098cc <_malloc_r>
 800a41a:	4604      	mov	r4, r0
 800a41c:	b140      	cbz	r0, 800a430 <__sfmoreglue+0x28>
 800a41e:	2100      	movs	r1, #0
 800a420:	e9c0 1600 	strd	r1, r6, [r0]
 800a424:	300c      	adds	r0, #12
 800a426:	60a0      	str	r0, [r4, #8]
 800a428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a42c:	f7fb fda0 	bl	8005f70 <memset>
 800a430:	4620      	mov	r0, r4
 800a432:	bd70      	pop	{r4, r5, r6, pc}

0800a434 <__sfp_lock_acquire>:
 800a434:	4801      	ldr	r0, [pc, #4]	; (800a43c <__sfp_lock_acquire+0x8>)
 800a436:	f000 b8b3 	b.w	800a5a0 <__retarget_lock_acquire_recursive>
 800a43a:	bf00      	nop
 800a43c:	200007d9 	.word	0x200007d9

0800a440 <__sfp_lock_release>:
 800a440:	4801      	ldr	r0, [pc, #4]	; (800a448 <__sfp_lock_release+0x8>)
 800a442:	f000 b8ae 	b.w	800a5a2 <__retarget_lock_release_recursive>
 800a446:	bf00      	nop
 800a448:	200007d9 	.word	0x200007d9

0800a44c <__sinit_lock_acquire>:
 800a44c:	4801      	ldr	r0, [pc, #4]	; (800a454 <__sinit_lock_acquire+0x8>)
 800a44e:	f000 b8a7 	b.w	800a5a0 <__retarget_lock_acquire_recursive>
 800a452:	bf00      	nop
 800a454:	200007da 	.word	0x200007da

0800a458 <__sinit_lock_release>:
 800a458:	4801      	ldr	r0, [pc, #4]	; (800a460 <__sinit_lock_release+0x8>)
 800a45a:	f000 b8a2 	b.w	800a5a2 <__retarget_lock_release_recursive>
 800a45e:	bf00      	nop
 800a460:	200007da 	.word	0x200007da

0800a464 <__sinit>:
 800a464:	b510      	push	{r4, lr}
 800a466:	4604      	mov	r4, r0
 800a468:	f7ff fff0 	bl	800a44c <__sinit_lock_acquire>
 800a46c:	69a3      	ldr	r3, [r4, #24]
 800a46e:	b11b      	cbz	r3, 800a478 <__sinit+0x14>
 800a470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a474:	f7ff bff0 	b.w	800a458 <__sinit_lock_release>
 800a478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a47c:	6523      	str	r3, [r4, #80]	; 0x50
 800a47e:	4b13      	ldr	r3, [pc, #76]	; (800a4cc <__sinit+0x68>)
 800a480:	4a13      	ldr	r2, [pc, #76]	; (800a4d0 <__sinit+0x6c>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	62a2      	str	r2, [r4, #40]	; 0x28
 800a486:	42a3      	cmp	r3, r4
 800a488:	bf04      	itt	eq
 800a48a:	2301      	moveq	r3, #1
 800a48c:	61a3      	streq	r3, [r4, #24]
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 f820 	bl	800a4d4 <__sfp>
 800a494:	6060      	str	r0, [r4, #4]
 800a496:	4620      	mov	r0, r4
 800a498:	f000 f81c 	bl	800a4d4 <__sfp>
 800a49c:	60a0      	str	r0, [r4, #8]
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 f818 	bl	800a4d4 <__sfp>
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	60e0      	str	r0, [r4, #12]
 800a4a8:	2104      	movs	r1, #4
 800a4aa:	6860      	ldr	r0, [r4, #4]
 800a4ac:	f7ff ff82 	bl	800a3b4 <std>
 800a4b0:	68a0      	ldr	r0, [r4, #8]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	2109      	movs	r1, #9
 800a4b6:	f7ff ff7d 	bl	800a3b4 <std>
 800a4ba:	68e0      	ldr	r0, [r4, #12]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	2112      	movs	r1, #18
 800a4c0:	f7ff ff78 	bl	800a3b4 <std>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	61a3      	str	r3, [r4, #24]
 800a4c8:	e7d2      	b.n	800a470 <__sinit+0xc>
 800a4ca:	bf00      	nop
 800a4cc:	0800b65c 	.word	0x0800b65c
 800a4d0:	0800a3fd 	.word	0x0800a3fd

0800a4d4 <__sfp>:
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	4607      	mov	r7, r0
 800a4d8:	f7ff ffac 	bl	800a434 <__sfp_lock_acquire>
 800a4dc:	4b1e      	ldr	r3, [pc, #120]	; (800a558 <__sfp+0x84>)
 800a4de:	681e      	ldr	r6, [r3, #0]
 800a4e0:	69b3      	ldr	r3, [r6, #24]
 800a4e2:	b913      	cbnz	r3, 800a4ea <__sfp+0x16>
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7ff ffbd 	bl	800a464 <__sinit>
 800a4ea:	3648      	adds	r6, #72	; 0x48
 800a4ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	d503      	bpl.n	800a4fc <__sfp+0x28>
 800a4f4:	6833      	ldr	r3, [r6, #0]
 800a4f6:	b30b      	cbz	r3, 800a53c <__sfp+0x68>
 800a4f8:	6836      	ldr	r6, [r6, #0]
 800a4fa:	e7f7      	b.n	800a4ec <__sfp+0x18>
 800a4fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a500:	b9d5      	cbnz	r5, 800a538 <__sfp+0x64>
 800a502:	4b16      	ldr	r3, [pc, #88]	; (800a55c <__sfp+0x88>)
 800a504:	60e3      	str	r3, [r4, #12]
 800a506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a50a:	6665      	str	r5, [r4, #100]	; 0x64
 800a50c:	f000 f847 	bl	800a59e <__retarget_lock_init_recursive>
 800a510:	f7ff ff96 	bl	800a440 <__sfp_lock_release>
 800a514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a51c:	6025      	str	r5, [r4, #0]
 800a51e:	61a5      	str	r5, [r4, #24]
 800a520:	2208      	movs	r2, #8
 800a522:	4629      	mov	r1, r5
 800a524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a528:	f7fb fd22 	bl	8005f70 <memset>
 800a52c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a534:	4620      	mov	r0, r4
 800a536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a538:	3468      	adds	r4, #104	; 0x68
 800a53a:	e7d9      	b.n	800a4f0 <__sfp+0x1c>
 800a53c:	2104      	movs	r1, #4
 800a53e:	4638      	mov	r0, r7
 800a540:	f7ff ff62 	bl	800a408 <__sfmoreglue>
 800a544:	4604      	mov	r4, r0
 800a546:	6030      	str	r0, [r6, #0]
 800a548:	2800      	cmp	r0, #0
 800a54a:	d1d5      	bne.n	800a4f8 <__sfp+0x24>
 800a54c:	f7ff ff78 	bl	800a440 <__sfp_lock_release>
 800a550:	230c      	movs	r3, #12
 800a552:	603b      	str	r3, [r7, #0]
 800a554:	e7ee      	b.n	800a534 <__sfp+0x60>
 800a556:	bf00      	nop
 800a558:	0800b65c 	.word	0x0800b65c
 800a55c:	ffff0001 	.word	0xffff0001

0800a560 <_fwalk_reent>:
 800a560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a564:	4606      	mov	r6, r0
 800a566:	4688      	mov	r8, r1
 800a568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a56c:	2700      	movs	r7, #0
 800a56e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a572:	f1b9 0901 	subs.w	r9, r9, #1
 800a576:	d505      	bpl.n	800a584 <_fwalk_reent+0x24>
 800a578:	6824      	ldr	r4, [r4, #0]
 800a57a:	2c00      	cmp	r4, #0
 800a57c:	d1f7      	bne.n	800a56e <_fwalk_reent+0xe>
 800a57e:	4638      	mov	r0, r7
 800a580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a584:	89ab      	ldrh	r3, [r5, #12]
 800a586:	2b01      	cmp	r3, #1
 800a588:	d907      	bls.n	800a59a <_fwalk_reent+0x3a>
 800a58a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a58e:	3301      	adds	r3, #1
 800a590:	d003      	beq.n	800a59a <_fwalk_reent+0x3a>
 800a592:	4629      	mov	r1, r5
 800a594:	4630      	mov	r0, r6
 800a596:	47c0      	blx	r8
 800a598:	4307      	orrs	r7, r0
 800a59a:	3568      	adds	r5, #104	; 0x68
 800a59c:	e7e9      	b.n	800a572 <_fwalk_reent+0x12>

0800a59e <__retarget_lock_init_recursive>:
 800a59e:	4770      	bx	lr

0800a5a0 <__retarget_lock_acquire_recursive>:
 800a5a0:	4770      	bx	lr

0800a5a2 <__retarget_lock_release_recursive>:
 800a5a2:	4770      	bx	lr

0800a5a4 <__swhatbuf_r>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	460e      	mov	r6, r1
 800a5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ac:	2900      	cmp	r1, #0
 800a5ae:	b096      	sub	sp, #88	; 0x58
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	461d      	mov	r5, r3
 800a5b4:	da08      	bge.n	800a5c8 <__swhatbuf_r+0x24>
 800a5b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	602a      	str	r2, [r5, #0]
 800a5be:	061a      	lsls	r2, r3, #24
 800a5c0:	d410      	bmi.n	800a5e4 <__swhatbuf_r+0x40>
 800a5c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5c6:	e00e      	b.n	800a5e6 <__swhatbuf_r+0x42>
 800a5c8:	466a      	mov	r2, sp
 800a5ca:	f000 f903 	bl	800a7d4 <_fstat_r>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	dbf1      	blt.n	800a5b6 <__swhatbuf_r+0x12>
 800a5d2:	9a01      	ldr	r2, [sp, #4]
 800a5d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5dc:	425a      	negs	r2, r3
 800a5de:	415a      	adcs	r2, r3
 800a5e0:	602a      	str	r2, [r5, #0]
 800a5e2:	e7ee      	b.n	800a5c2 <__swhatbuf_r+0x1e>
 800a5e4:	2340      	movs	r3, #64	; 0x40
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	b016      	add	sp, #88	; 0x58
 800a5ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5f0 <__smakebuf_r>:
 800a5f0:	898b      	ldrh	r3, [r1, #12]
 800a5f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5f4:	079d      	lsls	r5, r3, #30
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	d507      	bpl.n	800a60c <__smakebuf_r+0x1c>
 800a5fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	6123      	str	r3, [r4, #16]
 800a604:	2301      	movs	r3, #1
 800a606:	6163      	str	r3, [r4, #20]
 800a608:	b002      	add	sp, #8
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	ab01      	add	r3, sp, #4
 800a60e:	466a      	mov	r2, sp
 800a610:	f7ff ffc8 	bl	800a5a4 <__swhatbuf_r>
 800a614:	9900      	ldr	r1, [sp, #0]
 800a616:	4605      	mov	r5, r0
 800a618:	4630      	mov	r0, r6
 800a61a:	f7ff f957 	bl	80098cc <_malloc_r>
 800a61e:	b948      	cbnz	r0, 800a634 <__smakebuf_r+0x44>
 800a620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a624:	059a      	lsls	r2, r3, #22
 800a626:	d4ef      	bmi.n	800a608 <__smakebuf_r+0x18>
 800a628:	f023 0303 	bic.w	r3, r3, #3
 800a62c:	f043 0302 	orr.w	r3, r3, #2
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	e7e3      	b.n	800a5fc <__smakebuf_r+0xc>
 800a634:	4b0d      	ldr	r3, [pc, #52]	; (800a66c <__smakebuf_r+0x7c>)
 800a636:	62b3      	str	r3, [r6, #40]	; 0x28
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	6020      	str	r0, [r4, #0]
 800a63c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	9b00      	ldr	r3, [sp, #0]
 800a644:	6163      	str	r3, [r4, #20]
 800a646:	9b01      	ldr	r3, [sp, #4]
 800a648:	6120      	str	r0, [r4, #16]
 800a64a:	b15b      	cbz	r3, 800a664 <__smakebuf_r+0x74>
 800a64c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a650:	4630      	mov	r0, r6
 800a652:	f000 f8d1 	bl	800a7f8 <_isatty_r>
 800a656:	b128      	cbz	r0, 800a664 <__smakebuf_r+0x74>
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	f023 0303 	bic.w	r3, r3, #3
 800a65e:	f043 0301 	orr.w	r3, r3, #1
 800a662:	81a3      	strh	r3, [r4, #12]
 800a664:	89a0      	ldrh	r0, [r4, #12]
 800a666:	4305      	orrs	r5, r0
 800a668:	81a5      	strh	r5, [r4, #12]
 800a66a:	e7cd      	b.n	800a608 <__smakebuf_r+0x18>
 800a66c:	0800a3fd 	.word	0x0800a3fd

0800a670 <_malloc_usable_size_r>:
 800a670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a674:	1f18      	subs	r0, r3, #4
 800a676:	2b00      	cmp	r3, #0
 800a678:	bfbc      	itt	lt
 800a67a:	580b      	ldrlt	r3, [r1, r0]
 800a67c:	18c0      	addlt	r0, r0, r3
 800a67e:	4770      	bx	lr

0800a680 <_raise_r>:
 800a680:	291f      	cmp	r1, #31
 800a682:	b538      	push	{r3, r4, r5, lr}
 800a684:	4604      	mov	r4, r0
 800a686:	460d      	mov	r5, r1
 800a688:	d904      	bls.n	800a694 <_raise_r+0x14>
 800a68a:	2316      	movs	r3, #22
 800a68c:	6003      	str	r3, [r0, #0]
 800a68e:	f04f 30ff 	mov.w	r0, #4294967295
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a696:	b112      	cbz	r2, 800a69e <_raise_r+0x1e>
 800a698:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a69c:	b94b      	cbnz	r3, 800a6b2 <_raise_r+0x32>
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 f830 	bl	800a704 <_getpid_r>
 800a6a4:	462a      	mov	r2, r5
 800a6a6:	4601      	mov	r1, r0
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ae:	f000 b817 	b.w	800a6e0 <_kill_r>
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d00a      	beq.n	800a6cc <_raise_r+0x4c>
 800a6b6:	1c59      	adds	r1, r3, #1
 800a6b8:	d103      	bne.n	800a6c2 <_raise_r+0x42>
 800a6ba:	2316      	movs	r3, #22
 800a6bc:	6003      	str	r3, [r0, #0]
 800a6be:	2001      	movs	r0, #1
 800a6c0:	e7e7      	b.n	800a692 <_raise_r+0x12>
 800a6c2:	2400      	movs	r4, #0
 800a6c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	4798      	blx	r3
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	e7e0      	b.n	800a692 <_raise_r+0x12>

0800a6d0 <raise>:
 800a6d0:	4b02      	ldr	r3, [pc, #8]	; (800a6dc <raise+0xc>)
 800a6d2:	4601      	mov	r1, r0
 800a6d4:	6818      	ldr	r0, [r3, #0]
 800a6d6:	f7ff bfd3 	b.w	800a680 <_raise_r>
 800a6da:	bf00      	nop
 800a6dc:	20000030 	.word	0x20000030

0800a6e0 <_kill_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4d07      	ldr	r5, [pc, #28]	; (800a700 <_kill_r+0x20>)
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	602b      	str	r3, [r5, #0]
 800a6ee:	f7f8 f819 	bl	8002724 <_kill>
 800a6f2:	1c43      	adds	r3, r0, #1
 800a6f4:	d102      	bne.n	800a6fc <_kill_r+0x1c>
 800a6f6:	682b      	ldr	r3, [r5, #0]
 800a6f8:	b103      	cbz	r3, 800a6fc <_kill_r+0x1c>
 800a6fa:	6023      	str	r3, [r4, #0]
 800a6fc:	bd38      	pop	{r3, r4, r5, pc}
 800a6fe:	bf00      	nop
 800a700:	200007d4 	.word	0x200007d4

0800a704 <_getpid_r>:
 800a704:	f7f8 b806 	b.w	8002714 <_getpid>

0800a708 <__sread>:
 800a708:	b510      	push	{r4, lr}
 800a70a:	460c      	mov	r4, r1
 800a70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a710:	f000 f894 	bl	800a83c <_read_r>
 800a714:	2800      	cmp	r0, #0
 800a716:	bfab      	itete	ge
 800a718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a71a:	89a3      	ldrhlt	r3, [r4, #12]
 800a71c:	181b      	addge	r3, r3, r0
 800a71e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a722:	bfac      	ite	ge
 800a724:	6563      	strge	r3, [r4, #84]	; 0x54
 800a726:	81a3      	strhlt	r3, [r4, #12]
 800a728:	bd10      	pop	{r4, pc}

0800a72a <__swrite>:
 800a72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a72e:	461f      	mov	r7, r3
 800a730:	898b      	ldrh	r3, [r1, #12]
 800a732:	05db      	lsls	r3, r3, #23
 800a734:	4605      	mov	r5, r0
 800a736:	460c      	mov	r4, r1
 800a738:	4616      	mov	r6, r2
 800a73a:	d505      	bpl.n	800a748 <__swrite+0x1e>
 800a73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a740:	2302      	movs	r3, #2
 800a742:	2200      	movs	r2, #0
 800a744:	f000 f868 	bl	800a818 <_lseek_r>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a74e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a752:	81a3      	strh	r3, [r4, #12]
 800a754:	4632      	mov	r2, r6
 800a756:	463b      	mov	r3, r7
 800a758:	4628      	mov	r0, r5
 800a75a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a75e:	f000 b817 	b.w	800a790 <_write_r>

0800a762 <__sseek>:
 800a762:	b510      	push	{r4, lr}
 800a764:	460c      	mov	r4, r1
 800a766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76a:	f000 f855 	bl	800a818 <_lseek_r>
 800a76e:	1c43      	adds	r3, r0, #1
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	bf15      	itete	ne
 800a774:	6560      	strne	r0, [r4, #84]	; 0x54
 800a776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a77a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a77e:	81a3      	strheq	r3, [r4, #12]
 800a780:	bf18      	it	ne
 800a782:	81a3      	strhne	r3, [r4, #12]
 800a784:	bd10      	pop	{r4, pc}

0800a786 <__sclose>:
 800a786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a78a:	f000 b813 	b.w	800a7b4 <_close_r>
	...

0800a790 <_write_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d07      	ldr	r5, [pc, #28]	; (800a7b0 <_write_r+0x20>)
 800a794:	4604      	mov	r4, r0
 800a796:	4608      	mov	r0, r1
 800a798:	4611      	mov	r1, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	602a      	str	r2, [r5, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7f7 fff7 	bl	8002792 <_write>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_write_r+0x1e>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_write_r+0x1e>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	200007d4 	.word	0x200007d4

0800a7b4 <_close_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4d06      	ldr	r5, [pc, #24]	; (800a7d0 <_close_r+0x1c>)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	602b      	str	r3, [r5, #0]
 800a7c0:	f7f8 f803 	bl	80027ca <_close>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d102      	bne.n	800a7ce <_close_r+0x1a>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	b103      	cbz	r3, 800a7ce <_close_r+0x1a>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	200007d4 	.word	0x200007d4

0800a7d4 <_fstat_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4d07      	ldr	r5, [pc, #28]	; (800a7f4 <_fstat_r+0x20>)
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4604      	mov	r4, r0
 800a7dc:	4608      	mov	r0, r1
 800a7de:	4611      	mov	r1, r2
 800a7e0:	602b      	str	r3, [r5, #0]
 800a7e2:	f7f7 fffe 	bl	80027e2 <_fstat>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	d102      	bne.n	800a7f0 <_fstat_r+0x1c>
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	b103      	cbz	r3, 800a7f0 <_fstat_r+0x1c>
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	bd38      	pop	{r3, r4, r5, pc}
 800a7f2:	bf00      	nop
 800a7f4:	200007d4 	.word	0x200007d4

0800a7f8 <_isatty_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d06      	ldr	r5, [pc, #24]	; (800a814 <_isatty_r+0x1c>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	602b      	str	r3, [r5, #0]
 800a804:	f7f7 fffd 	bl	8002802 <_isatty>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_isatty_r+0x1a>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_isatty_r+0x1a>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	200007d4 	.word	0x200007d4

0800a818 <_lseek_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4d07      	ldr	r5, [pc, #28]	; (800a838 <_lseek_r+0x20>)
 800a81c:	4604      	mov	r4, r0
 800a81e:	4608      	mov	r0, r1
 800a820:	4611      	mov	r1, r2
 800a822:	2200      	movs	r2, #0
 800a824:	602a      	str	r2, [r5, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	f7f7 fff6 	bl	8002818 <_lseek>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_lseek_r+0x1e>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_lseek_r+0x1e>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	200007d4 	.word	0x200007d4

0800a83c <_read_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d07      	ldr	r5, [pc, #28]	; (800a85c <_read_r+0x20>)
 800a840:	4604      	mov	r4, r0
 800a842:	4608      	mov	r0, r1
 800a844:	4611      	mov	r1, r2
 800a846:	2200      	movs	r2, #0
 800a848:	602a      	str	r2, [r5, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	f7f7 ff84 	bl	8002758 <_read>
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	d102      	bne.n	800a85a <_read_r+0x1e>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	b103      	cbz	r3, 800a85a <_read_r+0x1e>
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	200007d4 	.word	0x200007d4

0800a860 <_init>:
 800a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a862:	bf00      	nop
 800a864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a866:	bc08      	pop	{r3}
 800a868:	469e      	mov	lr, r3
 800a86a:	4770      	bx	lr

0800a86c <_fini>:
 800a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86e:	bf00      	nop
 800a870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a872:	bc08      	pop	{r3}
 800a874:	469e      	mov	lr, r3
 800a876:	4770      	bx	lr
