
411_OneWire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000128c  0800ab90  0800ab90  0001ab90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be1c  0800be1c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800be1c  0800be1c  0001be1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be24  0800be24  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be24  0800be24  0001be24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be28  0800be28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800be2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000204  0800c030  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  0800c030  000207e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014343  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002968  00000000  00000000  00034577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00036ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  00038138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019677  00000000  00000000  000392a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001612b  00000000  00000000  00052917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e444  00000000  00000000  00068a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006424  00000000  00000000  00106ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab78 	.word	0x0800ab78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800ab78 	.word	0x0800ab78

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800103a:	b29b      	uxth	r3, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	605a      	str	r2, [r3, #4]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <usart_setup+0x60>)
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <usart_setup+0x64>)
 8001078:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <usart_setup+0x60>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <usart_setup+0x60>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <usart_setup+0x60>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <usart_setup+0x60>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <usart_setup+0x60>)
 8001094:	220c      	movs	r2, #12
 8001096:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <usart_setup+0x60>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <usart_setup+0x60>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <usart_setup+0x60>)
 80010a6:	f004 f9a9 	bl	80053fc <HAL_HalfDuplex_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d000      	beq.n	80010b2 <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80010b0:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <usart_setup+0x60>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <usart_setup+0x60>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0220 	orr.w	r2, r2, #32
 80010c0:	60da      	str	r2, [r3, #12]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000360 	.word	0x20000360
 80010d0:	40004400 	.word	0x40004400

080010d4 <owInit>:

void owInit(OneWire *ow) {
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80010e4:	e015      	b.n	8001112 <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
    k=0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 80010f4:	e007      	b.n	8001106 <owInit+0x32>
    r[k] = 0;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	3301      	adds	r3, #1
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2b07      	cmp	r3, #7
 800110a:	ddf4      	ble.n	80010f6 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	dde6      	ble.n	80010e6 <owInit+0x12>
  }
  k=0;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 800111c:	e008      	b.n	8001130 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4413      	add	r3, r2
 8001124:	330c      	adds	r3, #12
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	3301      	adds	r3, #1
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b07      	cmp	r3, #7
 8001134:	ddf3      	ble.n	800111e <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2240      	movs	r2, #64	; 0x40
 800113a:	609a      	str	r2, [r3, #8]

}
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <owReadHandler>:

void owReadHandler() { //USART interrupt handler
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 800114e:	f000 f850 	bl	80011f2 <getUsartIndex>
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  /* We check that we caused an interrupt due to RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <owReadHandler+0x70>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	2b00      	cmp	r3, #0
 8001160:	d025      	beq.n	80011ae <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <owReadHandler+0x70>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01f      	beq.n	80011ae <owReadHandler+0x66>

    /* We receive data from the periphery and reset the flag*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 800116e:	bf00      	nop
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <owReadHandler+0x70>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f9      	beq.n	8001170 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 800117c:	79fc      	ldrb	r4, [r7, #7]
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <owReadHandler+0x70>)
 8001180:	f7ff ff52 	bl	8001028 <USART_ReceiveData>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <owReadHandler+0x74>)
 800118a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//reset flag response received after
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2201      	movs	r2, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	b25b      	sxtb	r3, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	b25a      	sxtb	r2, r3
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <owReadHandler+0x78>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <owReadHandler+0x78>)
 80011ac:	701a      	strb	r2, [r3, #0]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40004400 	.word	0x40004400
 80011bc:	20000224 	.word	0x20000224
 80011c0:	20000220 	.word	0x20000220

080011c4 <owResetCmd>:
 *
 * @param N usart -- chosen to implement 1wire usart
 * @return Returns 1 if there is someone on the bus and 0 otherwise
 */

  uint16_t owResetCmd() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 80011ca:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80011ce:	f7ff ff4d 	bl	800106c <usart_setup>

  owSend(0xF0); // Send RESET send a reset pulse
 80011d2:	20f0      	movs	r0, #240	; 0xf0
 80011d4:	f000 f816 	bl	8001204 <owSend>
  owPresence = owEchoRead(); // We are waiting for PRESENCE on the bus and return what is
 80011d8:	f000 f854 	bl	8001284 <owEchoRead>
 80011dc:	4603      	mov	r3, r0
 80011de:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// reconfigure UART speed
 80011e0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80011e4:	f7ff ff42 	bl	800106c <usart_setup>
  return owPresence;
 80011e8:	88fb      	ldrh	r3, [r7, #6]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <getUsartIndex>:

uint8_t getUsartIndex() {// looks at the UART number with which work will go
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <owSend>:

void owSend(uint16_t data) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//set the flag if we get into the interrupt handler there it will be reset
 800120e:	f7ff fff0 	bl	80011f2 <getUsartIndex>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	2301      	movs	r3, #1
 8001218:	4093      	lsls	r3, r2
 800121a:	b25a      	sxtb	r2, r3
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <owSend+0x50>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	b25b      	sxtb	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b25b      	sxtb	r3, r3
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <owSend+0x50>)
 800122c:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//send data
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	4619      	mov	r1, r3
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <owSend+0x54>)
 8001234:	f7ff ff08 	bl	8001048 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//waiting for the transfer to end
 8001238:	bf00      	nop
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <owSend+0x58>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001244:	2b40      	cmp	r3, #64	; 0x40
 8001246:	d1f8      	bne.n	800123a <owSend+0x36>
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000220 	.word	0x20000220
 8001258:	40004400 	.word	0x40004400
 800125c:	20000360 	.word	0x20000360

08001260 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//we read we got a one or zero in response
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //if 0xFF came, then bit = 1, something else bit = 0
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	2bff      	cmp	r3, #255	; 0xff
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <owEchoRead>:

uint16_t owEchoRead() {//
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//get USART number
 800128a:	f7ff ffb2 	bl	80011f2 <getUsartIndex>
 800128e:	4603      	mov	r3, r0
 8001290:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// wait until someone answers but no more pause
 8001298:	bf00      	nop
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <owEchoRead+0x48>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	797b      	ldrb	r3, [r7, #5]
 80012a4:	fa42 f303 	asr.w	r3, r2, r3
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <owEchoRead+0x36>
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	80fa      	strh	r2, [r7, #6]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1ef      	bne.n	800129a <owEchoRead+0x16>
  return rc_buffer[i];//depending on the UART number used
 80012ba:	797b      	ldrb	r3, [r7, #5]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <owEchoRead+0x4c>)
 80012be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c2:	b29b      	uxth	r3, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000220 	.word	0x20000220
 80012d0:	20000224 	.word	0x20000224

080012d4 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//decompose 1 byte into 8 bytes, encode so to speak in a package for 1wire
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e014      	b.n	8001310 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//if current bit in byte ==1 then
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <byteToBits+0x24>
      *bits = WIRE_1; //replace with a number which, when transmitted via UART for 1 wire, will be unity t.e 0xFF
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e002      	b.n	80012fe <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// same for 0
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //shift the processed bit
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	085b      	lsrs	r3, r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3301      	adds	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b07      	cmp	r3, #7
 8001314:	d9e7      	bls.n	80012e6 <byteToBits+0x12>
  }
  return bits; //return an array to pass
 8001316:	683b      	ldr	r3, [r7, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <owSendByte>:
/**
 * The method sends sequentially 8 bytes, one for each bit in data
 * @param usart -- selected for 1wire UART emulation
 * @param d -- data
 */
void owSendByte(uint8_t d) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//convert bytes to bits "byte array for UART transmission and 1WIRE emulation"
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ffcc 	bl	80012d4 <byteToBits>
  for (i = 0; i < 8; ++i) {
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e00b      	b.n	800135a <owSendByte+0x36>
    owSend(data[i]);
 8001342:	f107 020c 	add.w	r2, r7, #12
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff58 	bl	8001204 <owSend>
  for (i = 0; i < 8; ++i) {
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b07      	cmp	r3, #7
 800135e:	ddf0      	ble.n	8001342 <owSendByte+0x1e>
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <owCRC>:
  }
  return target_byte; //return the received byte
}

/* CRC8 count of array mas of length Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	733b      	strb	r3, [r7, #12]
  crc = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // bit count in byte
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e018      	b.n	80013c0 <owCRC+0x56>
      fb = crc ^ dat;
 800138e:	7b7a      	ldrb	r2, [r7, #13]
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	4053      	eors	r3, r2
 8001394:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8001396:	7afb      	ldrb	r3, [r7, #11]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // polynomial
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d104      	bne.n	80013ba <owCRC+0x50>
 80013b0:	7b7b      	ldrb	r3, [r7, #13]
 80013b2:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80013b6:	43db      	mvns	r3, r3
 80013b8:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // bit count in byte
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	3301      	adds	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d9e3      	bls.n	800138e <owCRC+0x24>
    }
    st_byt++;
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // byte count in array
 80013cc:	7b3a      	ldrb	r2, [r7, #12]
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3d4      	bcc.n	800137e <owCRC+0x14>
  return crc;
 80013d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 80013ea:	2107      	movs	r1, #7
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ffbc 	bl	800136a <owCRC>
 80013f2:	4603      	mov	r3, r0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * convert to callback functions to respond to errors
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //is there anyone on the bus
 8001414:	f7ff fed6 	bl	80011c4 <owResetCmd>
 8001418:	4603      	mov	r3, r0
 800141a:	2bf0      	cmp	r3, #240	; 0xf0
 800141c:	d101      	bne.n	8001422 <hasNextRom+0x26>
    return 0;
 800141e:	2300      	movs	r3, #0
 8001420:	e097      	b.n	8001552 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8001422:	20f0      	movs	r0, #240	; 0xf0
 8001424:	f7ff ff7e 	bl	8001324 <owSendByte>
  do {
		uint8_t answerBit =0;
 8001428:	2300      	movs	r3, #0
 800142a:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 800142c:	7ffb      	ldrb	r3, [r7, #31]
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // read direct bit
 8001440:	20ff      	movs	r0, #255	; 0xff
 8001442:	f7ff fedf 	bl	8001204 <owSend>
    cB = owReadSlot(owEchoRead());//response from the sensor
 8001446:	f7ff ff1d 	bl	8001284 <owEchoRead>
 800144a:	4603      	mov	r3, r0
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff07 	bl	8001260 <owReadSlot>
 8001452:	4603      	mov	r3, r0
 8001454:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // read inverted bit
 8001456:	20ff      	movs	r0, #255	; 0xff
 8001458:	f7ff fed4 	bl	8001204 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//response from the sensor
 800145c:	f7ff ff12 	bl	8001284 <owEchoRead>
 8001460:	4603      	mov	r3, r0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fefc 	bl	8001260 <owReadSlot>
 8001468:	4603      	mov	r3, r0
 800146a:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//compare two answers
 800146c:	7afa      	ldrb	r2, [r7, #11]
 800146e:	7abb      	ldrb	r3, [r7, #10]
 8001470:	429a      	cmp	r2, r3
 8001472:	d105      	bne.n	8001480 <hasNextRom+0x84>
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d102      	bne.n	8001480 <hasNextRom+0x84>
      return -1;//error nobody answered
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e068      	b.n	8001552 <hasNextRom+0x156>
    if (cB != cmp_cB) { //normal situation came either 10 or 01
 8001480:	7afa      	ldrb	r2, [r7, #11]
 8001482:	7abb      	ldrb	r3, [r7, #10]
 8001484:	429a      	cmp	r2, r3
 8001486:	d002      	beq.n	800148e <hasNextRom+0x92>
      searchDirection = cB;//choose in which direction we will move further
 8001488:	7afb      	ldrb	r3, [r7, #11]
 800148a:	75bb      	strb	r3, [r7, #22]
 800148c:	e023      	b.n	80014d6 <hasNextRom+0xda>
			} else {//collision came 00 i.e. the current bit for ROMs is different
				if (ui32BitNumber == ow->lastDiscrepancy)//if the current position of the collision is equal to the previous one
 800148e:	7ffa      	ldrb	r2, [r7, #31]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	d102      	bne.n	800149e <hasNextRom+0xa2>
        searchDirection = 1;//choose in which direction we will move further
 8001498:	2301      	movs	r3, #1
 800149a:	75bb      	strb	r3, [r7, #22]
 800149c:	e01b      	b.n	80014d6 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//if we sewed on
 800149e:	7ffa      	ldrb	r2, [r7, #31]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dd02      	ble.n	80014ae <hasNextRom+0xb2>
          searchDirection = 0;//choose in which direction we will move further
 80014a8:	2300      	movs	r3, #0
 80014aa:	75bb      	strb	r3, [r7, #22]
 80014ac:	e00e      	b.n	80014cc <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4413      	add	r3, r2
 80014b4:	330c      	adds	r3, #12
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	fa42 f303 	asr.w	r3, r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80014cc:	7dbb      	ldrb	r3, [r7, #22]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//remember the fork
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	61bb      	str	r3, [r7, #24]
      }
    }
    // save the beat
    if (searchDirection)
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00e      	beq.n	80014fa <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//set a bit in the current byte byte
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	2101      	movs	r1, #1
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// decide who to turn off
 80014fa:	7dbb      	ldrb	r3, [r7, #22]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <hasNextRom+0x108>
 8001500:	2300      	movs	r3, #0
 8001502:	e000      	b.n	8001506 <hasNextRom+0x10a>
 8001504:	23ff      	movs	r3, #255	; 0xff
 8001506:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//we cut down the "interfering" devices
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe79 	bl	8001204 <owSend>
    ui32BitNumber++;//looking for the next beat
 8001512:	7ffb      	ldrb	r3, [r7, #31]
 8001514:	3301      	adds	r3, #1
 8001516:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//until the whole ROM is found all bits
 8001518:	7ffb      	ldrb	r3, [r7, #31]
 800151a:	2b3f      	cmp	r3, #63	; 0x3f
 800151c:	d984      	bls.n	8001428 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//remember the fork
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 8001524:	e00b      	b.n	800153e <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//remember last rom
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	441a      	add	r2, r3
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	7811      	ldrb	r1, [r2, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	460a      	mov	r2, r1
 8001536:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	3301      	adds	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	2b06      	cmp	r3, #6
 8001542:	d9f0      	bls.n	8001526 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfcc      	ite	gt
 800154c:	2301      	movgt	r3, #1
 800154e:	2300      	movle	r3, #0
 8001550:	b2db      	uxtb	r3, r3
}
 8001552:	4618      	mov	r0, r3
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <owSearchCmd>:

// Returns the number of devices on the bus, or an error code if the value is less than 0
int owSearchCmd(OneWire *ow) {
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fdb4 	bl	80010d4 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //we pass a pointer to the structure where to put the next.ROM
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff40 	bl	80013fc <hasNextRom>
 800157c:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <owSearchCmd+0x30>
      return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	e009      	b.n	800159e <owSearchCmd+0x44>
    device++;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//we are looking for while someone is there and these someone is no more define
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <owSearchCmd+0x42>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	dde7      	ble.n	800156c <owSearchCmd+0x12>
		return device;//return the serial number of the sensor (device) on the bus
 800159c:	68fb      	ldr	r3, [r7, #12]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//sends a skip ROM command after that the next command will be
  owResetCmd();                 //for all devices on the bus
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//allows the master to access a specific slave device
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
	int i = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 80015b2:	f7ff fe07 	bl	80011c4 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//referring to a specific device
 80015b6:	2055      	movs	r0, #85	; 0x55
 80015b8:	f7ff feb4 	bl	8001324 <owSendByte>
  for (; i < 8; i++)
 80015bc:	e009      	b.n	80015d2 <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"we move through the structure as if through an array" with the first asterisk we get the i th byte from the structure
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff feac 	bl	8001324 <owSendByte>
  for (; i < 8; i++)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b07      	cmp	r3, #7
 80015d6:	ddf2      	ble.n	80015be <owMatchRomCmd+0x18>
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//allows the master to access a specific slave device
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f7ff ffda 	bl	80015a6 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//tell the sensor it's time to convert the temperature
 80015f2:	2044      	movs	r0, #68	; 0x44
 80015f4:	f7ff fe96 	bl	8001324 <owSendByte>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//read sensor memory
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 800160c:	2300      	movs	r3, #0
 800160e:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b10      	cmp	r3, #16
 8001616:	d001      	beq.n	800161c <owReadScratchpadCmd+0x1c>
 8001618:	2b28      	cmp	r3, #40	; 0x28
 800161a:	d109      	bne.n	8001630 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == equals 9 bytes of data
 800161c:	2348      	movs	r3, #72	; 0x48
 800161e:	82bb      	strh	r3, [r7, #20]
      break;
 8001620:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8001622:	68b8      	ldr	r0, [r7, #8]
 8001624:	f7ff ffbf 	bl	80015a6 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//send command to read memory
 8001628:	20be      	movs	r0, #190	; 0xbe
 800162a:	f7ff fe7b 	bl	8001324 <owSendByte>
  while (b < p) {// until we have processed 9 bytes
 800162e:	e048      	b.n	80016c2 <owReadScratchpadCmd+0xc2>
      return data;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	e04b      	b.n	80016cc <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //position of the byte to be processed
 8001634:	8abb      	ldrh	r3, [r7, #20]
 8001636:	3b08      	subs	r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	da00      	bge.n	800163e <owReadScratchpadCmd+0x3e>
 800163c:	3307      	adds	r3, #7
 800163e:	10db      	asrs	r3, r3, #3
 8001640:	b2da      	uxtb	r2, r3
 8001642:	8afb      	ldrh	r3, [r7, #22]
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	b29b      	uxth	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 800164e:	20ff      	movs	r0, #255	; 0xff
 8001650:	f7ff fdd8 	bl	8001204 <owSend>
    bt = owReadSlot(owEchoRead());//read data
 8001654:	f7ff fe16 	bl	8001284 <owEchoRead>
 8001658:	4603      	mov	r3, r0
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fe00 	bl	8001260 <owReadSlot>
 8001660:	4603      	mov	r3, r0
 8001662:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8001664:	7cbb      	ldrb	r3, [r7, #18]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d113      	bne.n	8001692 <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//put the bit in the right position
 800166a:	7cfb      	ldrb	r3, [r7, #19]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b25a      	sxtb	r2, r3
 8001674:	8afb      	ldrh	r3, [r7, #22]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	b25b      	sxtb	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b259      	sxtb	r1, r3
 8001686:	7cfb      	ldrb	r3, [r7, #19]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	b2ca      	uxtb	r2, r1
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e014      	b.n	80016bc <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//reset the bit at the correct position
 8001692:	7cfb      	ldrb	r3, [r7, #19]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b25a      	sxtb	r2, r3
 800169c:	8afb      	ldrh	r3, [r7, #22]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	4013      	ands	r3, r2
 80016b0:	b259      	sxtb	r1, r3
 80016b2:	7cfb      	ldrb	r3, [r7, #19]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2ca      	uxtb	r2, r1
 80016ba:	701a      	strb	r2, [r3, #0]
    b++;//next bit
 80016bc:	8afb      	ldrh	r3, [r7, #22]
 80016be:	3301      	adds	r3, #1
 80016c0:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// until we have processed 9 bytes
 80016c2:	8afa      	ldrh	r2, [r7, #22]
 80016c4:	8abb      	ldrh	r3, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3b4      	bcc.n	8001634 <owReadScratchpadCmd+0x34>
  }
  return data;
 80016ca:	687b      	ldr	r3, [r7, #4]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	4613      	mov	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d022      	beq.n	8001748 <readTemperature+0x74>
 8001702:	2b28      	cmp	r3, #40	; 0x28
 8001704:	d13a      	bne.n	800177c <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//read memory for DS18B20
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	461a      	mov	r2, r3
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff ff76 	bl	8001600 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//whole part
 8001714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001716:	79db      	ldrb	r3, [r3, #7]
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	b25a      	sxtb	r2, r3
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	7a1b      	ldrb	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	b2db      	uxtb	r3, r3
 8001724:	b25b      	sxtb	r3, r3
 8001726:	4313      	orrs	r3, r2
 8001728:	b25b      	sxtb	r3, r3
 800172a:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//fractional
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	f003 020f 	and.w	r2, r3, #15
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	111b      	asrs	r3, r3, #4
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8001746:	e01c      	b.n	8001782 <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//read memory for DS18S20
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	461a      	mov	r2, r3
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff ff55 	bl	8001600 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8001756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001758:	7a1b      	ldrb	r3, [r3, #8]
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b25b      	sxtb	r3, r3
 8001760:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8001764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001766:	7a1b      	ldrb	r3, [r3, #8]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4413      	add	r3, r2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 800177a:	e002      	b.n	8001782 <readTemperature+0xae>
    default:
      return t;
 800177c:	8c3b      	ldrh	r3, [r7, #32]
 800177e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001780:	e008      	b.n	8001794 <readTemperature+0xc0>
  }
  if (reSense) {
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//you can immediately after the data was taken, we give the sensor a command to convert the temperature
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7ff ff29 	bl	80015e2 <owConvertTemperatureCmd>
  }
  return t;
 8001790:	8c3b      	ldrh	r3, [r7, #32]
 8001792:	84bb      	strh	r3, [r7, #36]	; 0x24
}
 8001794:	2300      	movs	r3, #0
 8001796:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800179a:	f362 0307 	bfi	r3, r2, #0, #8
 800179e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80017a2:	f362 230f 	bfi	r3, r2, #8, #8
 80017a6:	4618      	mov	r0, r3
 80017a8:	3730      	adds	r7, #48	; 0x30
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80017b6:	f7ff fd05 	bl	80011c4 <owResetCmd>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2bf0      	cmp	r3, #240	; 0xf0
 80017be:	d079      	beq.n	80018b4 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // get the ROMid in the bus or return an error code
 80017c0:	484e      	ldr	r0, [pc, #312]	; (80018fc <get_ROMid+0x14c>)
 80017c2:	f7ff feca 	bl	800155a <owSearchCmd>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <get_ROMid+0x150>)
 80017cc:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <get_ROMid+0x150>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d113      	bne.n	80017fe <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80017d6:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <get_ROMid+0x154>)
 80017d8:	4a4b      	ldr	r2, [pc, #300]	; (8001908 <get_ROMid+0x158>)
 80017da:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80017dc:	4b4b      	ldr	r3, [pc, #300]	; (800190c <get_ROMid+0x15c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e005      	b.n	80017f0 <get_ROMid+0x40>
					__asm__("nop");
 80017e4:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <get_ROMid+0x15c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a47      	ldr	r2, [pc, #284]	; (800190c <get_ROMid+0x15c>)
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <get_ROMid+0x15c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b43      	ldr	r3, [pc, #268]	; (8001904 <get_ROMid+0x154>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d3f3      	bcc.n	80017e4 <get_ROMid+0x34>
				pDelay = 1000000;
 80017fc:	e7eb      	b.n	80017d6 <get_ROMid+0x26>
			}

		}
		i = 0;
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <get_ROMid+0x15c>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//console output all found ROMs
 8001804:	e04f      	b.n	80018a6 <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <get_ROMid+0x15c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4a3b      	ldr	r2, [pc, #236]	; (80018fc <get_ROMid+0x14c>)
 800180e:	4413      	add	r3, r2
 8001810:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fde5 	bl	80013e2 <owCRC8>
 8001818:	4603      	mov	r3, r0
 800181a:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	79db      	ldrb	r3, [r3, #7]
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	429a      	cmp	r2, r3
 8001824:	d101      	bne.n	800182a <get_ROMid+0x7a>
 8001826:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <get_ROMid+0x160>)
 8001828:	e000      	b.n	800182c <get_ROMid+0x7c>
 800182a:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <get_ROMid+0x164>)
 800182c:	4a3a      	ldr	r2, [pc, #232]	; (8001918 <get_ROMid+0x168>)
 800182e:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <get_ROMid+0x15c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b39      	ldr	r3, [pc, #228]	; (800191c <get_ROMid+0x16c>)
 8001838:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461e      	mov	r6, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	799b      	ldrb	r3, [r3, #6]
 8001844:	469c      	mov	ip, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	795b      	ldrb	r3, [r3, #5]
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	791b      	ldrb	r3, [r3, #4]
 8001850:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001856:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800185c:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001862:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001868:	9305      	str	r3, [sp, #20]
 800186a:	9504      	str	r5, [sp, #16]
 800186c:	9403      	str	r4, [sp, #12]
 800186e:	9002      	str	r0, [sp, #8]
 8001870:	9101      	str	r1, [sp, #4]
 8001872:	9200      	str	r2, [sp, #0]
 8001874:	4663      	mov	r3, ip
 8001876:	4632      	mov	r2, r6
 8001878:	4929      	ldr	r1, [pc, #164]	; (8001920 <get_ROMid+0x170>)
 800187a:	482a      	ldr	r0, [pc, #168]	; (8001924 <get_ROMid+0x174>)
 800187c:	f005 fb8c 	bl	8006f98 <siprintf>

			if (crc != r->crc) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	79db      	ldrb	r3, [r3, #7]
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	429a      	cmp	r2, r3
 8001888:	d008      	beq.n	800189c <get_ROMid+0xec>
				devInfo.device = i;
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <get_ROMid+0x15c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <get_ROMid+0x16c>)
 8001892:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 8001894:	4924      	ldr	r1, [pc, #144]	; (8001928 <get_ROMid+0x178>)
 8001896:	4823      	ldr	r0, [pc, #140]	; (8001924 <get_ROMid+0x174>)
 8001898:	f005 fb7e 	bl	8006f98 <siprintf>
		for (; i < devices; i++) {//console output all found ROMs
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <get_ROMid+0x15c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	4a1a      	ldr	r2, [pc, #104]	; (800190c <get_ROMid+0x15c>)
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <get_ROMid+0x150>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <get_ROMid+0x15c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8a8      	bhi.n	8001806 <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <get_ROMid+0x154>)
 80018b6:	4a14      	ldr	r2, [pc, #80]	; (8001908 <get_ROMid+0x158>)
 80018b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <get_ROMid+0x15c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e005      	b.n	80018ce <get_ROMid+0x11e>
		__asm__("nop");
 80018c2:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <get_ROMid+0x15c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <get_ROMid+0x15c>)
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <get_ROMid+0x15c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <get_ROMid+0x154>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3f3      	bcc.n	80018c2 <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <get_ROMid+0x168>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	490c      	ldr	r1, [pc, #48]	; (8001910 <get_ROMid+0x160>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fc7d 	bl	80001e0 <strcmp>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <get_ROMid+0x140>
 80018ec:	2300      	movs	r3, #0
 80018ee:	e001      	b.n	80018f4 <get_ROMid+0x144>
	else return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fc:	2000025c 	.word	0x2000025c
 8001900:	20000258 	.word	0x20000258
 8001904:	20000000 	.word	0x20000000
 8001908:	000f4240 	.word	0x000f4240
 800190c:	20000270 	.word	0x20000270
 8001910:	0800ab90 	.word	0x0800ab90
 8001914:	0800ab98 	.word	0x0800ab98
 8001918:	20000278 	.word	0x20000278
 800191c:	20000230 	.word	0x20000230
 8001920:	0800aba4 	.word	0x0800aba4
 8001924:	20000234 	.word	0x20000234
 8001928:	0800abcc 	.word	0x0800abcc

0800192c <get_Temperature>:

void get_Temperature (void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	i=0;
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <get_Temperature+0xf0>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 8001936:	e067      	b.n	8001a08 <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {//what is our sensor
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <get_Temperature+0xf0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <get_Temperature+0xf4>)
 800193e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001942:	2b28      	cmp	r3, #40	; 0x28
 8001944:	d006      	beq.n	8001954 <get_Temperature+0x28>
 8001946:	2b28      	cmp	r3, #40	; 0x28
 8001948:	dc56      	bgt.n	80019f8 <get_Temperature+0xcc>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d056      	beq.n	80019fc <get_Temperature+0xd0>
 800194e:	2b10      	cmp	r3, #16
 8001950:	d029      	beq.n	80019a6 <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 8001952:	e051      	b.n	80019f8 <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <get_Temperature+0xf0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <get_Temperature+0xf4>)
 800195c:	4413      	add	r3, r2
 800195e:	2201      	movs	r2, #1
 8001960:	4619      	mov	r1, r3
 8001962:	482f      	ldr	r0, [pc, #188]	; (8001a20 <get_Temperature+0xf4>)
 8001964:	f7ff feb6 	bl	80016d4 <readTemperature>
 8001968:	4603      	mov	r3, r0
 800196a:	4a2e      	ldr	r2, [pc, #184]	; (8001a24 <get_Temperature+0xf8>)
 800196c:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <get_Temperature+0xf8>)
 8001970:	f993 3000 	ldrsb.w	r3, [r3]
 8001974:	461a      	mov	r2, r3
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	461a      	mov	r2, r3
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <get_Temperature+0xf8>)
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	4413      	add	r3, r2
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <get_Temperature+0xf0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199a:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <get_Temperature+0xfc>)
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	edc3 7a00 	vstr	s15, [r3]
			break;
 80019a4:	e02b      	b.n	80019fe <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <get_Temperature+0xf0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <get_Temperature+0xf4>)
 80019ae:	4413      	add	r3, r2
 80019b0:	2201      	movs	r2, #1
 80019b2:	4619      	mov	r1, r3
 80019b4:	481a      	ldr	r0, [pc, #104]	; (8001a20 <get_Temperature+0xf4>)
 80019b6:	f7ff fe8d 	bl	80016d4 <readTemperature>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <get_Temperature+0xf8>)
 80019be:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <get_Temperature+0xf8>)
 80019c2:	f993 3000 	ldrsb.w	r3, [r3]
 80019c6:	461a      	mov	r2, r3
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <get_Temperature+0xf8>)
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	4413      	add	r3, r2
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <get_Temperature+0xf0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <get_Temperature+0xfc>)
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80019f6:	e002      	b.n	80019fe <get_Temperature+0xd2>
			break;
 80019f8:	bf00      	nop
 80019fa:	e000      	b.n	80019fe <get_Temperature+0xd2>
			break;
 80019fc:	bf00      	nop
	for (; i < devices; i++) {
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <get_Temperature+0xf0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <get_Temperature+0xf0>)
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <get_Temperature+0x100>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <get_Temperature+0xf0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d890      	bhi.n	8001938 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000270 	.word	0x20000270
 8001a20:	2000025c 	.word	0x2000025c
 8001a24:	20000274 	.word	0x20000274
 8001a28:	20000254 	.word	0x20000254
 8001a2c:	20000258 	.word	0x20000258

08001a30 <HAL_TIM_IC_CaptureCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern float Temp[MAXDEVICES_ON_THE_BUS];

void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim) / 2;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a42:	6013      	str	r3, [r2, #0]
	if (counter > 30000)
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f247 5230 	movw	r2, #30000	; 0x7530
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d906      	bls.n	8001a5e <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		__HAL_TIM_SetCounter(&htim3,0);
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
		counter=0;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
	}
	if (counter > counter_limit)
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f643 32c4 	movw	r2, #15300	; 0x3bc4
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d90a      	bls.n	8001a80 <HAL_TIM_IC_CaptureCallback+0x50>
	{
		__HAL_TIM_SetCounter(&htim3, counter_limit * 2);
 8001a6a:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 8001a6e:	005a      	lsls	r2, r3, #1
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
		counter=counter_limit;
 8001a76:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a7e:	601a      	str	r2, [r3, #0]
	}
	counter_position = (int16_t)counter;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001a88:	801a      	strh	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200003b0 	.word	0x200003b0
 8001a9c:	20000318 	.word	0x20000318
 8001aa0:	200003b4 	.word	0x200003b4
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aac:	f001 f8c0 	bl	8002c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab0:	f000 f944 	bl	8001d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab4:	f000 faa8 	bl	8002008 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ab8:	f000 f9fa 	bl	8001eb0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001abc:	f000 f9a6 	bl	8001e0c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001ac0:	f000 fa24 	bl	8001f0c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001ac4:	f000 fa76 	bl	8001fb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT (&htim3, TIM_CHANNEL_ALL   );
 8001ac8:	213c      	movs	r1, #60	; 0x3c
 8001aca:	488b      	ldr	r0, [pc, #556]	; (8001cf8 <main+0x250>)
 8001acc:	f003 f990 	bl	8004df0 <HAL_TIM_Encoder_Start_IT>
  /* Initialize stepper motor controller */
  HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET); // set high for half step
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	4889      	ldr	r0, [pc, #548]	; (8001cfc <main+0x254>)
 8001ad8:	f002 f826 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET); // set for microstep
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae2:	4886      	ldr	r0, [pc, #536]	; (8001cfc <main+0x254>)
 8001ae4:	f002 f820 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET); // set for microstep
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aee:	4883      	ldr	r0, [pc, #524]	; (8001cfc <main+0x254>)
 8001af0:	f002 f81a 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_SLEEP_GPIO_Port, S_SLEEP_Pin, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2101      	movs	r1, #1
 8001af8:	4880      	ldr	r0, [pc, #512]	; (8001cfc <main+0x254>)
 8001afa:	f002 f815 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b04:	487d      	ldr	r0, [pc, #500]	; (8001cfc <main+0x254>)
 8001b06:	f002 f80f 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	487b      	ldr	r0, [pc, #492]	; (8001cfc <main+0x254>)
 8001b10:	f002 f80a 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2104      	movs	r1, #4
 8001b18:	4878      	ldr	r0, [pc, #480]	; (8001cfc <main+0x254>)
 8001b1a:	f002 f805 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b24:	4876      	ldr	r0, [pc, #472]	; (8001d00 <main+0x258>)
 8001b26:	f001 ffff 	bl	8003b28 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001b2a:	2064      	movs	r0, #100	; 0x64
 8001b2c:	f001 f8f2 	bl	8002d14 <HAL_Delay>
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b36:	4872      	ldr	r0, [pc, #456]	; (8001d00 <main+0x258>)
 8001b38:	f001 fff6 	bl	8003b28 <HAL_GPIO_WritePin>

// OLED init
  SSD1306_Init(&oled);
 8001b3c:	4871      	ldr	r0, [pc, #452]	; (8001d04 <main+0x25c>)
 8001b3e:	f000 fb03 	bl	8002148 <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 8001b42:	2100      	movs	r1, #0
 8001b44:	2000      	movs	r0, #0
 8001b46:	f000 fca3 	bl	8002490 <SSD1306_GotoXY>
  SSD1306_Puts("SH1106", &Font_11x18, SSD1306_COLOR_WHITE);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	496e      	ldr	r1, [pc, #440]	; (8001d08 <main+0x260>)
 8001b4e:	486f      	ldr	r0, [pc, #444]	; (8001d0c <main+0x264>)
 8001b50:	f000 fd34 	bl	80025bc <SSD1306_Puts>
  HAL_ADC_Start(&hadc1);
 8001b54:	486e      	ldr	r0, [pc, #440]	; (8001d10 <main+0x268>)
 8001b56:	f001 f945 	bl	8002de4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5e:	486c      	ldr	r0, [pc, #432]	; (8001d10 <main+0x268>)
 8001b60:	f001 f9f4 	bl	8002f4c <HAL_ADC_PollForConversion>
  raw = HAL_ADC_GetValue(&hadc1);
 8001b64:	486a      	ldr	r0, [pc, #424]	; (8001d10 <main+0x268>)
 8001b66:	f001 fa7c 	bl	8003062 <HAL_ADC_GetValue>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b69      	ldr	r3, [pc, #420]	; (8001d14 <main+0x26c>)
 8001b70:	601a      	str	r2, [r3, #0]
  voltage = raw /  187.3 ; // Umcu = 3.375V
 8001b72:	4b68      	ldr	r3, [pc, #416]	; (8001d14 <main+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fcec 	bl	8000554 <__aeabi_i2d>
 8001b7c:	a35c      	add	r3, pc, #368	; (adr r3, 8001cf0 <main+0x248>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fe7b 	bl	800087c <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff f843 	bl	8000c18 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a60      	ldr	r2, [pc, #384]	; (8001d18 <main+0x270>)
 8001b96:	6013      	str	r3, [r2, #0]
  sprintf(text, "%1.2f", voltage);
 8001b98:	4b5f      	ldr	r3, [pc, #380]	; (8001d18 <main+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	495d      	ldr	r1, [pc, #372]	; (8001d1c <main+0x274>)
 8001ba8:	485d      	ldr	r0, [pc, #372]	; (8001d20 <main+0x278>)
 8001baa:	f005 f9f5 	bl	8006f98 <siprintf>
  SSD1306_GotoXY (0, 20);
 8001bae:	2114      	movs	r1, #20
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 fc6d 	bl	8002490 <SSD1306_GotoXY>
  SSD1306_Puts (text, &Font_11x18, 1);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4953      	ldr	r1, [pc, #332]	; (8001d08 <main+0x260>)
 8001bba:	4859      	ldr	r0, [pc, #356]	; (8001d20 <main+0x278>)
 8001bbc:	f000 fcfe 	bl	80025bc <SSD1306_Puts>
  SSD1306_Puts ("V", &Font_11x18, 1);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4951      	ldr	r1, [pc, #324]	; (8001d08 <main+0x260>)
 8001bc4:	4857      	ldr	r0, [pc, #348]	; (8001d24 <main+0x27c>)
 8001bc6:	f000 fcf9 	bl	80025bc <SSD1306_Puts>
//  SSD1306_dim(127);
  SSD1306_UpdateScreen(); // update screen
 8001bca:	f000 fbb1 	bl	8002330 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8001bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd2:	f001 f89f 	bl	8002d14 <HAL_Delay>

  get_ROMid();
 8001bd6:	f7ff fdeb 	bl	80017b0 <get_ROMid>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be0:	4851      	ldr	r0, [pc, #324]	; (8001d28 <main+0x280>)
 8001be2:	f001 ffa1 	bl	8003b28 <HAL_GPIO_WritePin>
	  while (motor_position != counter_position)
 8001be6:	e05e      	b.n	8001ca6 <main+0x1fe>
	  {
		  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bee:	4843      	ldr	r0, [pc, #268]	; (8001cfc <main+0x254>)
 8001bf0:	f001 ff9a 	bl	8003b28 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bfa:	484b      	ldr	r0, [pc, #300]	; (8001d28 <main+0x280>)
 8001bfc:	f001 ff94 	bl	8003b28 <HAL_GPIO_WritePin>
		  if (motor_position < counter_position)
 8001c00:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <main+0x284>)
 8001c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <main+0x288>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dd22      	ble.n	8001c56 <main+0x1ae>
		  {

			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	2104      	movs	r1, #4
 8001c14:	4839      	ldr	r0, [pc, #228]	; (8001cfc <main+0x254>)
 8001c16:	f001 ff87 	bl	8003b28 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4837      	ldr	r0, [pc, #220]	; (8001cfc <main+0x254>)
 8001c20:	f001 ff82 	bl	8003b28 <HAL_GPIO_WritePin>
			  motor_position = motor_position + 1 ;
 8001c24:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <main+0x288>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a41      	ldr	r2, [pc, #260]	; (8001d30 <main+0x288>)
 8001c2c:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2102      	movs	r1, #2
 8001c32:	4832      	ldr	r0, [pc, #200]	; (8001cfc <main+0x254>)
 8001c34:	f001 ff78 	bl	8003b28 <HAL_GPIO_WritePin>
			  us_delay = 7500;
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <main+0x28c>)
 8001c3a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001c3e:	601a      	str	r2, [r3, #0]
			  while (us_delay) { us_delay = us_delay - 1;}
 8001c40:	e004      	b.n	8001c4c <main+0x1a4>
 8001c42:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <main+0x28c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <main+0x28c>)
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <main+0x28c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f6      	bne.n	8001c42 <main+0x19a>
 8001c54:	e021      	b.n	8001c9a <main+0x1f2>
		  }
		  else
		  {

			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4828      	ldr	r0, [pc, #160]	; (8001cfc <main+0x254>)
 8001c5c:	f001 ff64 	bl	8003b28 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	2102      	movs	r1, #2
 8001c64:	4825      	ldr	r0, [pc, #148]	; (8001cfc <main+0x254>)
 8001c66:	f001 ff5f 	bl	8003b28 <HAL_GPIO_WritePin>
			  motor_position = motor_position - 1 ;
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <main+0x288>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	4a2f      	ldr	r2, [pc, #188]	; (8001d30 <main+0x288>)
 8001c72:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2102      	movs	r1, #2
 8001c78:	4820      	ldr	r0, [pc, #128]	; (8001cfc <main+0x254>)
 8001c7a:	f001 ff55 	bl	8003b28 <HAL_GPIO_WritePin>
			  us_delay = 7500;
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <main+0x28c>)
 8001c80:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001c84:	601a      	str	r2, [r3, #0]
			  while (us_delay) { us_delay = us_delay - 1;}
 8001c86:	e004      	b.n	8001c92 <main+0x1ea>
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <main+0x28c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <main+0x28c>)
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <main+0x28c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f6      	bne.n	8001c88 <main+0x1e0>
		  }
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca0:	4821      	ldr	r0, [pc, #132]	; (8001d28 <main+0x280>)
 8001ca2:	f001 ff41 	bl	8003b28 <HAL_GPIO_WritePin>
	  while (motor_position != counter_position)
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <main+0x284>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <main+0x288>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d198      	bne.n	8001be8 <main+0x140>
//		  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_SET);
	  }

	  SSD1306_Fill(0);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f000 fb72 	bl	80023a0 <SSD1306_Fill>
	  SSD1306_GotoXY(0, 0);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f000 fbe6 	bl	8002490 <SSD1306_GotoXY>
	  sprintf(text, "%5i", counter_position);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <main+0x284>)
 8001cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	491a      	ldr	r1, [pc, #104]	; (8001d38 <main+0x290>)
 8001cce:	4814      	ldr	r0, [pc, #80]	; (8001d20 <main+0x278>)
 8001cd0:	f005 f962 	bl	8006f98 <siprintf>
	  SSD1306_Puts (text, &Font_11x18, 1);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	490c      	ldr	r1, [pc, #48]	; (8001d08 <main+0x260>)
 8001cd8:	4811      	ldr	r0, [pc, #68]	; (8001d20 <main+0x278>)
 8001cda:	f000 fc6f 	bl	80025bc <SSD1306_Puts>
//	  sprintf(text, "%5i", motor_position);
//	  SSD1306_GotoXY(0, 30);
//	  SSD1306_Puts (text, &Font_11x18, 1);
	  SSD1306_UpdateScreen();
 8001cde:	f000 fb27 	bl	8002330 <SSD1306_UpdateScreen>

	  get_Temperature();
 8001ce2:	f7ff fe23 	bl	800192c <get_Temperature>
	  HAL_Delay (2000);
 8001ce6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cea:	f001 f813 	bl	8002d14 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001cee:	e774      	b.n	8001bda <main+0x132>
 8001cf0:	9999999a 	.word	0x9999999a
 8001cf4:	40676999 	.word	0x40676999
 8001cf8:	20000318 	.word	0x20000318
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40020000 	.word	0x40020000
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	0800abec 	.word	0x0800abec
 8001d10:	2000027c 	.word	0x2000027c
 8001d14:	200003a8 	.word	0x200003a8
 8001d18:	200003ac 	.word	0x200003ac
 8001d1c:	0800abf4 	.word	0x0800abf4
 8001d20:	20000018 	.word	0x20000018
 8001d24:	0800abfc 	.word	0x0800abfc
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	200003b4 	.word	0x200003b4
 8001d30:	200003a4 	.word	0x200003a4
 8001d34:	200003b8 	.word	0x200003b8
 8001d38:	0800ac00 	.word	0x0800ac00

08001d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b094      	sub	sp, #80	; 0x50
 8001d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	2230      	movs	r2, #48	; 0x30
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 fa9c 	bl	8006288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <SystemClock_Config+0xc8>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <SystemClock_Config+0xc8>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <SystemClock_Config+0xc8>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <SystemClock_Config+0xcc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <SystemClock_Config+0xcc>)
 8001d86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <SystemClock_Config+0xcc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da2:	2302      	movs	r3, #2
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001da6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001dac:	230d      	movs	r3, #13
 8001dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 104;
 8001db0:	2368      	movs	r3, #104	; 0x68
 8001db2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001db8:	2304      	movs	r3, #4
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbc:	f107 0320 	add.w	r3, r7, #32
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 fb17 	bl	80043f4 <HAL_RCC_OscConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dcc:	f000 f9b6 	bl	800213c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	2103      	movs	r1, #3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f002 fd79 	bl	80048e4 <HAL_RCC_ClockConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001df8:	f000 f9a0 	bl	800213c <Error_Handler>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3750      	adds	r7, #80	; 0x50
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000

08001e0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e12:	463b      	mov	r3, r7
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e20:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <MX_ADC1_Init+0x9c>)
 8001e22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <MX_ADC1_Init+0xa0>)
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e6e:	f000 ff75 	bl	8002d5c <HAL_ADC_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e78:	f000 f960 	bl	800213c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e8e:	f001 f8f5 	bl	800307c <HAL_ADC_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e98:	f000 f950 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000027c 	.word	0x2000027c
 8001ea8:	40012000 	.word	0x40012000
 8001eac:	0f000001 	.word	0x0f000001

08001eb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <MX_I2C1_Init+0x54>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <MX_I2C1_Init+0x58>)
 8001ebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ed2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001eee:	f001 fe35 	bl	8003b5c <HAL_I2C_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ef8:	f000 f920 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200002c4 	.word	0x200002c4
 8001f04:	40005400 	.word	0x40005400
 8001f08:	00061a80 	.word	0x00061a80

08001f0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	; 0x30
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2224      	movs	r2, #36	; 0x24
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 f9b4 	bl	8006288 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <MX_TIM3_Init+0xa4>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f7a:	f002 fe93 	bl	8004ca4 <HAL_TIM_Encoder_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f84:	f000 f8da 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f96:	f003 f9af 	bl	80052f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fa0:	f000 f8cc 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	3730      	adds	r7, #48	; 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000318 	.word	0x20000318
 8001fb0:	40000400 	.word	0x40000400

08001fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_USART2_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fec:	f003 fa06 	bl	80053fc <HAL_HalfDuplex_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 f8a1 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000360 	.word	0x20000360
 8002004:	40004400 	.word	0x40004400

08002008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b42      	ldr	r3, [pc, #264]	; (800212c <MX_GPIO_Init+0x124>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a41      	ldr	r2, [pc, #260]	; (800212c <MX_GPIO_Init+0x124>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <MX_GPIO_Init+0x124>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <MX_GPIO_Init+0x124>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a3a      	ldr	r2, [pc, #232]	; (800212c <MX_GPIO_Init+0x124>)
 8002044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <MX_GPIO_Init+0x124>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <MX_GPIO_Init+0x124>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a33      	ldr	r2, [pc, #204]	; (800212c <MX_GPIO_Init+0x124>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <MX_GPIO_Init+0x124>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <MX_GPIO_Init+0x124>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a2c      	ldr	r2, [pc, #176]	; (800212c <MX_GPIO_Init+0x124>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <MX_GPIO_Init+0x124>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002094:	4826      	ldr	r0, [pc, #152]	; (8002130 <MX_GPIO_Init+0x128>)
 8002096:	f001 fd47 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S_SLEEP_Pin|STEP_Pin|DIR_Pin|S_ENABLE_Pin
 800209a:	2200      	movs	r2, #0
 800209c:	f24f 0107 	movw	r1, #61447	; 0xf007
 80020a0:	4824      	ldr	r0, [pc, #144]	; (8002134 <MX_GPIO_Init+0x12c>)
 80020a2:	f001 fd41 	bl	8003b28 <HAL_GPIO_WritePin>
                          |MS1_Pin|MS2_Pin|MS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ac:	4822      	ldr	r0, [pc, #136]	; (8002138 <MX_GPIO_Init+0x130>)
 80020ae:	f001 fd3b 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80020b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	4819      	ldr	r0, [pc, #100]	; (8002130 <MX_GPIO_Init+0x128>)
 80020cc:	f001 fba8 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80020d0:	2301      	movs	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4815      	ldr	r0, [pc, #84]	; (8002138 <MX_GPIO_Init+0x130>)
 80020e4:	f001 fb9c 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_SLEEP_Pin STEP_Pin DIR_Pin S_ENABLE_Pin
                           MS1_Pin MS2_Pin MS3_Pin */
  GPIO_InitStruct.Pin = S_SLEEP_Pin|STEP_Pin|DIR_Pin|S_ENABLE_Pin
 80020e8:	f24f 0307 	movw	r3, #61447	; 0xf007
 80020ec:	617b      	str	r3, [r7, #20]
                          |MS1_Pin|MS2_Pin|MS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	480c      	ldr	r0, [pc, #48]	; (8002134 <MX_GPIO_Init+0x12c>)
 8002102:	f001 fb8d 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_RESET_Pin */
  GPIO_InitStruct.Pin = S_RESET_Pin;
 8002106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S_RESET_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	4806      	ldr	r0, [pc, #24]	; (8002138 <MX_GPIO_Init+0x130>)
 8002120:	f001 fb7e 	bl	8003820 <HAL_GPIO_Init>

}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	40020800 	.word	0x40020800
 8002134:	40020400 	.word	0x40020400
 8002138:	40020000 	.word	0x40020000

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002144:	e7fe      	b.n	8002144 <Error_Handler+0x8>
	...

08002148 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(OledHandleTypedef *mydev)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

    /* Init I2C */
    dev = mydev;
 8002150:	4a75      	ldr	r2, [pc, #468]	; (8002328 <SSD1306_Init+0x1e0>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]

    /* A little delay */
    uint32_t p = 2500;
 8002156:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800215a:	60fb      	str	r3, [r7, #12]
    while(p>0)
 800215c:	e002      	b.n	8002164 <SSD1306_Init+0x1c>
        p--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3b01      	subs	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
    while(p>0)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <SSD1306_Init+0x16>

    /* Init LCD */
    SSD1306_WRITECOMMAND(0xAE); //display off
 800216a:	21ae      	movs	r1, #174	; 0xae
 800216c:	2000      	movs	r0, #0
 800216e:	f000 faa9 	bl	80026c4 <ssd1306_I2C_Write>

    if(dev->type == SSD1306_I2C) {
 8002172:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <SSD1306_Init+0x1e0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <SSD1306_Init+0x44>
        SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800217c:	2120      	movs	r1, #32
 800217e:	2000      	movs	r0, #0
 8002180:	f000 faa0 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10); //00:Horizontal, 01:Vertical,10:Page, 11:Invalid
 8002184:	2110      	movs	r1, #16
 8002186:	2000      	movs	r0, #0
 8002188:	f000 fa9c 	bl	80026c4 <ssd1306_I2C_Write>
    }                           // Note: SH1106 has only Page mode

    SSD1306_WRITECOMMAND(0xB0); //Set Page Address for Page Addressing Mode,0-7
 800218c:	21b0      	movs	r1, #176	; 0xb0
 800218e:	2000      	movs	r0, #0
 8002190:	f000 fa98 	bl	80026c4 <ssd1306_I2C_Write>

    if(dev->type == SH1106_I2C) {
 8002194:	4b64      	ldr	r3, [pc, #400]	; (8002328 <SSD1306_Init+0x1e0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d104      	bne.n	80021a8 <SSD1306_Init+0x60>
        SSD1306_WRITECOMMAND(0x02); //---set low column address 	2: for SH1106 ***
 800219e:	2102      	movs	r1, #2
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 fa8f 	bl	80026c4 <ssd1306_I2C_Write>
 80021a6:	e003      	b.n	80021b0 <SSD1306_Init+0x68>
    } else {
        SSD1306_WRITECOMMAND(0x00); //---set low column address 	0: for SSD1306 ***
 80021a8:	2100      	movs	r1, #0
 80021aa:	2000      	movs	r0, #0
 80021ac:	f000 fa8a 	bl	80026c4 <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0x10); //---set high column address
 80021b0:	2110      	movs	r1, #16
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 fa86 	bl	80026c4 <ssd1306_I2C_Write>

    if(dev->orientation == 0) { //--- This is the "normal" direction
 80021b8:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <SSD1306_Init+0x1e0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	885b      	ldrh	r3, [r3, #2]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <SSD1306_Init+0x8c>
        SSD1306_WRITECOMMAND(0xA0); //--set segment re-map 0 to 127
 80021c2:	21a0      	movs	r1, #160	; 0xa0
 80021c4:	2000      	movs	r0, #0
 80021c6:	f000 fa7d 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xC0); //Set COM Output Scan Direction 0 to 63
 80021ca:	21c0      	movs	r1, #192	; 0xc0
 80021cc:	2000      	movs	r0, #0
 80021ce:	f000 fa79 	bl	80026c4 <ssd1306_I2C_Write>
 80021d2:	e007      	b.n	80021e4 <SSD1306_Init+0x9c>
    } else {                    //--- This is the "upside down" direction
        SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 127 to 0
 80021d4:	21a1      	movs	r1, #161	; 0xa1
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 fa74 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction 63 to 0
 80021dc:	21c8      	movs	r1, #200	; 0xc8
 80021de:	2000      	movs	r0, #0
 80021e0:	f000 fa70 	bl	80026c4 <ssd1306_I2C_Write>
    }
    if(dev->type == SH1106_I2C) {
 80021e4:	4b50      	ldr	r3, [pc, #320]	; (8002328 <SSD1306_Init+0x1e0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d103      	bne.n	80021f6 <SSD1306_Init+0xae>
        SSD1306_WRITECOMMAND(0x32); //--set pump voltage value to 8.0V (SH1106 only)
 80021ee:	2132      	movs	r1, #50	; 0x32
 80021f0:	2000      	movs	r0, #0
 80021f2:	f000 fa67 	bl	80026c4 <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0x40); //--set start line address
 80021f6:	2140      	movs	r1, #64	; 0x40
 80021f8:	2000      	movs	r0, #0
 80021fa:	f000 fa63 	bl	80026c4 <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80021fe:	2181      	movs	r1, #129	; 0x81
 8002200:	2000      	movs	r0, #0
 8002202:	f000 fa5f 	bl	80026c4 <ssd1306_I2C_Write>
    if(dev->type == SH1106_I2C) {
 8002206:	4b48      	ldr	r3, [pc, #288]	; (8002328 <SSD1306_Init+0x1e0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d104      	bne.n	800221a <SSD1306_Init+0xd2>
        SSD1306_WRITECOMMAND(0x80); //  POR value = 80 for SH1106
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	2000      	movs	r0, #0
 8002214:	f000 fa56 	bl	80026c4 <ssd1306_I2C_Write>
 8002218:	e003      	b.n	8002222 <SSD1306_Init+0xda>
    } else if(SSD1306_HEIGHT == 32) {
        SSD1306_WRITECOMMAND(0x8F); // 0x8F for 32 line SSD1306
    } else {
        SSD1306_WRITECOMMAND(0xFF); // 0xFF for 64 line SSD1306
 800221a:	21ff      	movs	r1, #255	; 0xff
 800221c:	2000      	movs	r0, #0
 800221e:	f000 fa51 	bl	80026c4 <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0xA4); // 0xa4,normal output 0xa5,highlight all pixels
 8002222:	21a4      	movs	r1, #164	; 0xa4
 8002224:	2000      	movs	r0, #0
 8002226:	f000 fa4d 	bl	80026c4 <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800222a:	21a6      	movs	r1, #166	; 0xa6
 800222c:	2000      	movs	r0, #0
 800222e:	f000 fa49 	bl	80026c4 <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002232:	21a8      	movs	r1, #168	; 0xa8
 8002234:	2000      	movs	r0, #0
 8002236:	f000 fa45 	bl	80026c4 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_HEIGHT-1); //*** 31 or 63
 800223a:	213f      	movs	r1, #63	; 0x3f
 800223c:	2000      	movs	r0, #0
 800223e:	f000 fa41 	bl	80026c4 <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xD3); //--set display offset
 8002242:	21d3      	movs	r1, #211	; 0xd3
 8002244:	2000      	movs	r0, #0
 8002246:	f000 fa3d 	bl	80026c4 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00); //  no offset
 800224a:	2100      	movs	r1, #0
 800224c:	2000      	movs	r0, #0
 800224e:	f000 fa39 	bl	80026c4 <ssd1306_I2C_Write>

    if(dev->type == SH1106_I2C) { // SH1106 with 64 line display
 8002252:	4b35      	ldr	r3, [pc, #212]	; (8002328 <SSD1306_Init+0x1e0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d110      	bne.n	800227e <SSD1306_Init+0x136>
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800225c:	21d5      	movs	r1, #213	; 0xd5
 800225e:	2000      	movs	r0, #0
 8002260:	f000 fa30 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x50); //  set frequency and divide ratio
 8002264:	2150      	movs	r1, #80	; 0x50
 8002266:	2000      	movs	r0, #0
 8002268:	f000 fa2c 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xD9); //--set dis-charge/pre-charge period
 800226c:	21d9      	movs	r1, #217	; 0xd9
 800226e:	2000      	movs	r0, #0
 8002270:	f000 fa28 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x22); //
 8002274:	2122      	movs	r1, #34	; 0x22
 8002276:	2000      	movs	r0, #0
 8002278:	f000 fa24 	bl	80026c4 <ssd1306_I2C_Write>
 800227c:	e00f      	b.n	800229e <SSD1306_Init+0x156>
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
        SSD1306_WRITECOMMAND(0x80); //  set recommended divide ratio
        SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
        SSD1306_WRITECOMMAND(0xF1); //
    } else {                    // SSD1306 with 64 line display
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800227e:	21d5      	movs	r1, #213	; 0xd5
 8002280:	2000      	movs	r0, #0
 8002282:	f000 fa1f 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xF0); //  set divide ratio
 8002286:	21f0      	movs	r1, #240	; 0xf0
 8002288:	2000      	movs	r0, #0
 800228a:	f000 fa1b 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800228e:	21d9      	movs	r1, #217	; 0xd9
 8002290:	2000      	movs	r0, #0
 8002292:	f000 fa17 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x22); //
 8002296:	2122      	movs	r1, #34	; 0x22
 8002298:	2000      	movs	r0, #0
 800229a:	f000 fa13 	bl	80026c4 <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800229e:	21da      	movs	r1, #218	; 0xda
 80022a0:	2000      	movs	r0, #0
 80022a2:	f000 fa0f 	bl	80026c4 <ssd1306_I2C_Write>
    if(SSD1306_HEIGHT == 64) {
        SSD1306_WRITECOMMAND(0x12); //*** 12:for 64 line
 80022a6:	2112      	movs	r1, #18
 80022a8:	2000      	movs	r0, #0
 80022aa:	f000 fa0b 	bl	80026c4 <ssd1306_I2C_Write>
    } else {
        SSD1306_WRITECOMMAND(0x02); //*** 02: for 32 line
    }

    SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80022ae:	21db      	movs	r1, #219	; 0xdb
 80022b0:	2000      	movs	r0, #0
 80022b2:	f000 fa07 	bl	80026c4 <ssd1306_I2C_Write>
    if(dev->type == SH1106_I2C) {
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <SSD1306_Init+0x1e0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d10c      	bne.n	80022da <SSD1306_Init+0x192>
        SSD1306_WRITECOMMAND(0x35); //  SH1106: 0x35 0.77xVcc
 80022c0:	2135      	movs	r1, #53	; 0x35
 80022c2:	2000      	movs	r0, #0
 80022c4:	f000 f9fe 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xAD); //--set DC-DC mode
 80022c8:	21ad      	movs	r1, #173	; 0xad
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 f9fa 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x8B); //  DC-DC converter ON
 80022d0:	218b      	movs	r1, #139	; 0x8b
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f9f6 	bl	80026c4 <ssd1306_I2C_Write>
 80022d8:	e00f      	b.n	80022fa <SSD1306_Init+0x1b2>
    } else {
        SSD1306_WRITECOMMAND(0x20); //  SSD1306: 0x20 0.77xVcc
 80022da:	2120      	movs	r1, #32
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 f9f1 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x8D); //--Charge Pump Setting
 80022e2:	218d      	movs	r1, #141	; 0x8d
 80022e4:	2000      	movs	r0, #0
 80022e6:	f000 f9ed 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x14);	//  Enable Charge Pump
 80022ea:	2114      	movs	r1, #20
 80022ec:	2000      	movs	r0, #0
 80022ee:	f000 f9e9 	bl	80026c4 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x2E); //--Stop scrolling
 80022f2:	212e      	movs	r1, #46	; 0x2e
 80022f4:	2000      	movs	r0, #0
 80022f6:	f000 f9e5 	bl	80026c4 <ssd1306_I2C_Write>
    }
    SSD1306_WRITECOMMAND(0xAF); //--turn on SH1106/SSD1306 panel
 80022fa:	21af      	movs	r1, #175	; 0xaf
 80022fc:	2000      	movs	r0, #0
 80022fe:	f000 f9e1 	bl	80026c4 <ssd1306_I2C_Write>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002302:	2000      	movs	r0, #0
 8002304:	f000 f84c 	bl	80023a0 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 8002308:	f000 f812 	bl	8002330 <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <SSD1306_Init+0x1e4>)
 800230e:	2200      	movs	r2, #0
 8002310:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <SSD1306_Init+0x1e4>)
 8002314:	2200      	movs	r2, #0
 8002316:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <SSD1306_Init+0x1e4>)
 800231a:	2201      	movs	r2, #1
 800231c:	715a      	strb	r2, [r3, #5]

    /* Return OK */
    return 1;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200007bc 	.word	0x200007bc
 800232c:	200007c0 	.word	0x200007c0

08002330 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
    uint8_t m;

    for (m = 0; m < 8; m++) {
 8002336:	2300      	movs	r3, #0
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	e024      	b.n	8002386 <SSD1306_UpdateScreen+0x56>
        SSD1306_WRITECOMMAND(0xB0 + m);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	3b50      	subs	r3, #80	; 0x50
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4619      	mov	r1, r3
 8002344:	2000      	movs	r0, #0
 8002346:	f000 f9bd 	bl	80026c4 <ssd1306_I2C_Write>
        if(dev->type == SH1106_I2C) {
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <SSD1306_UpdateScreen+0x68>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d104      	bne.n	800235e <SSD1306_UpdateScreen+0x2e>
            SSD1306_WRITECOMMAND(0x02); //---set low column address 	2: for SH1106 ***
 8002354:	2102      	movs	r1, #2
 8002356:	2000      	movs	r0, #0
 8002358:	f000 f9b4 	bl	80026c4 <ssd1306_I2C_Write>
 800235c:	e003      	b.n	8002366 <SSD1306_UpdateScreen+0x36>
        } else {
            SSD1306_WRITECOMMAND(0x00); //---set low column address 	0: for SSD1306+ ***
 800235e:	2100      	movs	r1, #0
 8002360:	2000      	movs	r0, #0
 8002362:	f000 f9af 	bl	80026c4 <ssd1306_I2C_Write>
        }
        SSD1306_WRITECOMMAND(0x10);
 8002366:	2110      	movs	r1, #16
 8002368:	2000      	movs	r0, #0
 800236a:	f000 f9ab 	bl	80026c4 <ssd1306_I2C_Write>
        /* Write multi data */
        ssd1306_I2C_WriteMulti(0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	01db      	lsls	r3, r3, #7
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <SSD1306_UpdateScreen+0x6c>)
 8002374:	4413      	add	r3, r2
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	4619      	mov	r1, r3
 800237a:	2040      	movs	r0, #64	; 0x40
 800237c:	f000 f944 	bl	8002608 <ssd1306_I2C_WriteMulti>
    for (m = 0; m < 8; m++) {
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	3301      	adds	r3, #1
 8002384:	71fb      	strb	r3, [r7, #7]
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b07      	cmp	r3, #7
 800238a:	d9d7      	bls.n	800233c <SSD1306_UpdateScreen+0xc>
    }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200007bc 	.word	0x200007bc
 800239c:	200003bc 	.word	0x200003bc

080023a0 <SSD1306_Fill>:
        SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
    }
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <SSD1306_Fill+0x14>
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <SSD1306_Fill+0x16>
 80023b4:	23ff      	movs	r3, #255	; 0xff
 80023b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ba:	4619      	mov	r1, r3
 80023bc:	4803      	ldr	r0, [pc, #12]	; (80023cc <SSD1306_Fill+0x2c>)
 80023be:	f003 ff63 	bl	8006288 <memset>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200003bc 	.word	0x200003bc

080023d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
 80023da:	460b      	mov	r3, r1
 80023dc:	80bb      	strh	r3, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	70fb      	strb	r3, [r7, #3]
    if (
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	2b7f      	cmp	r3, #127	; 0x7f
 80023e6:	d848      	bhi.n	800247a <SSD1306_DrawPixel+0xaa>
        x >= SSD1306_WIDTH ||
 80023e8:	88bb      	ldrh	r3, [r7, #4]
 80023ea:	2b3f      	cmp	r3, #63	; 0x3f
 80023ec:	d845      	bhi.n	800247a <SSD1306_DrawPixel+0xaa>
        /* Error */
        return;
    }

    /* Check if pixels are inverted */
    if (SSD1306.Inverted) {
 80023ee:	4b26      	ldr	r3, [pc, #152]	; (8002488 <SSD1306_DrawPixel+0xb8>)
 80023f0:	791b      	ldrb	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <SSD1306_DrawPixel+0x34>
        color = (SSD1306_COLOR_t)!color;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	70fb      	strb	r3, [r7, #3]
    }

    /* Set color */
    if (color == SSD1306_COLOR_WHITE) {
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d11a      	bne.n	8002440 <SSD1306_DrawPixel+0x70>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	88bb      	ldrh	r3, [r7, #4]
 800240e:	08db      	lsrs	r3, r3, #3
 8002410:	b298      	uxth	r0, r3
 8002412:	4603      	mov	r3, r0
 8002414:	01db      	lsls	r3, r3, #7
 8002416:	4413      	add	r3, r2
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <SSD1306_DrawPixel+0xbc>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	b25a      	sxtb	r2, r3
 800241e:	88bb      	ldrh	r3, [r7, #4]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	b25b      	sxtb	r3, r3
 800242c:	4313      	orrs	r3, r2
 800242e:	b259      	sxtb	r1, r3
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	4603      	mov	r3, r0
 8002434:	01db      	lsls	r3, r3, #7
 8002436:	4413      	add	r3, r2
 8002438:	b2c9      	uxtb	r1, r1
 800243a:	4a14      	ldr	r2, [pc, #80]	; (800248c <SSD1306_DrawPixel+0xbc>)
 800243c:	54d1      	strb	r1, [r2, r3]
 800243e:	e01d      	b.n	800247c <SSD1306_DrawPixel+0xac>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	88bb      	ldrh	r3, [r7, #4]
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	b298      	uxth	r0, r3
 8002448:	4603      	mov	r3, r0
 800244a:	01db      	lsls	r3, r3, #7
 800244c:	4413      	add	r3, r2
 800244e:	4a0f      	ldr	r2, [pc, #60]	; (800248c <SSD1306_DrawPixel+0xbc>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	b25a      	sxtb	r2, r3
 8002454:	88bb      	ldrh	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	b25b      	sxtb	r3, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	b25b      	sxtb	r3, r3
 8002466:	4013      	ands	r3, r2
 8002468:	b259      	sxtb	r1, r3
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	4603      	mov	r3, r0
 800246e:	01db      	lsls	r3, r3, #7
 8002470:	4413      	add	r3, r2
 8002472:	b2c9      	uxtb	r1, r1
 8002474:	4a05      	ldr	r2, [pc, #20]	; (800248c <SSD1306_DrawPixel+0xbc>)
 8002476:	54d1      	strb	r1, [r2, r3]
 8002478:	e000      	b.n	800247c <SSD1306_DrawPixel+0xac>
        return;
 800247a:	bf00      	nop
    }
}
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200007c0 	.word	0x200007c0
 800248c:	200003bc 	.word	0x200003bc

08002490 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	460a      	mov	r2, r1
 800249a:	80fb      	strh	r3, [r7, #6]
 800249c:	4613      	mov	r3, r2
 800249e:	80bb      	strh	r3, [r7, #4]
    /* Set write pointers */
    SSD1306.CurrentX = x;
 80024a0:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <SSD1306_GotoXY+0x28>)
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <SSD1306_GotoXY+0x28>)
 80024a8:	88bb      	ldrh	r3, [r7, #4]
 80024aa:	8053      	strh	r3, [r2, #2]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	200007c0 	.word	0x200007c0

080024bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;

    /* Check available space in LCD */
    if (
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <SSD1306_Putc+0xfc>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
    if (
 80024d8:	2b7f      	cmp	r3, #127	; 0x7f
 80024da:	dc07      	bgt.n	80024ec <SSD1306_Putc+0x30>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <SSD1306_Putc+0xfc>)
 80024de:	885b      	ldrh	r3, [r3, #2]
 80024e0:	461a      	mov	r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	4413      	add	r3, r2
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80024e8:	2b3f      	cmp	r3, #63	; 0x3f
 80024ea:	dd01      	ble.n	80024f0 <SSD1306_Putc+0x34>
    ) {
        /* Error */
        return 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e05e      	b.n	80025ae <SSD1306_Putc+0xf2>
    }

    /* Go through font */
    for (i = 0; i < Font->FontHeight; i++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e04b      	b.n	800258e <SSD1306_Putc+0xd2>
        b = Font->data[(ch - 32) * Font->FontHeight + i];
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	3b20      	subs	r3, #32
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	7849      	ldrb	r1, [r1, #1]
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4619      	mov	r1, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	440b      	add	r3, r1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < Font->FontWidth; j++) {
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e030      	b.n	800257c <SSD1306_Putc+0xc0>
            if ((b << j) & 0x8000) {
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <SSD1306_Putc+0x90>
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <SSD1306_Putc+0xfc>)
 800252c:	881a      	ldrh	r2, [r3, #0]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4413      	add	r3, r2
 8002534:	b298      	uxth	r0, r3
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <SSD1306_Putc+0xfc>)
 8002538:	885a      	ldrh	r2, [r3, #2]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	b29b      	uxth	r3, r3
 800253e:	4413      	add	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	79ba      	ldrb	r2, [r7, #6]
 8002544:	4619      	mov	r1, r3
 8002546:	f7ff ff43 	bl	80023d0 <SSD1306_DrawPixel>
 800254a:	e014      	b.n	8002576 <SSD1306_Putc+0xba>
            } else {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <SSD1306_Putc+0xfc>)
 800254e:	881a      	ldrh	r2, [r3, #0]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	b29b      	uxth	r3, r3
 8002554:	4413      	add	r3, r2
 8002556:	b298      	uxth	r0, r3
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <SSD1306_Putc+0xfc>)
 800255a:	885a      	ldrh	r2, [r3, #2]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	b29b      	uxth	r3, r3
 8002560:	4413      	add	r3, r2
 8002562:	b299      	uxth	r1, r3
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	f7ff ff2d 	bl	80023d0 <SSD1306_DrawPixel>
        for (j = 0; j < Font->FontWidth; j++) {
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3301      	adds	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4293      	cmp	r3, r2
 8002586:	d3c8      	bcc.n	800251a <SSD1306_Putc+0x5e>
    for (i = 0; i < Font->FontHeight; i++) {
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	461a      	mov	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4293      	cmp	r3, r2
 8002598:	d3ad      	bcc.n	80024f6 <SSD1306_Putc+0x3a>
            }
        }
    }

    /* Increase pointer */
    SSD1306.CurrentX += Font->FontWidth;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <SSD1306_Putc+0xfc>)
 800259c:	881a      	ldrh	r2, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <SSD1306_Putc+0xfc>)
 80025aa:	801a      	strh	r2, [r3, #0]

    /* Return character written */
    return ch;
 80025ac:	79fb      	ldrb	r3, [r7, #7]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200007c0 	.word	0x200007c0

080025bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str) {
 80025ca:	e012      	b.n	80025f2 <SSD1306_Puts+0x36>
        /* Write character by character */
        if (SSD1306_Putc(*str, Font, color) != *str) {
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	79fa      	ldrb	r2, [r7, #7]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff71 	bl	80024bc <SSD1306_Putc>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d002      	beq.n	80025ec <SSD1306_Puts+0x30>
            /* Return error */
            return *str;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	e008      	b.n	80025fe <SSD1306_Puts+0x42>
        }

        /* Increase string pointer */
        str++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e8      	bne.n	80025cc <SSD1306_Puts+0x10>
    }

    /* Everything OK, zero should be returned */
    return *str;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	781b      	ldrb	r3, [r3, #0]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <ssd1306_I2C_WriteMulti>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(uint8_t reg, uint8_t* data, uint16_t count)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b0c7      	sub	sp, #284	; 0x11c
 800260c:	af02      	add	r7, sp, #8
 800260e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002612:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002616:	6019      	str	r1, [r3, #0]
 8002618:	4611      	mov	r1, r2
 800261a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800261e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002622:	4602      	mov	r2, r0
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800262a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800262e:	460a      	mov	r2, r1
 8002630:	801a      	strh	r2, [r3, #0]
    uint8_t dt[256];
    dt[0] = reg;
 8002632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800263a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800263e:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 8002642:	7812      	ldrb	r2, [r2, #0]
 8002644:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for(i = 0; i < count; i++)
 8002646:	2300      	movs	r3, #0
 8002648:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800264c:	e015      	b.n	800267a <ssd1306_I2C_WriteMulti+0x72>
        dt[i+1] = data[i];
 800264e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002652:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002656:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	441a      	add	r2, r3
 800265e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002662:	3301      	adds	r3, #1
 8002664:	7811      	ldrb	r1, [r2, #0]
 8002666:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800266a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800266e:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < count; i++)
 8002670:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002674:	3301      	adds	r3, #1
 8002676:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800267a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800267e:	b29b      	uxth	r3, r3
 8002680:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002684:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002688:	8812      	ldrh	r2, [r2, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d8df      	bhi.n	800264e <ssd1306_I2C_WriteMulti+0x46>
    HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_address, dt, count+1, 20);
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <ssd1306_I2C_WriteMulti+0xb8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6898      	ldr	r0, [r3, #8]
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <ssd1306_I2C_WriteMulti+0xb8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	8899      	ldrh	r1, [r3, #4]
 800269a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800269e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	2414      	movs	r4, #20
 80026ae:	9400      	str	r4, [sp, #0]
 80026b0:	f001 fb98 	bl	8003de4 <HAL_I2C_Master_Transmit>
//  I2C1_Write(address, dt, count+1, 10);
}
 80026b4:	bf00      	nop
 80026b6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd90      	pop	{r4, r7, pc}
 80026be:	bf00      	nop
 80026c0:	200007bc 	.word	0x200007bc

080026c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t reg, uint8_t data)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	4603      	mov	r3, r0
 80026cc:	460a      	mov	r2, r1
 80026ce:	71fb      	strb	r3, [r7, #7]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71bb      	strb	r3, [r7, #6]
    uint8_t dt[2];
    dt[0] = reg;
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	733b      	strb	r3, [r7, #12]
    dt[1] = data;
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_address, dt, 2, 20);
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <ssd1306_I2C_Write+0x3c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6898      	ldr	r0, [r3, #8]
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <ssd1306_I2C_Write+0x3c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	8899      	ldrh	r1, [r3, #4]
 80026e8:	f107 020c 	add.w	r2, r7, #12
 80026ec:	2314      	movs	r3, #20
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2302      	movs	r3, #2
 80026f2:	f001 fb77 	bl	8003de4 <HAL_I2C_Master_Transmit>
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200007bc 	.word	0x200007bc

08002704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_MspInit+0x4c>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_MspInit+0x4c>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_MspInit+0x4c>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_MspInit+0x4c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_MspInit+0x4c>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_MspInit+0x4c>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800

08002754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <HAL_ADC_MspInit+0x7c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d127      	bne.n	80027c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_ADC_MspInit+0x80>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <HAL_ADC_MspInit+0x80>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_ADC_MspInit+0x80>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_ADC_MspInit+0x80>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <HAL_ADC_MspInit+0x80>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_ADC_MspInit+0x80>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027ae:	2302      	movs	r3, #2
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b2:	2303      	movs	r3, #3
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4805      	ldr	r0, [pc, #20]	; (80027d8 <HAL_ADC_MspInit+0x84>)
 80027c2:	f001 f82d 	bl	8003820 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027c6:	bf00      	nop
 80027c8:	3728      	adds	r7, #40	; 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40012000 	.word	0x40012000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020000 	.word	0x40020000

080027dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_I2C_MspInit+0x84>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d12b      	bne.n	8002856 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HAL_I2C_MspInit+0x88>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a17      	ldr	r2, [pc, #92]	; (8002864 <HAL_I2C_MspInit+0x88>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_I2C_MspInit+0x88>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800281a:	23c0      	movs	r3, #192	; 0xc0
 800281c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281e:	2312      	movs	r3, #18
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800282a:	2304      	movs	r3, #4
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <HAL_I2C_MspInit+0x8c>)
 8002836:	f000 fff3 	bl	8003820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_I2C_MspInit+0x88>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <HAL_I2C_MspInit+0x88>)
 8002844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_I2C_MspInit+0x88>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002856:	bf00      	nop
 8002858:	3728      	adds	r7, #40	; 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40005400 	.word	0x40005400
 8002864:	40023800 	.word	0x40023800
 8002868:	40020400 	.word	0x40020400

0800286c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_TIM_Encoder_MspInit+0x94>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d133      	bne.n	80028f6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <HAL_TIM_Encoder_MspInit+0x98>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_TIM_Encoder_MspInit+0x98>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_TIM_Encoder_MspInit+0x98>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_TIM_Encoder_MspInit+0x98>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a14      	ldr	r2, [pc, #80]	; (8002904 <HAL_TIM_Encoder_MspInit+0x98>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_TIM_Encoder_MspInit+0x98>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028c6:	23c0      	movs	r3, #192	; 0xc0
 80028c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028d6:	2302      	movs	r3, #2
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	4809      	ldr	r0, [pc, #36]	; (8002908 <HAL_TIM_Encoder_MspInit+0x9c>)
 80028e2:	f000 ff9d 	bl	8003820 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	201d      	movs	r0, #29
 80028ec:	f000 fecf 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028f0:	201d      	movs	r0, #29
 80028f2:	f000 fee8 	bl	80036c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028f6:	bf00      	nop
 80028f8:	3728      	adds	r7, #40	; 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40000400 	.word	0x40000400
 8002904:	40023800 	.word	0x40023800
 8002908:	40020000 	.word	0x40020000

0800290c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <HAL_UART_MspInit+0x94>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d133      	bne.n	8002996 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_UART_MspInit+0x98>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_UART_MspInit+0x98>)
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_UART_MspInit+0x98>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_UART_MspInit+0x98>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <HAL_UART_MspInit+0x98>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_UART_MspInit+0x98>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002966:	2304      	movs	r3, #4
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800296a:	2312      	movs	r3, #18
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002976:	2307      	movs	r3, #7
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4809      	ldr	r0, [pc, #36]	; (80029a8 <HAL_UART_MspInit+0x9c>)
 8002982:	f000 ff4d 	bl	8003820 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2026      	movs	r0, #38	; 0x26
 800298c:	f000 fe7f 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002990:	2026      	movs	r0, #38	; 0x26
 8002992:	f000 fe98 	bl	80036c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3728      	adds	r7, #40	; 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40004400 	.word	0x40004400
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020000 	.word	0x40020000

080029ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029b0:	e7fe      	b.n	80029b0 <NMI_Handler+0x4>

080029b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b6:	e7fe      	b.n	80029b6 <HardFault_Handler+0x4>

080029b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <MemManage_Handler+0x4>

080029be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c2:	e7fe      	b.n	80029c2 <BusFault_Handler+0x4>

080029c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <UsageFault_Handler+0x4>

080029ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f8:	f000 f96c 	bl	8002cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <TIM3_IRQHandler+0x10>)
 8002a06:	f002 faa1 	bl	8004f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000318 	.word	0x20000318

08002a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	owReadHandler();
 8002a18:	f7fe fb96 	bl	8001148 <owReadHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <USART2_IRQHandler+0x14>)
 8002a1e:	f002 fd43 	bl	80054a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000360 	.word	0x20000360

08002a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
	return 1;
 8002a30:	2301      	movs	r3, #1
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_kill>:

int _kill(int pid, int sig)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a46:	f003 fbf5 	bl	8006234 <__errno>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2216      	movs	r2, #22
 8002a4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_exit>:

void _exit (int status)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ffe7 	bl	8002a3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a6e:	e7fe      	b.n	8002a6e <_exit+0x12>

08002a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e00a      	b.n	8002a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a82:	f3af 8000 	nop.w
 8002a86:	4601      	mov	r1, r0
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	60ba      	str	r2, [r7, #8]
 8002a8e:	b2ca      	uxtb	r2, r1
 8002a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	dbf0      	blt.n	8002a82 <_read+0x12>
	}

return len;
 8002aa0:	687b      	ldr	r3, [r7, #4]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e009      	b.n	8002ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	60ba      	str	r2, [r7, #8]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	dbf1      	blt.n	8002abc <_write+0x12>
	}
	return len;
 8002ad8:	687b      	ldr	r3, [r7, #4]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <_close>:

int _close(int file)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <_isatty>:

int _isatty(int file)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
	return 1;
 8002b22:	2301      	movs	r3, #1
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b54:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <_sbrk+0x5c>)
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <_sbrk+0x60>)
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <_sbrk+0x64>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <_sbrk+0x64>)
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <_sbrk+0x68>)
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d207      	bcs.n	8002b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b7c:	f003 fb5a 	bl	8006234 <__errno>
 8002b80:	4603      	mov	r3, r0
 8002b82:	220c      	movs	r2, #12
 8002b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	e009      	b.n	8002ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <_sbrk+0x64>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <_sbrk+0x64>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <_sbrk+0x64>)
 8002b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20020000 	.word	0x20020000
 8002bac:	00000400 	.word	0x00000400
 8002bb0:	200007c8 	.word	0x200007c8
 8002bb4:	200007e0 	.word	0x200007e0

08002bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <SystemInit+0x20>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <SystemInit+0x20>)
 8002bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002be2:	490e      	ldr	r1, [pc, #56]	; (8002c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002be4:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be8:	e002      	b.n	8002bf0 <LoopCopyDataInit>

08002bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bee:	3304      	adds	r3, #4

08002bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf4:	d3f9      	bcc.n	8002bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bf6:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bf8:	4c0b      	ldr	r4, [pc, #44]	; (8002c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bfc:	e001      	b.n	8002c02 <LoopFillZerobss>

08002bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c00:	3204      	adds	r2, #4

08002c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c04:	d3fb      	bcc.n	8002bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c06:	f7ff ffd7 	bl	8002bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c0a:	f003 fb19 	bl	8006240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c0e:	f7fe ff4b 	bl	8001aa8 <main>
  bx  lr    
 8002c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c1c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002c20:	0800be2c 	.word	0x0800be2c
  ldr r2, =_sbss
 8002c24:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002c28:	200007e0 	.word	0x200007e0

08002c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c2c:	e7fe      	b.n	8002c2c <ADC_IRQHandler>
	...

08002c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <HAL_Init+0x40>)
 8002c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_Init+0x40>)
 8002c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_Init+0x40>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <HAL_Init+0x40>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c58:	2003      	movs	r0, #3
 8002c5a:	f000 fd0d 	bl	8003678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f000 f808 	bl	8002c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c64:	f7ff fd4e 	bl	8002704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023c00 	.word	0x40023c00

08002c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_InitTick+0x54>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_InitTick+0x58>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	4619      	mov	r1, r3
 8002c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fd25 	bl	80036e2 <HAL_SYSTICK_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00e      	b.n	8002cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	d80a      	bhi.n	8002cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f000 fced 	bl	800368e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <HAL_InitTick+0x5c>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000024 	.word	0x20000024
 8002ccc:	2000002c 	.word	0x2000002c
 8002cd0:	20000028 	.word	0x20000028

08002cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_IncTick+0x20>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_IncTick+0x24>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_IncTick+0x24>)
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	2000002c 	.word	0x2000002c
 8002cf8:	200007cc 	.word	0x200007cc

08002cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_GetTick+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	200007cc 	.word	0x200007cc

08002d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff ffee 	bl	8002cfc <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d005      	beq.n	8002d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_Delay+0x44>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4413      	add	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d3a:	bf00      	nop
 8002d3c:	f7ff ffde 	bl	8002cfc <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d8f7      	bhi.n	8002d3c <HAL_Delay+0x28>
  {
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	2000002c 	.word	0x2000002c

08002d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e033      	b.n	8002dda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff fcea 	bl	8002754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002da2:	f023 0302 	bic.w	r3, r3, #2
 8002da6:	f043 0202 	orr.w	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa96 	bl	80032e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8002dca:	e001      	b.n	8002dd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_Start+0x1a>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e097      	b.n	8002f2e <HAL_ADC_Start+0x14a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d018      	beq.n	8002e46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e24:	4b45      	ldr	r3, [pc, #276]	; (8002f3c <HAL_ADC_Start+0x158>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a45      	ldr	r2, [pc, #276]	; (8002f40 <HAL_ADC_Start+0x15c>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0c9a      	lsrs	r2, r3, #18
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e38:	e002      	b.n	8002e40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f9      	bne.n	8002e3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d15f      	bne.n	8002f14 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e92:	d106      	bne.n	8002ea2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	f023 0206 	bic.w	r2, r3, #6
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
 8002ea0:	e002      	b.n	8002ea8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_ADC_Start+0x160>)
 8002eb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ebc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d129      	bne.n	8002f2c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e020      	b.n	8002f2c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_ADC_Start+0x164>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d11b      	bne.n	8002f2c <HAL_ADC_Start+0x148>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d114      	bne.n	8002f2c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e00b      	b.n	8002f2c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0210 	orr.w	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000024 	.word	0x20000024
 8002f40:	431bde83 	.word	0x431bde83
 8002f44:	40012300 	.word	0x40012300
 8002f48:	40012000 	.word	0x40012000

08002f4c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d113      	bne.n	8002f92 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f78:	d10b      	bne.n	8002f92 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e063      	b.n	800305a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002f92:	f7ff feb3 	bl	8002cfc <HAL_GetTick>
 8002f96:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f98:	e021      	b.n	8002fde <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d01d      	beq.n	8002fde <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_ADC_PollForConversion+0x6c>
 8002fa8:	f7ff fea8 	bl	8002cfc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d212      	bcs.n	8002fde <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d00b      	beq.n	8002fde <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e03d      	b.n	800305a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d1d6      	bne.n	8002f9a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0212 	mvn.w	r2, #18
 8002ff4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d123      	bne.n	8003058 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	d11f      	bne.n	8003058 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003030:	2b00      	cmp	r3, #0
 8003032:	d111      	bne.n	8003058 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1c>
 8003094:	2302      	movs	r3, #2
 8003096:	e113      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x244>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	d925      	bls.n	80030f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68d9      	ldr	r1, [r3, #12]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	3b1e      	subs	r3, #30
 80030be:	2207      	movs	r2, #7
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43da      	mvns	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	400a      	ands	r2, r1
 80030cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68d9      	ldr	r1, [r3, #12]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	4603      	mov	r3, r0
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4403      	add	r3, r0
 80030e6:	3b1e      	subs	r3, #30
 80030e8:	409a      	lsls	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	e022      	b.n	800313a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6919      	ldr	r1, [r3, #16]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	2207      	movs	r2, #7
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43da      	mvns	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	400a      	ands	r2, r1
 8003116:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6919      	ldr	r1, [r3, #16]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	4618      	mov	r0, r3
 800312a:	4603      	mov	r3, r0
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4403      	add	r3, r0
 8003130:	409a      	lsls	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b06      	cmp	r3, #6
 8003140:	d824      	bhi.n	800318c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b05      	subs	r3, #5
 8003154:	221f      	movs	r2, #31
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	400a      	ands	r2, r1
 8003162:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	4618      	mov	r0, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	3b05      	subs	r3, #5
 800317e:	fa00 f203 	lsl.w	r2, r0, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	635a      	str	r2, [r3, #52]	; 0x34
 800318a:	e04c      	b.n	8003226 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	d824      	bhi.n	80031de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	3b23      	subs	r3, #35	; 0x23
 80031a6:	221f      	movs	r2, #31
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43da      	mvns	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	400a      	ands	r2, r1
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4618      	mov	r0, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	3b23      	subs	r3, #35	; 0x23
 80031d0:	fa00 f203 	lsl.w	r2, r0, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
 80031dc:	e023      	b.n	8003226 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	3b41      	subs	r3, #65	; 0x41
 80031f0:	221f      	movs	r2, #31
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	400a      	ands	r2, r1
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	4618      	mov	r0, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	3b41      	subs	r3, #65	; 0x41
 800321a:	fa00 f203 	lsl.w	r2, r0, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_ADC_ConfigChannel+0x250>)
 8003228:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <HAL_ADC_ConfigChannel+0x254>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10f      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1d8>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b12      	cmp	r3, #18
 800323a:	d10b      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <HAL_ADC_ConfigChannel+0x254>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d12b      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x23a>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_ADC_ConfigChannel+0x258>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <HAL_ADC_ConfigChannel+0x1f4>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b11      	cmp	r3, #17
 800326e:	d122      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <HAL_ADC_ConfigChannel+0x258>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d111      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_ADC_ConfigChannel+0x25c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a11      	ldr	r2, [pc, #68]	; (80032dc <HAL_ADC_ConfigChannel+0x260>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	0c9a      	lsrs	r2, r3, #18
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032a8:	e002      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f9      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	40012300 	.word	0x40012300
 80032d0:	40012000 	.word	0x40012000
 80032d4:	10000012 	.word	0x10000012
 80032d8:	20000024 	.word	0x20000024
 80032dc:	431bde83 	.word	0x431bde83

080032e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e8:	4b79      	ldr	r3, [pc, #484]	; (80034d0 <ADC_Init+0x1f0>)
 80032ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	021a      	lsls	r2, r3, #8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	4a58      	ldr	r2, [pc, #352]	; (80034d4 <ADC_Init+0x1f4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d022      	beq.n	80033be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6899      	ldr	r1, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	e00f      	b.n	80033de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0202 	bic.w	r2, r2, #2
 80033ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7e1b      	ldrb	r3, [r3, #24]
 80033f8:	005a      	lsls	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01b      	beq.n	8003444 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800342a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	3b01      	subs	r3, #1
 8003438:	035a      	lsls	r2, r3, #13
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	e007      	b.n	8003454 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003452:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	3b01      	subs	r3, #1
 8003470:	051a      	lsls	r2, r3, #20
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6899      	ldr	r1, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003496:	025a      	lsls	r2, r3, #9
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6899      	ldr	r1, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	029a      	lsls	r2, r3, #10
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40012300 	.word	0x40012300
 80034d4:	0f000001 	.word	0x0f000001

080034d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <__NVIC_SetPriorityGrouping+0x44>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f4:	4013      	ands	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350a:	4a04      	ldr	r2, [pc, #16]	; (800351c <__NVIC_SetPriorityGrouping+0x44>)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	60d3      	str	r3, [r2, #12]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <__NVIC_GetPriorityGrouping+0x18>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	0a1b      	lsrs	r3, r3, #8
 800352a:	f003 0307 	and.w	r3, r3, #7
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	2b00      	cmp	r3, #0
 800354c:	db0b      	blt.n	8003566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	f003 021f 	and.w	r2, r3, #31
 8003554:	4907      	ldr	r1, [pc, #28]	; (8003574 <__NVIC_EnableIRQ+0x38>)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2001      	movs	r0, #1
 800355e:	fa00 f202 	lsl.w	r2, r0, r2
 8003562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	e000e100 	.word	0xe000e100

08003578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	2b00      	cmp	r3, #0
 800358a:	db0a      	blt.n	80035a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	490c      	ldr	r1, [pc, #48]	; (80035c4 <__NVIC_SetPriority+0x4c>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	0112      	lsls	r2, r2, #4
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	440b      	add	r3, r1
 800359c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a0:	e00a      	b.n	80035b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	4908      	ldr	r1, [pc, #32]	; (80035c8 <__NVIC_SetPriority+0x50>)
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	3b04      	subs	r3, #4
 80035b0:	0112      	lsls	r2, r2, #4
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	440b      	add	r3, r1
 80035b6:	761a      	strb	r2, [r3, #24]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000e100 	.word	0xe000e100
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b089      	sub	sp, #36	; 0x24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f1c3 0307 	rsb	r3, r3, #7
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	bf28      	it	cs
 80035ea:	2304      	movcs	r3, #4
 80035ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d902      	bls.n	80035fc <NVIC_EncodePriority+0x30>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3b03      	subs	r3, #3
 80035fa:	e000      	b.n	80035fe <NVIC_EncodePriority+0x32>
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	f04f 32ff 	mov.w	r2, #4294967295
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43da      	mvns	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	401a      	ands	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003614:	f04f 31ff 	mov.w	r1, #4294967295
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	43d9      	mvns	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003624:	4313      	orrs	r3, r2
         );
}
 8003626:	4618      	mov	r0, r3
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003644:	d301      	bcc.n	800364a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003646:	2301      	movs	r3, #1
 8003648:	e00f      	b.n	800366a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <SysTick_Config+0x40>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003652:	210f      	movs	r1, #15
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	f7ff ff8e 	bl	8003578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <SysTick_Config+0x40>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003662:	4b04      	ldr	r3, [pc, #16]	; (8003674 <SysTick_Config+0x40>)
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	e000e010 	.word	0xe000e010

08003678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff29 	bl	80034d8 <__NVIC_SetPriorityGrouping>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a0:	f7ff ff3e 	bl	8003520 <__NVIC_GetPriorityGrouping>
 80036a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	6978      	ldr	r0, [r7, #20]
 80036ac:	f7ff ff8e 	bl	80035cc <NVIC_EncodePriority>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff5d 	bl	8003578 <__NVIC_SetPriority>
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff31 	bl	800353c <__NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ffa2 	bl	8003634 <SysTick_Config>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003708:	f7ff faf8 	bl	8002cfc <HAL_GetTick>
 800370c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d008      	beq.n	800372c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e052      	b.n	80037d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0216 	bic.w	r2, r2, #22
 800373a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d103      	bne.n	800375c <HAL_DMA_Abort+0x62>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0208 	bic.w	r2, r2, #8
 800376a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800377c:	e013      	b.n	80037a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800377e:	f7ff fabd 	bl	8002cfc <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b05      	cmp	r3, #5
 800378a:	d90c      	bls.n	80037a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2203      	movs	r2, #3
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e015      	b.n	80037d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e4      	bne.n	800377e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	223f      	movs	r2, #63	; 0x3f
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d004      	beq.n	80037f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e00c      	b.n	8003812 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2205      	movs	r2, #5
 80037fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	; 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	e159      	b.n	8003af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800383c:	2201      	movs	r2, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	f040 8148 	bne.w	8003aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d005      	beq.n	8003872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386e:	2b02      	cmp	r3, #2
 8003870:	d130      	bne.n	80038d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	2203      	movs	r2, #3
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038a8:	2201      	movs	r2, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 0201 	and.w	r2, r3, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d017      	beq.n	8003910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d123      	bne.n	8003964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	08da      	lsrs	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3208      	adds	r2, #8
 8003924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	220f      	movs	r2, #15
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	08da      	lsrs	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3208      	adds	r2, #8
 800395e:	69b9      	ldr	r1, [r7, #24]
 8003960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a2 	beq.w	8003aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b57      	ldr	r3, [pc, #348]	; (8003b08 <HAL_GPIO_Init+0x2e8>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4a56      	ldr	r2, [pc, #344]	; (8003b08 <HAL_GPIO_Init+0x2e8>)
 80039b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b4:	6453      	str	r3, [r2, #68]	; 0x44
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <HAL_GPIO_Init+0x2e8>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039c2:	4a52      	ldr	r2, [pc, #328]	; (8003b0c <HAL_GPIO_Init+0x2ec>)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	3302      	adds	r3, #2
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	220f      	movs	r2, #15
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a49      	ldr	r2, [pc, #292]	; (8003b10 <HAL_GPIO_Init+0x2f0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_GPIO_Init+0x202>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a48      	ldr	r2, [pc, #288]	; (8003b14 <HAL_GPIO_Init+0x2f4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_GPIO_Init+0x1fe>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a47      	ldr	r2, [pc, #284]	; (8003b18 <HAL_GPIO_Init+0x2f8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x1fa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a46      	ldr	r2, [pc, #280]	; (8003b1c <HAL_GPIO_Init+0x2fc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x1f6>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a45      	ldr	r2, [pc, #276]	; (8003b20 <HAL_GPIO_Init+0x300>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x1f2>
 8003a0e:	2304      	movs	r3, #4
 8003a10:	e008      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a12:	2307      	movs	r3, #7
 8003a14:	e006      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a16:	2303      	movs	r3, #3
 8003a18:	e004      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e002      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_GPIO_Init+0x204>
 8003a22:	2300      	movs	r3, #0
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f002 0203 	and.w	r2, r2, #3
 8003a2a:	0092      	lsls	r2, r2, #2
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a34:	4935      	ldr	r1, [pc, #212]	; (8003b0c <HAL_GPIO_Init+0x2ec>)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a42:	4b38      	ldr	r3, [pc, #224]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a66:	4a2f      	ldr	r2, [pc, #188]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a90:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aba:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac0:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ae4:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <HAL_GPIO_Init+0x304>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	f67f aea2 	bls.w	800383c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3724      	adds	r7, #36	; 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40020400 	.word	0x40020400
 8003b18:	40020800 	.word	0x40020800
 8003b1c:	40020c00 	.word	0x40020c00
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40013c00 	.word	0x40013c00

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e12b      	b.n	8003dc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fe fe2a 	bl	80027dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f001 f848 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4a81      	ldr	r2, [pc, #516]	; (8003dd0 <HAL_I2C_Init+0x274>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d807      	bhi.n	8003be0 <HAL_I2C_Init+0x84>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a80      	ldr	r2, [pc, #512]	; (8003dd4 <HAL_I2C_Init+0x278>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	bf94      	ite	ls
 8003bd8:	2301      	movls	r3, #1
 8003bda:	2300      	movhi	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e006      	b.n	8003bee <HAL_I2C_Init+0x92>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a7d      	ldr	r2, [pc, #500]	; (8003dd8 <HAL_I2C_Init+0x27c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0e7      	b.n	8003dc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a78      	ldr	r2, [pc, #480]	; (8003ddc <HAL_I2C_Init+0x280>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	0c9b      	lsrs	r3, r3, #18
 8003c00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a6a      	ldr	r2, [pc, #424]	; (8003dd0 <HAL_I2C_Init+0x274>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d802      	bhi.n	8003c30 <HAL_I2C_Init+0xd4>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	e009      	b.n	8003c44 <HAL_I2C_Init+0xe8>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	4a69      	ldr	r2, [pc, #420]	; (8003de0 <HAL_I2C_Init+0x284>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	3301      	adds	r3, #1
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	495c      	ldr	r1, [pc, #368]	; (8003dd0 <HAL_I2C_Init+0x274>)
 8003c60:	428b      	cmp	r3, r1
 8003c62:	d819      	bhi.n	8003c98 <HAL_I2C_Init+0x13c>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e59      	subs	r1, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c72:	1c59      	adds	r1, r3, #1
 8003c74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c78:	400b      	ands	r3, r1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_I2C_Init+0x138>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1e59      	subs	r1, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c92:	e051      	b.n	8003d38 <HAL_I2C_Init+0x1dc>
 8003c94:	2304      	movs	r3, #4
 8003c96:	e04f      	b.n	8003d38 <HAL_I2C_Init+0x1dc>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d111      	bne.n	8003cc4 <HAL_I2C_Init+0x168>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1e58      	subs	r0, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	440b      	add	r3, r1
 8003cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e012      	b.n	8003cea <HAL_I2C_Init+0x18e>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e58      	subs	r0, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	0099      	lsls	r1, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_I2C_Init+0x196>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e022      	b.n	8003d38 <HAL_I2C_Init+0x1dc>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10e      	bne.n	8003d18 <HAL_I2C_Init+0x1bc>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1e58      	subs	r0, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	440b      	add	r3, r1
 8003d08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d16:	e00f      	b.n	8003d38 <HAL_I2C_Init+0x1dc>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1e58      	subs	r0, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	0099      	lsls	r1, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	6809      	ldr	r1, [r1, #0]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6911      	ldr	r1, [r2, #16]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68d2      	ldr	r2, [r2, #12]
 8003d72:	4311      	orrs	r1, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	000186a0 	.word	0x000186a0
 8003dd4:	001e847f 	.word	0x001e847f
 8003dd8:	003d08ff 	.word	0x003d08ff
 8003ddc:	431bde83 	.word	0x431bde83
 8003de0:	10624dd3 	.word	0x10624dd3

08003de4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	461a      	mov	r2, r3
 8003df0:	460b      	mov	r3, r1
 8003df2:	817b      	strh	r3, [r7, #10]
 8003df4:	4613      	mov	r3, r2
 8003df6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df8:	f7fe ff80 	bl	8002cfc <HAL_GetTick>
 8003dfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	f040 80e0 	bne.w	8003fcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2319      	movs	r3, #25
 8003e12:	2201      	movs	r2, #1
 8003e14:	4970      	ldr	r1, [pc, #448]	; (8003fd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f964 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
 8003e24:	e0d3      	b.n	8003fce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_I2C_Master_Transmit+0x50>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0cc      	b.n	8003fce <HAL_I2C_Master_Transmit+0x1ea>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d007      	beq.n	8003e5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2221      	movs	r2, #33	; 0x21
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2210      	movs	r2, #16
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	893a      	ldrh	r2, [r7, #8]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a50      	ldr	r2, [pc, #320]	; (8003fdc <HAL_I2C_Master_Transmit+0x1f8>)
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e9c:	8979      	ldrh	r1, [r7, #10]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f89c 	bl	8003fe0 <I2C_MasterRequestWrite>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e08d      	b.n	8003fce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ec8:	e066      	b.n	8003f98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f9de 	bl	8004290 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e06b      	b.n	8003fce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d11b      	bne.n	8003f6c <HAL_I2C_Master_Transmit+0x188>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d017      	beq.n	8003f6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	6a39      	ldr	r1, [r7, #32]
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f9ce 	bl	8004312 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00d      	beq.n	8003f98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d107      	bne.n	8003f94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e01a      	b.n	8003fce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d194      	bne.n	8003eca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	00100002 	.word	0x00100002
 8003fdc:	ffff0000 	.word	0xffff0000

08003fe0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	460b      	mov	r3, r1
 8003fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d006      	beq.n	800400a <I2C_MasterRequestWrite+0x2a>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d003      	beq.n	800400a <I2C_MasterRequestWrite+0x2a>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004008:	d108      	bne.n	800401c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e00b      	b.n	8004034 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	2b12      	cmp	r3, #18
 8004022:	d107      	bne.n	8004034 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004032:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f84f 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00d      	beq.n	8004068 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405a:	d103      	bne.n	8004064 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e035      	b.n	80040d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004070:	d108      	bne.n	8004084 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004072:	897b      	ldrh	r3, [r7, #10]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004080:	611a      	str	r2, [r3, #16]
 8004082:	e01b      	b.n	80040bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004084:	897b      	ldrh	r3, [r7, #10]
 8004086:	11db      	asrs	r3, r3, #7
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f003 0306 	and.w	r3, r3, #6
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f063 030f 	orn	r3, r3, #15
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	490e      	ldr	r1, [pc, #56]	; (80040dc <I2C_MasterRequestWrite+0xfc>)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f875 	bl	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e010      	b.n	80040d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040b2:	897b      	ldrh	r3, [r7, #10]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4907      	ldr	r1, [pc, #28]	; (80040e0 <I2C_MasterRequestWrite+0x100>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f865 	bl	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	00010008 	.word	0x00010008
 80040e0:	00010002 	.word	0x00010002

080040e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f4:	e025      	b.n	8004142 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d021      	beq.n	8004142 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fe fdfd 	bl	8002cfc <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <I2C_WaitOnFlagUntilTimeout+0x30>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d116      	bne.n	8004142 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e023      	b.n	800418a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d10d      	bne.n	8004168 <I2C_WaitOnFlagUntilTimeout+0x84>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	e00c      	b.n	8004182 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	429a      	cmp	r2, r3
 8004186:	d0b6      	beq.n	80040f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041a0:	e051      	b.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b0:	d123      	bne.n	80041fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f043 0204 	orr.w	r2, r3, #4
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e046      	b.n	8004288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d021      	beq.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004202:	f7fe fd7b 	bl	8002cfc <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d116      	bne.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e020      	b.n	8004288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10c      	bne.n	800426a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e00b      	b.n	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	43da      	mvns	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4013      	ands	r3, r2
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d18d      	bne.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800429c:	e02d      	b.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f878 	bl	8004394 <I2C_IsAcknowledgeFailed>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e02d      	b.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d021      	beq.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b6:	f7fe fd21 	bl	8002cfc <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d116      	bne.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e007      	b.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	2b80      	cmp	r3, #128	; 0x80
 8004306:	d1ca      	bne.n	800429e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800431e:	e02d      	b.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f837 	bl	8004394 <I2C_IsAcknowledgeFailed>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e02d      	b.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d021      	beq.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004338:	f7fe fce0 	bl	8002cfc <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d116      	bne.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	f043 0220 	orr.w	r2, r3, #32
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e007      	b.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d1ca      	bne.n	8004320 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043aa:	d11b      	bne.n	80043e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f043 0204 	orr.w	r2, r3, #4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e267      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d075      	beq.n	80044fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004412:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b04      	cmp	r3, #4
 800441c:	d00c      	beq.n	8004438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441e:	4b85      	ldr	r3, [pc, #532]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004426:	2b08      	cmp	r3, #8
 8004428:	d112      	bne.n	8004450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442a:	4b82      	ldr	r3, [pc, #520]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004436:	d10b      	bne.n	8004450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	4b7e      	ldr	r3, [pc, #504]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d05b      	beq.n	80044fc <HAL_RCC_OscConfig+0x108>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d157      	bne.n	80044fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e242      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d106      	bne.n	8004468 <HAL_RCC_OscConfig+0x74>
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e01d      	b.n	80044a4 <HAL_RCC_OscConfig+0xb0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x98>
 8004472:	4b70      	ldr	r3, [pc, #448]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6f      	ldr	r2, [pc, #444]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b6d      	ldr	r3, [pc, #436]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6c      	ldr	r2, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e00b      	b.n	80044a4 <HAL_RCC_OscConfig+0xb0>
 800448c:	4b69      	ldr	r3, [pc, #420]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a68      	ldr	r2, [pc, #416]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4b66      	ldr	r3, [pc, #408]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a65      	ldr	r2, [pc, #404]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800449e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d013      	beq.n	80044d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fe fc26 	bl	8002cfc <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fe fc22 	bl	8002cfc <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e207      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c6:	4b5b      	ldr	r3, [pc, #364]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0xc0>
 80044d2:	e014      	b.n	80044fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fe fc12 	bl	8002cfc <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fe fc0e 	bl	8002cfc <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e1f3      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ee:	4b51      	ldr	r3, [pc, #324]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0xe8>
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d063      	beq.n	80045d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800450a:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800451e:	2b08      	cmp	r3, #8
 8004520:	d11c      	bne.n	800455c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004522:	4b44      	ldr	r3, [pc, #272]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d116      	bne.n	800455c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452e:	4b41      	ldr	r3, [pc, #260]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_RCC_OscConfig+0x152>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e1c7      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004546:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4937      	ldr	r1, [pc, #220]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455a:	e03a      	b.n	80045d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d020      	beq.n	80045a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004564:	4b34      	ldr	r3, [pc, #208]	; (8004638 <HAL_RCC_OscConfig+0x244>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fe fbc7 	bl	8002cfc <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004572:	f7fe fbc3 	bl	8002cfc <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e1a8      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004584:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b28      	ldr	r3, [pc, #160]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4925      	ldr	r1, [pc, #148]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]
 80045a4:	e015      	b.n	80045d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_RCC_OscConfig+0x244>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fe fba6 	bl	8002cfc <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b4:	f7fe fba2 	bl	8002cfc <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e187      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d036      	beq.n	800464c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_RCC_OscConfig+0x248>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fe fb86 	bl	8002cfc <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f4:	f7fe fb82 	bl	8002cfc <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e167      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x200>
 8004612:	e01b      	b.n	800464c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_RCC_OscConfig+0x248>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461a:	f7fe fb6f 	bl	8002cfc <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004620:	e00e      	b.n	8004640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004622:	f7fe fb6b 	bl	8002cfc <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d907      	bls.n	8004640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e150      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
 8004634:	40023800 	.word	0x40023800
 8004638:	42470000 	.word	0x42470000
 800463c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	4b88      	ldr	r3, [pc, #544]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ea      	bne.n	8004622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8097 	beq.w	8004788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465e:	4b81      	ldr	r3, [pc, #516]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	4b7d      	ldr	r3, [pc, #500]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a7c      	ldr	r2, [pc, #496]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b7a      	ldr	r3, [pc, #488]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468a:	4b77      	ldr	r3, [pc, #476]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d118      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004696:	4b74      	ldr	r3, [pc, #464]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a73      	ldr	r2, [pc, #460]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a2:	f7fe fb2b 	bl	8002cfc <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046aa:	f7fe fb27 	bl	8002cfc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e10c      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	4b6a      	ldr	r3, [pc, #424]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d106      	bne.n	80046de <HAL_RCC_OscConfig+0x2ea>
 80046d0:	4b64      	ldr	r3, [pc, #400]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a63      	ldr	r2, [pc, #396]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	e01c      	b.n	8004718 <HAL_RCC_OscConfig+0x324>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d10c      	bne.n	8004700 <HAL_RCC_OscConfig+0x30c>
 80046e6:	4b5f      	ldr	r3, [pc, #380]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a5e      	ldr	r2, [pc, #376]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	4b5c      	ldr	r3, [pc, #368]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a5b      	ldr	r2, [pc, #364]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
 80046fe:	e00b      	b.n	8004718 <HAL_RCC_OscConfig+0x324>
 8004700:	4b58      	ldr	r3, [pc, #352]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a57      	ldr	r2, [pc, #348]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	4b55      	ldr	r3, [pc, #340]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a54      	ldr	r2, [pc, #336]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004712:	f023 0304 	bic.w	r3, r3, #4
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fe faec 	bl	8002cfc <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	e00a      	b.n	800473e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004728:	f7fe fae8 	bl	8002cfc <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	; 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e0cb      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473e:	4b49      	ldr	r3, [pc, #292]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ee      	beq.n	8004728 <HAL_RCC_OscConfig+0x334>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474c:	f7fe fad6 	bl	8002cfc <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004752:	e00a      	b.n	800476a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004754:	f7fe fad2 	bl	8002cfc <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0b5      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476a:	4b3e      	ldr	r3, [pc, #248]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ee      	bne.n	8004754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d105      	bne.n	8004788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477c:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	4a38      	ldr	r2, [pc, #224]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a1 	beq.w	80048d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004792:	4b34      	ldr	r3, [pc, #208]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b08      	cmp	r3, #8
 800479c:	d05c      	beq.n	8004858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d141      	bne.n	800482a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_RCC_OscConfig+0x478>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fe faa6 	bl	8002cfc <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fe faa2 	bl	8002cfc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e087      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b27      	ldr	r3, [pc, #156]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	019b      	lsls	r3, r3, #6
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	3b01      	subs	r3, #1
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	491b      	ldr	r1, [pc, #108]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <HAL_RCC_OscConfig+0x478>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fe fa7b 	bl	8002cfc <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480a:	f7fe fa77 	bl	8002cfc <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e05c      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x416>
 8004828:	e054      	b.n	80048d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <HAL_RCC_OscConfig+0x478>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fe fa64 	bl	8002cfc <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004838:	f7fe fa60 	bl	8002cfc <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e045      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	4b06      	ldr	r3, [pc, #24]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x444>
 8004856:	e03d      	b.n	80048d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d107      	bne.n	8004870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e038      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
 8004864:	40023800 	.word	0x40023800
 8004868:	40007000 	.word	0x40007000
 800486c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_RCC_OscConfig+0x4ec>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d028      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d121      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d11a      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d111      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	3b01      	subs	r3, #1
 80048ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800

080048e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0cc      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f8:	4b68      	ldr	r3, [pc, #416]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d90c      	bls.n	8004920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b65      	ldr	r3, [pc, #404]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b63      	ldr	r3, [pc, #396]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0b8      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004938:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a58      	ldr	r2, [pc, #352]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004950:	4b53      	ldr	r3, [pc, #332]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a52      	ldr	r2, [pc, #328]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800495a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495c:	4b50      	ldr	r3, [pc, #320]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	494d      	ldr	r1, [pc, #308]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d044      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d119      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e07f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d107      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a2:	4b3f      	ldr	r3, [pc, #252]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e06f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b2:	4b3b      	ldr	r3, [pc, #236]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e067      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049c2:	4b37      	ldr	r3, [pc, #220]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4934      	ldr	r1, [pc, #208]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d4:	f7fe f992 	bl	8002cfc <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fe f98e 	bl	8002cfc <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e04f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 020c 	and.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d1eb      	bne.n	80049dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d20c      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e032      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4916      	ldr	r1, [pc, #88]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	490e      	ldr	r1, [pc, #56]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a6a:	f000 f821 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	490a      	ldr	r1, [pc, #40]	; (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe f8f2 	bl	8002c74 <HAL_InitTick>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023c00 	.word	0x40023c00
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	0800b960 	.word	0x0800b960
 8004aa8:	20000024 	.word	0x20000024
 8004aac:	20000028 	.word	0x20000028

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab4:	b090      	sub	sp, #64	; 0x40
 8004ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
 8004abc:	2300      	movs	r3, #0
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac8:	4b59      	ldr	r3, [pc, #356]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d00d      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	f200 80a1 	bhi.w	8004c1c <HAL_RCC_GetSysClockFreq+0x16c>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d003      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x3a>
 8004ae2:	e09b      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ae6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004ae8:	e09b      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aea:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8004aec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004aee:	e098      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af0:	4b4f      	ldr	r3, [pc, #316]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004afa:	4b4d      	ldr	r3, [pc, #308]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d028      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	627a      	str	r2, [r7, #36]	; 0x24
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b1c:	fb03 f201 	mul.w	r2, r3, r1
 8004b20:	2300      	movs	r3, #0
 8004b22:	fb00 f303 	mul.w	r3, r0, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	4a43      	ldr	r2, [pc, #268]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b2a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b30:	460a      	mov	r2, r1
 8004b32:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b36:	4413      	add	r3, r2
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	61fa      	str	r2, [r7, #28]
 8004b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b4a:	f7fc f8b5 	bl	8000cb8 <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4613      	mov	r3, r2
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b56:	e053      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b58:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	099b      	lsrs	r3, r3, #6
 8004b5e:	2200      	movs	r2, #0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	617a      	str	r2, [r7, #20]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b6a:	f04f 0b00 	mov.w	fp, #0
 8004b6e:	4652      	mov	r2, sl
 8004b70:	465b      	mov	r3, fp
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	0159      	lsls	r1, r3, #5
 8004b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b80:	0150      	lsls	r0, r2, #5
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	ebb2 080a 	subs.w	r8, r2, sl
 8004b8a:	eb63 090b 	sbc.w	r9, r3, fp
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ba2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ba6:	eb63 0509 	sbc.w	r5, r3, r9
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	00eb      	lsls	r3, r5, #3
 8004bb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb8:	00e2      	lsls	r2, r4, #3
 8004bba:	4614      	mov	r4, r2
 8004bbc:	461d      	mov	r5, r3
 8004bbe:	eb14 030a 	adds.w	r3, r4, sl
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	eb45 030b 	adc.w	r3, r5, fp
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	028b      	lsls	r3, r1, #10
 8004bda:	4621      	mov	r1, r4
 8004bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be0:	4621      	mov	r1, r4
 8004be2:	028a      	lsls	r2, r1, #10
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bea:	2200      	movs	r2, #0
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	60fa      	str	r2, [r7, #12]
 8004bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf4:	f7fc f860 	bl	8000cb8 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c1a:	e002      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3740      	adds	r7, #64	; 0x40
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
 8004c34:	00f42400 	.word	0x00f42400
 8004c38:	017d7840 	.word	0x017d7840

08004c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000024 	.word	0x20000024

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c58:	f7ff fff0 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0a9b      	lsrs	r3, r3, #10
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4903      	ldr	r1, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	0800b970 	.word	0x0800b970

08004c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c80:	f7ff ffdc 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0b5b      	lsrs	r3, r3, #13
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	0800b970 	.word	0x0800b970

08004ca4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e097      	b.n	8004de8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fd fdcd 	bl	800286c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ce8:	f023 0307 	bic.w	r3, r3, #7
 8004cec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f000 fa57 	bl	80051ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d26:	f023 0303 	bic.w	r3, r3, #3
 8004d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	4313      	orrs	r3, r2
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d44:	f023 030c 	bic.w	r3, r3, #12
 8004d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	4313      	orrs	r3, r2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	011a      	lsls	r2, r3, #4
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	031b      	lsls	r3, r3, #12
 8004d74:	4313      	orrs	r3, r2
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	4313      	orrs	r3, r2
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d110      	bne.n	8004e42 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d102      	bne.n	8004e2c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e26:	7b7b      	ldrb	r3, [r7, #13]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d001      	beq.n	8004e30 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e089      	b.n	8004f44 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e40:	e031      	b.n	8004ea6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d110      	bne.n	8004e6a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e48:	7bbb      	ldrb	r3, [r7, #14]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d102      	bne.n	8004e54 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e4e:	7b3b      	ldrb	r3, [r7, #12]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d001      	beq.n	8004e58 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e075      	b.n	8004f44 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e68:	e01d      	b.n	8004ea6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d108      	bne.n	8004e82 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e76:	7b7b      	ldrb	r3, [r7, #13]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d102      	bne.n	8004e82 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e7c:	7b3b      	ldrb	r3, [r7, #12]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d001      	beq.n	8004e86 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e05e      	b.n	8004f44 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d010      	beq.n	8004ed4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004eb2:	e01f      	b.n	8004ef4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f9f5 	bl	80052ac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0202 	orr.w	r2, r2, #2
 8004ed0:	60da      	str	r2, [r3, #12]
      break;
 8004ed2:	e02e      	b.n	8004f32 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2104      	movs	r1, #4
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f9e5 	bl	80052ac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0204 	orr.w	r2, r2, #4
 8004ef0:	60da      	str	r2, [r3, #12]
      break;
 8004ef2:	e01e      	b.n	8004f32 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f9d5 	bl	80052ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	2104      	movs	r1, #4
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f9ce 	bl	80052ac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0202 	orr.w	r2, r2, #2
 8004f1e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0204 	orr.w	r2, r2, #4
 8004f2e:	60da      	str	r2, [r3, #12]
      break;
 8004f30:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d122      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0202 	mvn.w	r2, #2
 8004f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fc fd4e 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8ea 	bl	8005170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f8f1 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d122      	bne.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d11b      	bne.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0204 	mvn.w	r2, #4
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fd24 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8c0 	bl	8005170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f8c7 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b08      	cmp	r3, #8
 8005008:	d122      	bne.n	8005050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0208 	mvn.w	r2, #8
 8005020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc fcfa 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f896 	bl	8005170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f89d 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b10      	cmp	r3, #16
 800505c:	d122      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b10      	cmp	r3, #16
 800506a:	d11b      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0210 	mvn.w	r2, #16
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2208      	movs	r2, #8
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc fcd0 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f86c 	bl	8005170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f873 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10e      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d107      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0201 	mvn.w	r2, #1
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f846 	bl	800515c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b80      	cmp	r3, #128	; 0x80
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f976 	bl	80053e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f838 	bl	8005198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b20      	cmp	r3, #32
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b20      	cmp	r3, #32
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0220 	mvn.w	r2, #32
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f940 	bl	80053d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a34      	ldr	r2, [pc, #208]	; (8005290 <TIM_Base_SetConfig+0xe4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00f      	beq.n	80051e4 <TIM_Base_SetConfig+0x38>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x38>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a31      	ldr	r2, [pc, #196]	; (8005294 <TIM_Base_SetConfig+0xe8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x38>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a30      	ldr	r2, [pc, #192]	; (8005298 <TIM_Base_SetConfig+0xec>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x38>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a2f      	ldr	r2, [pc, #188]	; (800529c <TIM_Base_SetConfig+0xf0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a25      	ldr	r2, [pc, #148]	; (8005290 <TIM_Base_SetConfig+0xe4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01b      	beq.n	8005236 <TIM_Base_SetConfig+0x8a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d017      	beq.n	8005236 <TIM_Base_SetConfig+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a22      	ldr	r2, [pc, #136]	; (8005294 <TIM_Base_SetConfig+0xe8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <TIM_Base_SetConfig+0x8a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a21      	ldr	r2, [pc, #132]	; (8005298 <TIM_Base_SetConfig+0xec>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00f      	beq.n	8005236 <TIM_Base_SetConfig+0x8a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a20      	ldr	r2, [pc, #128]	; (800529c <TIM_Base_SetConfig+0xf0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00b      	beq.n	8005236 <TIM_Base_SetConfig+0x8a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <TIM_Base_SetConfig+0xf4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d007      	beq.n	8005236 <TIM_Base_SetConfig+0x8a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <TIM_Base_SetConfig+0xf8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d003      	beq.n	8005236 <TIM_Base_SetConfig+0x8a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <TIM_Base_SetConfig+0xfc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d108      	bne.n	8005248 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a08      	ldr	r2, [pc, #32]	; (8005290 <TIM_Base_SetConfig+0xe4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d103      	bne.n	800527c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	615a      	str	r2, [r3, #20]
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40014400 	.word	0x40014400
 80052a8:	40014800 	.word	0x40014800

080052ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2201      	movs	r2, #1
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1a      	ldr	r2, [r3, #32]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	401a      	ands	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1a      	ldr	r2, [r3, #32]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800530c:	2302      	movs	r3, #2
 800530e:	e050      	b.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1c      	ldr	r2, [pc, #112]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d013      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a18      	ldr	r2, [pc, #96]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a15      	ldr	r2, [pc, #84]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10c      	bne.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800538c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4313      	orrs	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40014000 	.word	0x40014000

080053d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e047      	b.n	800549e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fd fa72 	bl	800290c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	; 0x24
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800543e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fc83 	bl	8005d4c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005464:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0208 	orr.w	r2, r2, #8
 8005474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b0ba      	sub	sp, #232	; 0xe8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80054e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_UART_IRQHandler+0x66>
 80054fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb65 	bl	8005bd6 <UART_Receive_IT>
      return;
 800550c:	e256      	b.n	80059bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800550e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80de 	beq.w	80056d4 <HAL_UART_IRQHandler+0x22c>
 8005518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005528:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80d1 	beq.w	80056d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <HAL_UART_IRQHandler+0xae>
 800553e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f043 0201 	orr.w	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <HAL_UART_IRQHandler+0xd2>
 8005562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f043 0202 	orr.w	r2, r3, #2
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <HAL_UART_IRQHandler+0xf6>
 8005586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f043 0204 	orr.w	r2, r3, #4
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d011      	beq.n	80055ce <HAL_UART_IRQHandler+0x126>
 80055aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f043 0208 	orr.w	r2, r3, #8
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 81ed 	beq.w	80059b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <HAL_UART_IRQHandler+0x14e>
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 faf0 	bl	8005bd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <HAL_UART_IRQHandler+0x17a>
 800561a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d04f      	beq.n	80056c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9f8 	bl	8005a18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d141      	bne.n	80056ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3314      	adds	r3, #20
 800563c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800564c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3314      	adds	r3, #20
 800565e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800566e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800567a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1d9      	bne.n	8005636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	2b00      	cmp	r3, #0
 8005688:	d013      	beq.n	80056b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	4a7d      	ldr	r2, [pc, #500]	; (8005884 <HAL_UART_IRQHandler+0x3dc>)
 8005690:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe f89f 	bl	80037da <HAL_DMA_Abort_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d016      	beq.n	80056d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b0:	e00e      	b.n	80056d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f99a 	bl	80059ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	e00a      	b.n	80056d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f996 	bl	80059ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c0:	e006      	b.n	80056d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f992 	bl	80059ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80056ce:	e170      	b.n	80059b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d0:	bf00      	nop
    return;
 80056d2:	e16e      	b.n	80059b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	2b01      	cmp	r3, #1
 80056da:	f040 814a 	bne.w	8005972 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8143 	beq.w	8005972 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 813c 	beq.w	8005972 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	f040 80b4 	bne.w	8005888 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800572c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8140 	beq.w	80059b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800573a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800573e:	429a      	cmp	r2, r3
 8005740:	f080 8139 	bcs.w	80059b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800574a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005756:	f000 8088 	beq.w	800586a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	330c      	adds	r3, #12
 8005760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	330c      	adds	r3, #12
 8005782:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005786:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800578a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005792:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800579e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1d9      	bne.n	800575a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3314      	adds	r3, #20
 80057ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3314      	adds	r3, #20
 80057c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e1      	bne.n	80057a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005806:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005808:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800580c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e3      	bne.n	80057e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583a:	f023 0310 	bic.w	r3, r3, #16
 800583e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800584c:	65ba      	str	r2, [r7, #88]	; 0x58
 800584e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e3      	bne.n	8005828 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	4618      	mov	r0, r3
 8005866:	f7fd ff48 	bl	80036fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005872:	b29b      	uxth	r3, r3
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	b29b      	uxth	r3, r3
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f8c0 	bl	8005a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005880:	e099      	b.n	80059b6 <HAL_UART_IRQHandler+0x50e>
 8005882:	bf00      	nop
 8005884:	08005adf 	.word	0x08005adf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005890:	b29b      	uxth	r3, r3
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 808b 	beq.w	80059ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 8086 	beq.w	80059ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80058d2:	647a      	str	r2, [r7, #68]	; 0x44
 80058d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e3      	bne.n	80058ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3314      	adds	r3, #20
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	623b      	str	r3, [r7, #32]
   return(result);
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3314      	adds	r3, #20
 8005906:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800590a:	633a      	str	r2, [r7, #48]	; 0x30
 800590c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e3      	bne.n	80058e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	60fb      	str	r3, [r7, #12]
   return(result);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0310 	bic.w	r3, r3, #16
 8005942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005950:	61fa      	str	r2, [r7, #28]
 8005952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	617b      	str	r3, [r7, #20]
   return(result);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e3      	bne.n	800592c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005968:	4619      	mov	r1, r3
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f848 	bl	8005a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005970:	e023      	b.n	80059ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <HAL_UART_IRQHandler+0x4ea>
 800597e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8bb 	bl	8005b06 <UART_Transmit_IT>
    return;
 8005990:	e014      	b.n	80059bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00e      	beq.n	80059bc <HAL_UART_IRQHandler+0x514>
 800599e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8fb 	bl	8005ba6 <UART_EndTransmit_IT>
    return;
 80059b0:	e004      	b.n	80059bc <HAL_UART_IRQHandler+0x514>
    return;
 80059b2:	bf00      	nop
 80059b4:	e002      	b.n	80059bc <HAL_UART_IRQHandler+0x514>
      return;
 80059b6:	bf00      	nop
 80059b8:	e000      	b.n	80059bc <HAL_UART_IRQHandler+0x514>
      return;
 80059ba:	bf00      	nop
  }
}
 80059bc:	37e8      	adds	r7, #232	; 0xe8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop

080059c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b095      	sub	sp, #84	; 0x54
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a40:	643a      	str	r2, [r7, #64]	; 0x40
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e5      	bne.n	8005a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3314      	adds	r3, #20
 8005a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3314      	adds	r3, #20
 8005a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e5      	bne.n	8005a54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d119      	bne.n	8005ac4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f023 0310 	bic.w	r3, r3, #16
 8005aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ab0:	61ba      	str	r2, [r7, #24]
 8005ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6979      	ldr	r1, [r7, #20]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	613b      	str	r3, [r7, #16]
   return(result);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e5      	bne.n	8005a90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ad2:	bf00      	nop
 8005ad4:	3754      	adds	r7, #84	; 0x54
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff ff77 	bl	80059ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b21      	cmp	r3, #33	; 0x21
 8005b18:	d13e      	bne.n	8005b98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	d114      	bne.n	8005b4e <UART_Transmit_IT+0x48>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d110      	bne.n	8005b4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	1c9a      	adds	r2, r3, #2
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	621a      	str	r2, [r3, #32]
 8005b4c:	e008      	b.n	8005b60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	1c59      	adds	r1, r3, #1
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6211      	str	r1, [r2, #32]
 8005b58:	781a      	ldrb	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10f      	bne.n	8005b94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e000      	b.n	8005b9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b98:	2302      	movs	r3, #2
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fefc 	bl	80059c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b08c      	sub	sp, #48	; 0x30
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b22      	cmp	r3, #34	; 0x22
 8005be8:	f040 80ab 	bne.w	8005d42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf4:	d117      	bne.n	8005c26 <UART_Receive_IT+0x50>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d113      	bne.n	8005c26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1e:	1c9a      	adds	r2, r3, #2
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	629a      	str	r2, [r3, #40]	; 0x28
 8005c24:	e026      	b.n	8005c74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c38:	d007      	beq.n	8005c4a <UART_Receive_IT+0x74>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <UART_Receive_IT+0x82>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e008      	b.n	8005c6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	4619      	mov	r1, r3
 8005c82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d15a      	bne.n	8005d3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0220 	bic.w	r2, r2, #32
 8005c96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ca6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d135      	bne.n	8005d34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f023 0310 	bic.w	r3, r3, #16
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cee:	623a      	str	r2, [r7, #32]
 8005cf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	69f9      	ldr	r1, [r7, #28]
 8005cf4:	6a3a      	ldr	r2, [r7, #32]
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e5      	bne.n	8005cce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d10a      	bne.n	8005d26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff fe67 	bl	8005a00 <HAL_UARTEx_RxEventCallback>
 8005d32:	e002      	b.n	8005d3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff fe4f 	bl	80059d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e002      	b.n	8005d44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e000      	b.n	8005d44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3730      	adds	r7, #48	; 0x30
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d50:	b0c0      	sub	sp, #256	; 0x100
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	68d9      	ldr	r1, [r3, #12]
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	ea40 0301 	orr.w	r3, r0, r1
 8005d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005da4:	f021 010c 	bic.w	r1, r1, #12
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005db2:	430b      	orrs	r3, r1
 8005db4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	6999      	ldr	r1, [r3, #24]
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	ea40 0301 	orr.w	r3, r0, r1
 8005dd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b8f      	ldr	r3, [pc, #572]	; (8006018 <UART_SetConfig+0x2cc>)
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d005      	beq.n	8005dec <UART_SetConfig+0xa0>
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b8d      	ldr	r3, [pc, #564]	; (800601c <UART_SetConfig+0x2d0>)
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d104      	bne.n	8005df6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dec:	f7fe ff46 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 8005df0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005df4:	e003      	b.n	8005dfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005df6:	f7fe ff2d 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005dfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e08:	f040 810c 	bne.w	8006024 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e1e:	4622      	mov	r2, r4
 8005e20:	462b      	mov	r3, r5
 8005e22:	1891      	adds	r1, r2, r2
 8005e24:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e26:	415b      	adcs	r3, r3
 8005e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e2e:	4621      	mov	r1, r4
 8005e30:	eb12 0801 	adds.w	r8, r2, r1
 8005e34:	4629      	mov	r1, r5
 8005e36:	eb43 0901 	adc.w	r9, r3, r1
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e4e:	4690      	mov	r8, r2
 8005e50:	4699      	mov	r9, r3
 8005e52:	4623      	mov	r3, r4
 8005e54:	eb18 0303 	adds.w	r3, r8, r3
 8005e58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e5c:	462b      	mov	r3, r5
 8005e5e:	eb49 0303 	adc.w	r3, r9, r3
 8005e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	18db      	adds	r3, r3, r3
 8005e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005e80:	4613      	mov	r3, r2
 8005e82:	eb42 0303 	adc.w	r3, r2, r3
 8005e86:	657b      	str	r3, [r7, #84]	; 0x54
 8005e88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e90:	f7fa ff12 	bl	8000cb8 <__aeabi_uldivmod>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4b61      	ldr	r3, [pc, #388]	; (8006020 <UART_SetConfig+0x2d4>)
 8005e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	011c      	lsls	r4, r3, #4
 8005ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005eb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	1891      	adds	r1, r2, r2
 8005eba:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ebc:	415b      	adcs	r3, r3
 8005ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ec0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	eb12 0a01 	adds.w	sl, r2, r1
 8005eca:	4649      	mov	r1, r9
 8005ecc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005edc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ee4:	4692      	mov	sl, r2
 8005ee6:	469b      	mov	fp, r3
 8005ee8:	4643      	mov	r3, r8
 8005eea:	eb1a 0303 	adds.w	r3, sl, r3
 8005eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f10:	460b      	mov	r3, r1
 8005f12:	18db      	adds	r3, r3, r3
 8005f14:	643b      	str	r3, [r7, #64]	; 0x40
 8005f16:	4613      	mov	r3, r2
 8005f18:	eb42 0303 	adc.w	r3, r2, r3
 8005f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f26:	f7fa fec7 	bl	8000cb8 <__aeabi_uldivmod>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4611      	mov	r1, r2
 8005f30:	4b3b      	ldr	r3, [pc, #236]	; (8006020 <UART_SetConfig+0x2d4>)
 8005f32:	fba3 2301 	umull	r2, r3, r3, r1
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2264      	movs	r2, #100	; 0x64
 8005f3a:	fb02 f303 	mul.w	r3, r2, r3
 8005f3e:	1acb      	subs	r3, r1, r3
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f46:	4b36      	ldr	r3, [pc, #216]	; (8006020 <UART_SetConfig+0x2d4>)
 8005f48:	fba3 2302 	umull	r2, r3, r3, r2
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f54:	441c      	add	r4, r3
 8005f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	1891      	adds	r1, r2, r2
 8005f6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f70:	415b      	adcs	r3, r3
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f78:	4641      	mov	r1, r8
 8005f7a:	1851      	adds	r1, r2, r1
 8005f7c:	6339      	str	r1, [r7, #48]	; 0x30
 8005f7e:	4649      	mov	r1, r9
 8005f80:	414b      	adcs	r3, r1
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f90:	4659      	mov	r1, fp
 8005f92:	00cb      	lsls	r3, r1, #3
 8005f94:	4651      	mov	r1, sl
 8005f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f9a:	4651      	mov	r1, sl
 8005f9c:	00ca      	lsls	r2, r1, #3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	189b      	adds	r3, r3, r2
 8005fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fac:	464b      	mov	r3, r9
 8005fae:	460a      	mov	r2, r1
 8005fb0:	eb42 0303 	adc.w	r3, r2, r3
 8005fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fcc:	460b      	mov	r3, r1
 8005fce:	18db      	adds	r3, r3, r3
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	eb42 0303 	adc.w	r3, r2, r3
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fe2:	f7fa fe69 	bl	8000cb8 <__aeabi_uldivmod>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <UART_SetConfig+0x2d4>)
 8005fec:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	2164      	movs	r1, #100	; 0x64
 8005ff4:	fb01 f303 	mul.w	r3, r1, r3
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	3332      	adds	r3, #50	; 0x32
 8005ffe:	4a08      	ldr	r2, [pc, #32]	; (8006020 <UART_SetConfig+0x2d4>)
 8006000:	fba2 2303 	umull	r2, r3, r2, r3
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	f003 0207 	and.w	r2, r3, #7
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4422      	add	r2, r4
 8006012:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006014:	e105      	b.n	8006222 <UART_SetConfig+0x4d6>
 8006016:	bf00      	nop
 8006018:	40011000 	.word	0x40011000
 800601c:	40011400 	.word	0x40011400
 8006020:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006028:	2200      	movs	r2, #0
 800602a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800602e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006032:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006036:	4642      	mov	r2, r8
 8006038:	464b      	mov	r3, r9
 800603a:	1891      	adds	r1, r2, r2
 800603c:	6239      	str	r1, [r7, #32]
 800603e:	415b      	adcs	r3, r3
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
 8006042:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006046:	4641      	mov	r1, r8
 8006048:	1854      	adds	r4, r2, r1
 800604a:	4649      	mov	r1, r9
 800604c:	eb43 0501 	adc.w	r5, r3, r1
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	00eb      	lsls	r3, r5, #3
 800605a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800605e:	00e2      	lsls	r2, r4, #3
 8006060:	4614      	mov	r4, r2
 8006062:	461d      	mov	r5, r3
 8006064:	4643      	mov	r3, r8
 8006066:	18e3      	adds	r3, r4, r3
 8006068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800606c:	464b      	mov	r3, r9
 800606e:	eb45 0303 	adc.w	r3, r5, r3
 8006072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006082:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006092:	4629      	mov	r1, r5
 8006094:	008b      	lsls	r3, r1, #2
 8006096:	4621      	mov	r1, r4
 8006098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800609c:	4621      	mov	r1, r4
 800609e:	008a      	lsls	r2, r1, #2
 80060a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060a4:	f7fa fe08 	bl	8000cb8 <__aeabi_uldivmod>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4b60      	ldr	r3, [pc, #384]	; (8006230 <UART_SetConfig+0x4e4>)
 80060ae:	fba3 2302 	umull	r2, r3, r3, r2
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	011c      	lsls	r4, r3, #4
 80060b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	1891      	adds	r1, r2, r2
 80060ce:	61b9      	str	r1, [r7, #24]
 80060d0:	415b      	adcs	r3, r3
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d8:	4641      	mov	r1, r8
 80060da:	1851      	adds	r1, r2, r1
 80060dc:	6139      	str	r1, [r7, #16]
 80060de:	4649      	mov	r1, r9
 80060e0:	414b      	adcs	r3, r1
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060f0:	4659      	mov	r1, fp
 80060f2:	00cb      	lsls	r3, r1, #3
 80060f4:	4651      	mov	r1, sl
 80060f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060fa:	4651      	mov	r1, sl
 80060fc:	00ca      	lsls	r2, r1, #3
 80060fe:	4610      	mov	r0, r2
 8006100:	4619      	mov	r1, r3
 8006102:	4603      	mov	r3, r0
 8006104:	4642      	mov	r2, r8
 8006106:	189b      	adds	r3, r3, r2
 8006108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800610c:	464b      	mov	r3, r9
 800610e:	460a      	mov	r2, r1
 8006110:	eb42 0303 	adc.w	r3, r2, r3
 8006114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	67bb      	str	r3, [r7, #120]	; 0x78
 8006122:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	f04f 0300 	mov.w	r3, #0
 800612c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006130:	4649      	mov	r1, r9
 8006132:	008b      	lsls	r3, r1, #2
 8006134:	4641      	mov	r1, r8
 8006136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800613a:	4641      	mov	r1, r8
 800613c:	008a      	lsls	r2, r1, #2
 800613e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006142:	f7fa fdb9 	bl	8000cb8 <__aeabi_uldivmod>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4b39      	ldr	r3, [pc, #228]	; (8006230 <UART_SetConfig+0x4e4>)
 800614c:	fba3 1302 	umull	r1, r3, r3, r2
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	2164      	movs	r1, #100	; 0x64
 8006154:	fb01 f303 	mul.w	r3, r1, r3
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	3332      	adds	r3, #50	; 0x32
 800615e:	4a34      	ldr	r2, [pc, #208]	; (8006230 <UART_SetConfig+0x4e4>)
 8006160:	fba2 2303 	umull	r2, r3, r2, r3
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800616a:	441c      	add	r4, r3
 800616c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006170:	2200      	movs	r2, #0
 8006172:	673b      	str	r3, [r7, #112]	; 0x70
 8006174:	677a      	str	r2, [r7, #116]	; 0x74
 8006176:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800617a:	4642      	mov	r2, r8
 800617c:	464b      	mov	r3, r9
 800617e:	1891      	adds	r1, r2, r2
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	415b      	adcs	r3, r3
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800618a:	4641      	mov	r1, r8
 800618c:	1851      	adds	r1, r2, r1
 800618e:	6039      	str	r1, [r7, #0]
 8006190:	4649      	mov	r1, r9
 8006192:	414b      	adcs	r3, r1
 8006194:	607b      	str	r3, [r7, #4]
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061a2:	4659      	mov	r1, fp
 80061a4:	00cb      	lsls	r3, r1, #3
 80061a6:	4651      	mov	r1, sl
 80061a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ac:	4651      	mov	r1, sl
 80061ae:	00ca      	lsls	r2, r1, #3
 80061b0:	4610      	mov	r0, r2
 80061b2:	4619      	mov	r1, r3
 80061b4:	4603      	mov	r3, r0
 80061b6:	4642      	mov	r2, r8
 80061b8:	189b      	adds	r3, r3, r2
 80061ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80061bc:	464b      	mov	r3, r9
 80061be:	460a      	mov	r2, r1
 80061c0:	eb42 0303 	adc.w	r3, r2, r3
 80061c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	663b      	str	r3, [r7, #96]	; 0x60
 80061d0:	667a      	str	r2, [r7, #100]	; 0x64
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061de:	4649      	mov	r1, r9
 80061e0:	008b      	lsls	r3, r1, #2
 80061e2:	4641      	mov	r1, r8
 80061e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e8:	4641      	mov	r1, r8
 80061ea:	008a      	lsls	r2, r1, #2
 80061ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061f0:	f7fa fd62 	bl	8000cb8 <__aeabi_uldivmod>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <UART_SetConfig+0x4e4>)
 80061fa:	fba3 1302 	umull	r1, r3, r3, r2
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	2164      	movs	r1, #100	; 0x64
 8006202:	fb01 f303 	mul.w	r3, r1, r3
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	3332      	adds	r3, #50	; 0x32
 800620c:	4a08      	ldr	r2, [pc, #32]	; (8006230 <UART_SetConfig+0x4e4>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	f003 020f 	and.w	r2, r3, #15
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4422      	add	r2, r4
 8006220:	609a      	str	r2, [r3, #8]
}
 8006222:	bf00      	nop
 8006224:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006228:	46bd      	mov	sp, r7
 800622a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800622e:	bf00      	nop
 8006230:	51eb851f 	.word	0x51eb851f

08006234 <__errno>:
 8006234:	4b01      	ldr	r3, [pc, #4]	; (800623c <__errno+0x8>)
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000030 	.word	0x20000030

08006240 <__libc_init_array>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	4d0d      	ldr	r5, [pc, #52]	; (8006278 <__libc_init_array+0x38>)
 8006244:	4c0d      	ldr	r4, [pc, #52]	; (800627c <__libc_init_array+0x3c>)
 8006246:	1b64      	subs	r4, r4, r5
 8006248:	10a4      	asrs	r4, r4, #2
 800624a:	2600      	movs	r6, #0
 800624c:	42a6      	cmp	r6, r4
 800624e:	d109      	bne.n	8006264 <__libc_init_array+0x24>
 8006250:	4d0b      	ldr	r5, [pc, #44]	; (8006280 <__libc_init_array+0x40>)
 8006252:	4c0c      	ldr	r4, [pc, #48]	; (8006284 <__libc_init_array+0x44>)
 8006254:	f004 fc90 	bl	800ab78 <_init>
 8006258:	1b64      	subs	r4, r4, r5
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	2600      	movs	r6, #0
 800625e:	42a6      	cmp	r6, r4
 8006260:	d105      	bne.n	800626e <__libc_init_array+0x2e>
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	f855 3b04 	ldr.w	r3, [r5], #4
 8006268:	4798      	blx	r3
 800626a:	3601      	adds	r6, #1
 800626c:	e7ee      	b.n	800624c <__libc_init_array+0xc>
 800626e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006272:	4798      	blx	r3
 8006274:	3601      	adds	r6, #1
 8006276:	e7f2      	b.n	800625e <__libc_init_array+0x1e>
 8006278:	0800be24 	.word	0x0800be24
 800627c:	0800be24 	.word	0x0800be24
 8006280:	0800be24 	.word	0x0800be24
 8006284:	0800be28 	.word	0x0800be28

08006288 <memset>:
 8006288:	4402      	add	r2, r0
 800628a:	4603      	mov	r3, r0
 800628c:	4293      	cmp	r3, r2
 800628e:	d100      	bne.n	8006292 <memset+0xa>
 8006290:	4770      	bx	lr
 8006292:	f803 1b01 	strb.w	r1, [r3], #1
 8006296:	e7f9      	b.n	800628c <memset+0x4>

08006298 <__cvt>:
 8006298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800629c:	ec55 4b10 	vmov	r4, r5, d0
 80062a0:	2d00      	cmp	r5, #0
 80062a2:	460e      	mov	r6, r1
 80062a4:	4619      	mov	r1, r3
 80062a6:	462b      	mov	r3, r5
 80062a8:	bfbb      	ittet	lt
 80062aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062ae:	461d      	movlt	r5, r3
 80062b0:	2300      	movge	r3, #0
 80062b2:	232d      	movlt	r3, #45	; 0x2d
 80062b4:	700b      	strb	r3, [r1, #0]
 80062b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062bc:	4691      	mov	r9, r2
 80062be:	f023 0820 	bic.w	r8, r3, #32
 80062c2:	bfbc      	itt	lt
 80062c4:	4622      	movlt	r2, r4
 80062c6:	4614      	movlt	r4, r2
 80062c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062cc:	d005      	beq.n	80062da <__cvt+0x42>
 80062ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062d2:	d100      	bne.n	80062d6 <__cvt+0x3e>
 80062d4:	3601      	adds	r6, #1
 80062d6:	2102      	movs	r1, #2
 80062d8:	e000      	b.n	80062dc <__cvt+0x44>
 80062da:	2103      	movs	r1, #3
 80062dc:	ab03      	add	r3, sp, #12
 80062de:	9301      	str	r3, [sp, #4]
 80062e0:	ab02      	add	r3, sp, #8
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	ec45 4b10 	vmov	d0, r4, r5
 80062e8:	4653      	mov	r3, sl
 80062ea:	4632      	mov	r2, r6
 80062ec:	f001 fdac 	bl	8007e48 <_dtoa_r>
 80062f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062f4:	4607      	mov	r7, r0
 80062f6:	d102      	bne.n	80062fe <__cvt+0x66>
 80062f8:	f019 0f01 	tst.w	r9, #1
 80062fc:	d022      	beq.n	8006344 <__cvt+0xac>
 80062fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006302:	eb07 0906 	add.w	r9, r7, r6
 8006306:	d110      	bne.n	800632a <__cvt+0x92>
 8006308:	783b      	ldrb	r3, [r7, #0]
 800630a:	2b30      	cmp	r3, #48	; 0x30
 800630c:	d10a      	bne.n	8006324 <__cvt+0x8c>
 800630e:	2200      	movs	r2, #0
 8006310:	2300      	movs	r3, #0
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f7fa fbef 	bl	8000af8 <__aeabi_dcmpeq>
 800631a:	b918      	cbnz	r0, 8006324 <__cvt+0x8c>
 800631c:	f1c6 0601 	rsb	r6, r6, #1
 8006320:	f8ca 6000 	str.w	r6, [sl]
 8006324:	f8da 3000 	ldr.w	r3, [sl]
 8006328:	4499      	add	r9, r3
 800632a:	2200      	movs	r2, #0
 800632c:	2300      	movs	r3, #0
 800632e:	4620      	mov	r0, r4
 8006330:	4629      	mov	r1, r5
 8006332:	f7fa fbe1 	bl	8000af8 <__aeabi_dcmpeq>
 8006336:	b108      	cbz	r0, 800633c <__cvt+0xa4>
 8006338:	f8cd 900c 	str.w	r9, [sp, #12]
 800633c:	2230      	movs	r2, #48	; 0x30
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	454b      	cmp	r3, r9
 8006342:	d307      	bcc.n	8006354 <__cvt+0xbc>
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006348:	1bdb      	subs	r3, r3, r7
 800634a:	4638      	mov	r0, r7
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	b004      	add	sp, #16
 8006350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006354:	1c59      	adds	r1, r3, #1
 8006356:	9103      	str	r1, [sp, #12]
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e7f0      	b.n	800633e <__cvt+0xa6>

0800635c <__exponent>:
 800635c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800635e:	4603      	mov	r3, r0
 8006360:	2900      	cmp	r1, #0
 8006362:	bfb8      	it	lt
 8006364:	4249      	neglt	r1, r1
 8006366:	f803 2b02 	strb.w	r2, [r3], #2
 800636a:	bfb4      	ite	lt
 800636c:	222d      	movlt	r2, #45	; 0x2d
 800636e:	222b      	movge	r2, #43	; 0x2b
 8006370:	2909      	cmp	r1, #9
 8006372:	7042      	strb	r2, [r0, #1]
 8006374:	dd2a      	ble.n	80063cc <__exponent+0x70>
 8006376:	f10d 0407 	add.w	r4, sp, #7
 800637a:	46a4      	mov	ip, r4
 800637c:	270a      	movs	r7, #10
 800637e:	46a6      	mov	lr, r4
 8006380:	460a      	mov	r2, r1
 8006382:	fb91 f6f7 	sdiv	r6, r1, r7
 8006386:	fb07 1516 	mls	r5, r7, r6, r1
 800638a:	3530      	adds	r5, #48	; 0x30
 800638c:	2a63      	cmp	r2, #99	; 0x63
 800638e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006392:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006396:	4631      	mov	r1, r6
 8006398:	dcf1      	bgt.n	800637e <__exponent+0x22>
 800639a:	3130      	adds	r1, #48	; 0x30
 800639c:	f1ae 0502 	sub.w	r5, lr, #2
 80063a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063a4:	1c44      	adds	r4, r0, #1
 80063a6:	4629      	mov	r1, r5
 80063a8:	4561      	cmp	r1, ip
 80063aa:	d30a      	bcc.n	80063c2 <__exponent+0x66>
 80063ac:	f10d 0209 	add.w	r2, sp, #9
 80063b0:	eba2 020e 	sub.w	r2, r2, lr
 80063b4:	4565      	cmp	r5, ip
 80063b6:	bf88      	it	hi
 80063b8:	2200      	movhi	r2, #0
 80063ba:	4413      	add	r3, r2
 80063bc:	1a18      	subs	r0, r3, r0
 80063be:	b003      	add	sp, #12
 80063c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063ca:	e7ed      	b.n	80063a8 <__exponent+0x4c>
 80063cc:	2330      	movs	r3, #48	; 0x30
 80063ce:	3130      	adds	r1, #48	; 0x30
 80063d0:	7083      	strb	r3, [r0, #2]
 80063d2:	70c1      	strb	r1, [r0, #3]
 80063d4:	1d03      	adds	r3, r0, #4
 80063d6:	e7f1      	b.n	80063bc <__exponent+0x60>

080063d8 <_printf_float>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	ed2d 8b02 	vpush	{d8}
 80063e0:	b08d      	sub	sp, #52	; 0x34
 80063e2:	460c      	mov	r4, r1
 80063e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063e8:	4616      	mov	r6, r2
 80063ea:	461f      	mov	r7, r3
 80063ec:	4605      	mov	r5, r0
 80063ee:	f002 fe89 	bl	8009104 <_localeconv_r>
 80063f2:	f8d0 a000 	ldr.w	sl, [r0]
 80063f6:	4650      	mov	r0, sl
 80063f8:	f7f9 fefc 	bl	80001f4 <strlen>
 80063fc:	2300      	movs	r3, #0
 80063fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	9305      	str	r3, [sp, #20]
 8006404:	f8d8 3000 	ldr.w	r3, [r8]
 8006408:	f894 b018 	ldrb.w	fp, [r4, #24]
 800640c:	3307      	adds	r3, #7
 800640e:	f023 0307 	bic.w	r3, r3, #7
 8006412:	f103 0208 	add.w	r2, r3, #8
 8006416:	f8c8 2000 	str.w	r2, [r8]
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006422:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006426:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800642a:	9307      	str	r3, [sp, #28]
 800642c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006430:	ee08 0a10 	vmov	s16, r0
 8006434:	4b9f      	ldr	r3, [pc, #636]	; (80066b4 <_printf_float+0x2dc>)
 8006436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800643a:	f04f 32ff 	mov.w	r2, #4294967295
 800643e:	f7fa fb8d 	bl	8000b5c <__aeabi_dcmpun>
 8006442:	bb88      	cbnz	r0, 80064a8 <_printf_float+0xd0>
 8006444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006448:	4b9a      	ldr	r3, [pc, #616]	; (80066b4 <_printf_float+0x2dc>)
 800644a:	f04f 32ff 	mov.w	r2, #4294967295
 800644e:	f7fa fb67 	bl	8000b20 <__aeabi_dcmple>
 8006452:	bb48      	cbnz	r0, 80064a8 <_printf_float+0xd0>
 8006454:	2200      	movs	r2, #0
 8006456:	2300      	movs	r3, #0
 8006458:	4640      	mov	r0, r8
 800645a:	4649      	mov	r1, r9
 800645c:	f7fa fb56 	bl	8000b0c <__aeabi_dcmplt>
 8006460:	b110      	cbz	r0, 8006468 <_printf_float+0x90>
 8006462:	232d      	movs	r3, #45	; 0x2d
 8006464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006468:	4b93      	ldr	r3, [pc, #588]	; (80066b8 <_printf_float+0x2e0>)
 800646a:	4894      	ldr	r0, [pc, #592]	; (80066bc <_printf_float+0x2e4>)
 800646c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006470:	bf94      	ite	ls
 8006472:	4698      	movls	r8, r3
 8006474:	4680      	movhi	r8, r0
 8006476:	2303      	movs	r3, #3
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	9b05      	ldr	r3, [sp, #20]
 800647c:	f023 0204 	bic.w	r2, r3, #4
 8006480:	6022      	str	r2, [r4, #0]
 8006482:	f04f 0900 	mov.w	r9, #0
 8006486:	9700      	str	r7, [sp, #0]
 8006488:	4633      	mov	r3, r6
 800648a:	aa0b      	add	r2, sp, #44	; 0x2c
 800648c:	4621      	mov	r1, r4
 800648e:	4628      	mov	r0, r5
 8006490:	f000 f9d8 	bl	8006844 <_printf_common>
 8006494:	3001      	adds	r0, #1
 8006496:	f040 8090 	bne.w	80065ba <_printf_float+0x1e2>
 800649a:	f04f 30ff 	mov.w	r0, #4294967295
 800649e:	b00d      	add	sp, #52	; 0x34
 80064a0:	ecbd 8b02 	vpop	{d8}
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	4642      	mov	r2, r8
 80064aa:	464b      	mov	r3, r9
 80064ac:	4640      	mov	r0, r8
 80064ae:	4649      	mov	r1, r9
 80064b0:	f7fa fb54 	bl	8000b5c <__aeabi_dcmpun>
 80064b4:	b140      	cbz	r0, 80064c8 <_printf_float+0xf0>
 80064b6:	464b      	mov	r3, r9
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	bfbc      	itt	lt
 80064bc:	232d      	movlt	r3, #45	; 0x2d
 80064be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064c2:	487f      	ldr	r0, [pc, #508]	; (80066c0 <_printf_float+0x2e8>)
 80064c4:	4b7f      	ldr	r3, [pc, #508]	; (80066c4 <_printf_float+0x2ec>)
 80064c6:	e7d1      	b.n	800646c <_printf_float+0x94>
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064ce:	9206      	str	r2, [sp, #24]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	d13f      	bne.n	8006554 <_printf_float+0x17c>
 80064d4:	2306      	movs	r3, #6
 80064d6:	6063      	str	r3, [r4, #4]
 80064d8:	9b05      	ldr	r3, [sp, #20]
 80064da:	6861      	ldr	r1, [r4, #4]
 80064dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064e0:	2300      	movs	r3, #0
 80064e2:	9303      	str	r3, [sp, #12]
 80064e4:	ab0a      	add	r3, sp, #40	; 0x28
 80064e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064ea:	ab09      	add	r3, sp, #36	; 0x24
 80064ec:	ec49 8b10 	vmov	d0, r8, r9
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7ff fecd 	bl	8006298 <__cvt>
 80064fe:	9b06      	ldr	r3, [sp, #24]
 8006500:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006502:	2b47      	cmp	r3, #71	; 0x47
 8006504:	4680      	mov	r8, r0
 8006506:	d108      	bne.n	800651a <_printf_float+0x142>
 8006508:	1cc8      	adds	r0, r1, #3
 800650a:	db02      	blt.n	8006512 <_printf_float+0x13a>
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	4299      	cmp	r1, r3
 8006510:	dd41      	ble.n	8006596 <_printf_float+0x1be>
 8006512:	f1ab 0b02 	sub.w	fp, fp, #2
 8006516:	fa5f fb8b 	uxtb.w	fp, fp
 800651a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800651e:	d820      	bhi.n	8006562 <_printf_float+0x18a>
 8006520:	3901      	subs	r1, #1
 8006522:	465a      	mov	r2, fp
 8006524:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006528:	9109      	str	r1, [sp, #36]	; 0x24
 800652a:	f7ff ff17 	bl	800635c <__exponent>
 800652e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006530:	1813      	adds	r3, r2, r0
 8006532:	2a01      	cmp	r2, #1
 8006534:	4681      	mov	r9, r0
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	dc02      	bgt.n	8006540 <_printf_float+0x168>
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	07d2      	lsls	r2, r2, #31
 800653e:	d501      	bpl.n	8006544 <_printf_float+0x16c>
 8006540:	3301      	adds	r3, #1
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006548:	2b00      	cmp	r3, #0
 800654a:	d09c      	beq.n	8006486 <_printf_float+0xae>
 800654c:	232d      	movs	r3, #45	; 0x2d
 800654e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006552:	e798      	b.n	8006486 <_printf_float+0xae>
 8006554:	9a06      	ldr	r2, [sp, #24]
 8006556:	2a47      	cmp	r2, #71	; 0x47
 8006558:	d1be      	bne.n	80064d8 <_printf_float+0x100>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1bc      	bne.n	80064d8 <_printf_float+0x100>
 800655e:	2301      	movs	r3, #1
 8006560:	e7b9      	b.n	80064d6 <_printf_float+0xfe>
 8006562:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006566:	d118      	bne.n	800659a <_printf_float+0x1c2>
 8006568:	2900      	cmp	r1, #0
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	dd0b      	ble.n	8006586 <_printf_float+0x1ae>
 800656e:	6121      	str	r1, [r4, #16]
 8006570:	b913      	cbnz	r3, 8006578 <_printf_float+0x1a0>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	07d0      	lsls	r0, r2, #31
 8006576:	d502      	bpl.n	800657e <_printf_float+0x1a6>
 8006578:	3301      	adds	r3, #1
 800657a:	440b      	add	r3, r1
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006580:	f04f 0900 	mov.w	r9, #0
 8006584:	e7de      	b.n	8006544 <_printf_float+0x16c>
 8006586:	b913      	cbnz	r3, 800658e <_printf_float+0x1b6>
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	07d2      	lsls	r2, r2, #31
 800658c:	d501      	bpl.n	8006592 <_printf_float+0x1ba>
 800658e:	3302      	adds	r3, #2
 8006590:	e7f4      	b.n	800657c <_printf_float+0x1a4>
 8006592:	2301      	movs	r3, #1
 8006594:	e7f2      	b.n	800657c <_printf_float+0x1a4>
 8006596:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800659a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659c:	4299      	cmp	r1, r3
 800659e:	db05      	blt.n	80065ac <_printf_float+0x1d4>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	6121      	str	r1, [r4, #16]
 80065a4:	07d8      	lsls	r0, r3, #31
 80065a6:	d5ea      	bpl.n	800657e <_printf_float+0x1a6>
 80065a8:	1c4b      	adds	r3, r1, #1
 80065aa:	e7e7      	b.n	800657c <_printf_float+0x1a4>
 80065ac:	2900      	cmp	r1, #0
 80065ae:	bfd4      	ite	le
 80065b0:	f1c1 0202 	rsble	r2, r1, #2
 80065b4:	2201      	movgt	r2, #1
 80065b6:	4413      	add	r3, r2
 80065b8:	e7e0      	b.n	800657c <_printf_float+0x1a4>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	055a      	lsls	r2, r3, #21
 80065be:	d407      	bmi.n	80065d0 <_printf_float+0x1f8>
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	4642      	mov	r2, r8
 80065c4:	4631      	mov	r1, r6
 80065c6:	4628      	mov	r0, r5
 80065c8:	47b8      	blx	r7
 80065ca:	3001      	adds	r0, #1
 80065cc:	d12c      	bne.n	8006628 <_printf_float+0x250>
 80065ce:	e764      	b.n	800649a <_printf_float+0xc2>
 80065d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065d4:	f240 80e0 	bls.w	8006798 <_printf_float+0x3c0>
 80065d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065dc:	2200      	movs	r2, #0
 80065de:	2300      	movs	r3, #0
 80065e0:	f7fa fa8a 	bl	8000af8 <__aeabi_dcmpeq>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d034      	beq.n	8006652 <_printf_float+0x27a>
 80065e8:	4a37      	ldr	r2, [pc, #220]	; (80066c8 <_printf_float+0x2f0>)
 80065ea:	2301      	movs	r3, #1
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	f43f af51 	beq.w	800649a <_printf_float+0xc2>
 80065f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065fc:	429a      	cmp	r2, r3
 80065fe:	db02      	blt.n	8006606 <_printf_float+0x22e>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07d8      	lsls	r0, r3, #31
 8006604:	d510      	bpl.n	8006628 <_printf_float+0x250>
 8006606:	ee18 3a10 	vmov	r3, s16
 800660a:	4652      	mov	r2, sl
 800660c:	4631      	mov	r1, r6
 800660e:	4628      	mov	r0, r5
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	f43f af41 	beq.w	800649a <_printf_float+0xc2>
 8006618:	f04f 0800 	mov.w	r8, #0
 800661c:	f104 091a 	add.w	r9, r4, #26
 8006620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006622:	3b01      	subs	r3, #1
 8006624:	4543      	cmp	r3, r8
 8006626:	dc09      	bgt.n	800663c <_printf_float+0x264>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	079b      	lsls	r3, r3, #30
 800662c:	f100 8105 	bmi.w	800683a <_printf_float+0x462>
 8006630:	68e0      	ldr	r0, [r4, #12]
 8006632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006634:	4298      	cmp	r0, r3
 8006636:	bfb8      	it	lt
 8006638:	4618      	movlt	r0, r3
 800663a:	e730      	b.n	800649e <_printf_float+0xc6>
 800663c:	2301      	movs	r3, #1
 800663e:	464a      	mov	r2, r9
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f af27 	beq.w	800649a <_printf_float+0xc2>
 800664c:	f108 0801 	add.w	r8, r8, #1
 8006650:	e7e6      	b.n	8006620 <_printf_float+0x248>
 8006652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	dc39      	bgt.n	80066cc <_printf_float+0x2f4>
 8006658:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <_printf_float+0x2f0>)
 800665a:	2301      	movs	r3, #1
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f af19 	beq.w	800649a <_printf_float+0xc2>
 8006668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800666c:	4313      	orrs	r3, r2
 800666e:	d102      	bne.n	8006676 <_printf_float+0x29e>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	07d9      	lsls	r1, r3, #31
 8006674:	d5d8      	bpl.n	8006628 <_printf_float+0x250>
 8006676:	ee18 3a10 	vmov	r3, s16
 800667a:	4652      	mov	r2, sl
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	f43f af09 	beq.w	800649a <_printf_float+0xc2>
 8006688:	f04f 0900 	mov.w	r9, #0
 800668c:	f104 0a1a 	add.w	sl, r4, #26
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	425b      	negs	r3, r3
 8006694:	454b      	cmp	r3, r9
 8006696:	dc01      	bgt.n	800669c <_printf_float+0x2c4>
 8006698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669a:	e792      	b.n	80065c2 <_printf_float+0x1ea>
 800669c:	2301      	movs	r3, #1
 800669e:	4652      	mov	r2, sl
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f aef7 	beq.w	800649a <_printf_float+0xc2>
 80066ac:	f109 0901 	add.w	r9, r9, #1
 80066b0:	e7ee      	b.n	8006690 <_printf_float+0x2b8>
 80066b2:	bf00      	nop
 80066b4:	7fefffff 	.word	0x7fefffff
 80066b8:	0800b97c 	.word	0x0800b97c
 80066bc:	0800b980 	.word	0x0800b980
 80066c0:	0800b988 	.word	0x0800b988
 80066c4:	0800b984 	.word	0x0800b984
 80066c8:	0800b98c 	.word	0x0800b98c
 80066cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066d0:	429a      	cmp	r2, r3
 80066d2:	bfa8      	it	ge
 80066d4:	461a      	movge	r2, r3
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	4691      	mov	r9, r2
 80066da:	dc37      	bgt.n	800674c <_printf_float+0x374>
 80066dc:	f04f 0b00 	mov.w	fp, #0
 80066e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066e4:	f104 021a 	add.w	r2, r4, #26
 80066e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066ea:	9305      	str	r3, [sp, #20]
 80066ec:	eba3 0309 	sub.w	r3, r3, r9
 80066f0:	455b      	cmp	r3, fp
 80066f2:	dc33      	bgt.n	800675c <_printf_float+0x384>
 80066f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066f8:	429a      	cmp	r2, r3
 80066fa:	db3b      	blt.n	8006774 <_printf_float+0x39c>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	07da      	lsls	r2, r3, #31
 8006700:	d438      	bmi.n	8006774 <_printf_float+0x39c>
 8006702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006704:	9a05      	ldr	r2, [sp, #20]
 8006706:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006708:	1a9a      	subs	r2, r3, r2
 800670a:	eba3 0901 	sub.w	r9, r3, r1
 800670e:	4591      	cmp	r9, r2
 8006710:	bfa8      	it	ge
 8006712:	4691      	movge	r9, r2
 8006714:	f1b9 0f00 	cmp.w	r9, #0
 8006718:	dc35      	bgt.n	8006786 <_printf_float+0x3ae>
 800671a:	f04f 0800 	mov.w	r8, #0
 800671e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006722:	f104 0a1a 	add.w	sl, r4, #26
 8006726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	eba3 0309 	sub.w	r3, r3, r9
 8006730:	4543      	cmp	r3, r8
 8006732:	f77f af79 	ble.w	8006628 <_printf_float+0x250>
 8006736:	2301      	movs	r3, #1
 8006738:	4652      	mov	r2, sl
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f aeaa 	beq.w	800649a <_printf_float+0xc2>
 8006746:	f108 0801 	add.w	r8, r8, #1
 800674a:	e7ec      	b.n	8006726 <_printf_float+0x34e>
 800674c:	4613      	mov	r3, r2
 800674e:	4631      	mov	r1, r6
 8006750:	4642      	mov	r2, r8
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	d1c0      	bne.n	80066dc <_printf_float+0x304>
 800675a:	e69e      	b.n	800649a <_printf_float+0xc2>
 800675c:	2301      	movs	r3, #1
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	9205      	str	r2, [sp, #20]
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	f43f ae97 	beq.w	800649a <_printf_float+0xc2>
 800676c:	9a05      	ldr	r2, [sp, #20]
 800676e:	f10b 0b01 	add.w	fp, fp, #1
 8006772:	e7b9      	b.n	80066e8 <_printf_float+0x310>
 8006774:	ee18 3a10 	vmov	r3, s16
 8006778:	4652      	mov	r2, sl
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	d1be      	bne.n	8006702 <_printf_float+0x32a>
 8006784:	e689      	b.n	800649a <_printf_float+0xc2>
 8006786:	9a05      	ldr	r2, [sp, #20]
 8006788:	464b      	mov	r3, r9
 800678a:	4442      	add	r2, r8
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	d1c1      	bne.n	800671a <_printf_float+0x342>
 8006796:	e680      	b.n	800649a <_printf_float+0xc2>
 8006798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800679a:	2a01      	cmp	r2, #1
 800679c:	dc01      	bgt.n	80067a2 <_printf_float+0x3ca>
 800679e:	07db      	lsls	r3, r3, #31
 80067a0:	d538      	bpl.n	8006814 <_printf_float+0x43c>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4642      	mov	r2, r8
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f ae74 	beq.w	800649a <_printf_float+0xc2>
 80067b2:	ee18 3a10 	vmov	r3, s16
 80067b6:	4652      	mov	r2, sl
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	f43f ae6b 	beq.w	800649a <_printf_float+0xc2>
 80067c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067c8:	2200      	movs	r2, #0
 80067ca:	2300      	movs	r3, #0
 80067cc:	f7fa f994 	bl	8000af8 <__aeabi_dcmpeq>
 80067d0:	b9d8      	cbnz	r0, 800680a <_printf_float+0x432>
 80067d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d4:	f108 0201 	add.w	r2, r8, #1
 80067d8:	3b01      	subs	r3, #1
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	d10e      	bne.n	8006802 <_printf_float+0x42a>
 80067e4:	e659      	b.n	800649a <_printf_float+0xc2>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4652      	mov	r2, sl
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	f43f ae52 	beq.w	800649a <_printf_float+0xc2>
 80067f6:	f108 0801 	add.w	r8, r8, #1
 80067fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	4543      	cmp	r3, r8
 8006800:	dcf1      	bgt.n	80067e6 <_printf_float+0x40e>
 8006802:	464b      	mov	r3, r9
 8006804:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006808:	e6dc      	b.n	80065c4 <_printf_float+0x1ec>
 800680a:	f04f 0800 	mov.w	r8, #0
 800680e:	f104 0a1a 	add.w	sl, r4, #26
 8006812:	e7f2      	b.n	80067fa <_printf_float+0x422>
 8006814:	2301      	movs	r3, #1
 8006816:	4642      	mov	r2, r8
 8006818:	e7df      	b.n	80067da <_printf_float+0x402>
 800681a:	2301      	movs	r3, #1
 800681c:	464a      	mov	r2, r9
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae38 	beq.w	800649a <_printf_float+0xc2>
 800682a:	f108 0801 	add.w	r8, r8, #1
 800682e:	68e3      	ldr	r3, [r4, #12]
 8006830:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006832:	1a5b      	subs	r3, r3, r1
 8006834:	4543      	cmp	r3, r8
 8006836:	dcf0      	bgt.n	800681a <_printf_float+0x442>
 8006838:	e6fa      	b.n	8006630 <_printf_float+0x258>
 800683a:	f04f 0800 	mov.w	r8, #0
 800683e:	f104 0919 	add.w	r9, r4, #25
 8006842:	e7f4      	b.n	800682e <_printf_float+0x456>

08006844 <_printf_common>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	4616      	mov	r6, r2
 800684a:	4699      	mov	r9, r3
 800684c:	688a      	ldr	r2, [r1, #8]
 800684e:	690b      	ldr	r3, [r1, #16]
 8006850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006854:	4293      	cmp	r3, r2
 8006856:	bfb8      	it	lt
 8006858:	4613      	movlt	r3, r2
 800685a:	6033      	str	r3, [r6, #0]
 800685c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006860:	4607      	mov	r7, r0
 8006862:	460c      	mov	r4, r1
 8006864:	b10a      	cbz	r2, 800686a <_printf_common+0x26>
 8006866:	3301      	adds	r3, #1
 8006868:	6033      	str	r3, [r6, #0]
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	0699      	lsls	r1, r3, #26
 800686e:	bf42      	ittt	mi
 8006870:	6833      	ldrmi	r3, [r6, #0]
 8006872:	3302      	addmi	r3, #2
 8006874:	6033      	strmi	r3, [r6, #0]
 8006876:	6825      	ldr	r5, [r4, #0]
 8006878:	f015 0506 	ands.w	r5, r5, #6
 800687c:	d106      	bne.n	800688c <_printf_common+0x48>
 800687e:	f104 0a19 	add.w	sl, r4, #25
 8006882:	68e3      	ldr	r3, [r4, #12]
 8006884:	6832      	ldr	r2, [r6, #0]
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	42ab      	cmp	r3, r5
 800688a:	dc26      	bgt.n	80068da <_printf_common+0x96>
 800688c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006890:	1e13      	subs	r3, r2, #0
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	bf18      	it	ne
 8006896:	2301      	movne	r3, #1
 8006898:	0692      	lsls	r2, r2, #26
 800689a:	d42b      	bmi.n	80068f4 <_printf_common+0xb0>
 800689c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068a0:	4649      	mov	r1, r9
 80068a2:	4638      	mov	r0, r7
 80068a4:	47c0      	blx	r8
 80068a6:	3001      	adds	r0, #1
 80068a8:	d01e      	beq.n	80068e8 <_printf_common+0xa4>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	68e5      	ldr	r5, [r4, #12]
 80068ae:	6832      	ldr	r2, [r6, #0]
 80068b0:	f003 0306 	and.w	r3, r3, #6
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	bf08      	it	eq
 80068b8:	1aad      	subeq	r5, r5, r2
 80068ba:	68a3      	ldr	r3, [r4, #8]
 80068bc:	6922      	ldr	r2, [r4, #16]
 80068be:	bf0c      	ite	eq
 80068c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068c4:	2500      	movne	r5, #0
 80068c6:	4293      	cmp	r3, r2
 80068c8:	bfc4      	itt	gt
 80068ca:	1a9b      	subgt	r3, r3, r2
 80068cc:	18ed      	addgt	r5, r5, r3
 80068ce:	2600      	movs	r6, #0
 80068d0:	341a      	adds	r4, #26
 80068d2:	42b5      	cmp	r5, r6
 80068d4:	d11a      	bne.n	800690c <_printf_common+0xc8>
 80068d6:	2000      	movs	r0, #0
 80068d8:	e008      	b.n	80068ec <_printf_common+0xa8>
 80068da:	2301      	movs	r3, #1
 80068dc:	4652      	mov	r2, sl
 80068de:	4649      	mov	r1, r9
 80068e0:	4638      	mov	r0, r7
 80068e2:	47c0      	blx	r8
 80068e4:	3001      	adds	r0, #1
 80068e6:	d103      	bne.n	80068f0 <_printf_common+0xac>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f0:	3501      	adds	r5, #1
 80068f2:	e7c6      	b.n	8006882 <_printf_common+0x3e>
 80068f4:	18e1      	adds	r1, r4, r3
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	2030      	movs	r0, #48	; 0x30
 80068fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068fe:	4422      	add	r2, r4
 8006900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006908:	3302      	adds	r3, #2
 800690a:	e7c7      	b.n	800689c <_printf_common+0x58>
 800690c:	2301      	movs	r3, #1
 800690e:	4622      	mov	r2, r4
 8006910:	4649      	mov	r1, r9
 8006912:	4638      	mov	r0, r7
 8006914:	47c0      	blx	r8
 8006916:	3001      	adds	r0, #1
 8006918:	d0e6      	beq.n	80068e8 <_printf_common+0xa4>
 800691a:	3601      	adds	r6, #1
 800691c:	e7d9      	b.n	80068d2 <_printf_common+0x8e>
	...

08006920 <_printf_i>:
 8006920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	7e0f      	ldrb	r7, [r1, #24]
 8006926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006928:	2f78      	cmp	r7, #120	; 0x78
 800692a:	4691      	mov	r9, r2
 800692c:	4680      	mov	r8, r0
 800692e:	460c      	mov	r4, r1
 8006930:	469a      	mov	sl, r3
 8006932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006936:	d807      	bhi.n	8006948 <_printf_i+0x28>
 8006938:	2f62      	cmp	r7, #98	; 0x62
 800693a:	d80a      	bhi.n	8006952 <_printf_i+0x32>
 800693c:	2f00      	cmp	r7, #0
 800693e:	f000 80d8 	beq.w	8006af2 <_printf_i+0x1d2>
 8006942:	2f58      	cmp	r7, #88	; 0x58
 8006944:	f000 80a3 	beq.w	8006a8e <_printf_i+0x16e>
 8006948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800694c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006950:	e03a      	b.n	80069c8 <_printf_i+0xa8>
 8006952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006956:	2b15      	cmp	r3, #21
 8006958:	d8f6      	bhi.n	8006948 <_printf_i+0x28>
 800695a:	a101      	add	r1, pc, #4	; (adr r1, 8006960 <_printf_i+0x40>)
 800695c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006960:	080069b9 	.word	0x080069b9
 8006964:	080069cd 	.word	0x080069cd
 8006968:	08006949 	.word	0x08006949
 800696c:	08006949 	.word	0x08006949
 8006970:	08006949 	.word	0x08006949
 8006974:	08006949 	.word	0x08006949
 8006978:	080069cd 	.word	0x080069cd
 800697c:	08006949 	.word	0x08006949
 8006980:	08006949 	.word	0x08006949
 8006984:	08006949 	.word	0x08006949
 8006988:	08006949 	.word	0x08006949
 800698c:	08006ad9 	.word	0x08006ad9
 8006990:	080069fd 	.word	0x080069fd
 8006994:	08006abb 	.word	0x08006abb
 8006998:	08006949 	.word	0x08006949
 800699c:	08006949 	.word	0x08006949
 80069a0:	08006afb 	.word	0x08006afb
 80069a4:	08006949 	.word	0x08006949
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	08006949 	.word	0x08006949
 80069b0:	08006949 	.word	0x08006949
 80069b4:	08006ac3 	.word	0x08006ac3
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	1d1a      	adds	r2, r3, #4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	602a      	str	r2, [r5, #0]
 80069c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0a3      	b.n	8006b14 <_printf_i+0x1f4>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	6829      	ldr	r1, [r5, #0]
 80069d0:	0606      	lsls	r6, r0, #24
 80069d2:	f101 0304 	add.w	r3, r1, #4
 80069d6:	d50a      	bpl.n	80069ee <_printf_i+0xce>
 80069d8:	680e      	ldr	r6, [r1, #0]
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	2e00      	cmp	r6, #0
 80069de:	da03      	bge.n	80069e8 <_printf_i+0xc8>
 80069e0:	232d      	movs	r3, #45	; 0x2d
 80069e2:	4276      	negs	r6, r6
 80069e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e8:	485e      	ldr	r0, [pc, #376]	; (8006b64 <_printf_i+0x244>)
 80069ea:	230a      	movs	r3, #10
 80069ec:	e019      	b.n	8006a22 <_printf_i+0x102>
 80069ee:	680e      	ldr	r6, [r1, #0]
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069f6:	bf18      	it	ne
 80069f8:	b236      	sxthne	r6, r6
 80069fa:	e7ef      	b.n	80069dc <_printf_i+0xbc>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	6820      	ldr	r0, [r4, #0]
 8006a00:	1d19      	adds	r1, r3, #4
 8006a02:	6029      	str	r1, [r5, #0]
 8006a04:	0601      	lsls	r1, r0, #24
 8006a06:	d501      	bpl.n	8006a0c <_printf_i+0xec>
 8006a08:	681e      	ldr	r6, [r3, #0]
 8006a0a:	e002      	b.n	8006a12 <_printf_i+0xf2>
 8006a0c:	0646      	lsls	r6, r0, #25
 8006a0e:	d5fb      	bpl.n	8006a08 <_printf_i+0xe8>
 8006a10:	881e      	ldrh	r6, [r3, #0]
 8006a12:	4854      	ldr	r0, [pc, #336]	; (8006b64 <_printf_i+0x244>)
 8006a14:	2f6f      	cmp	r7, #111	; 0x6f
 8006a16:	bf0c      	ite	eq
 8006a18:	2308      	moveq	r3, #8
 8006a1a:	230a      	movne	r3, #10
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a22:	6865      	ldr	r5, [r4, #4]
 8006a24:	60a5      	str	r5, [r4, #8]
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	bfa2      	ittt	ge
 8006a2a:	6821      	ldrge	r1, [r4, #0]
 8006a2c:	f021 0104 	bicge.w	r1, r1, #4
 8006a30:	6021      	strge	r1, [r4, #0]
 8006a32:	b90e      	cbnz	r6, 8006a38 <_printf_i+0x118>
 8006a34:	2d00      	cmp	r5, #0
 8006a36:	d04d      	beq.n	8006ad4 <_printf_i+0x1b4>
 8006a38:	4615      	mov	r5, r2
 8006a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a42:	5dc7      	ldrb	r7, [r0, r7]
 8006a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a48:	4637      	mov	r7, r6
 8006a4a:	42bb      	cmp	r3, r7
 8006a4c:	460e      	mov	r6, r1
 8006a4e:	d9f4      	bls.n	8006a3a <_printf_i+0x11a>
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d10b      	bne.n	8006a6c <_printf_i+0x14c>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	07de      	lsls	r6, r3, #31
 8006a58:	d508      	bpl.n	8006a6c <_printf_i+0x14c>
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	6861      	ldr	r1, [r4, #4]
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	bfde      	ittt	le
 8006a62:	2330      	movle	r3, #48	; 0x30
 8006a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a6c:	1b52      	subs	r2, r2, r5
 8006a6e:	6122      	str	r2, [r4, #16]
 8006a70:	f8cd a000 	str.w	sl, [sp]
 8006a74:	464b      	mov	r3, r9
 8006a76:	aa03      	add	r2, sp, #12
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	f7ff fee2 	bl	8006844 <_printf_common>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d14c      	bne.n	8006b1e <_printf_i+0x1fe>
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	b004      	add	sp, #16
 8006a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8e:	4835      	ldr	r0, [pc, #212]	; (8006b64 <_printf_i+0x244>)
 8006a90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a94:	6829      	ldr	r1, [r5, #0]
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a9c:	6029      	str	r1, [r5, #0]
 8006a9e:	061d      	lsls	r5, r3, #24
 8006aa0:	d514      	bpl.n	8006acc <_printf_i+0x1ac>
 8006aa2:	07df      	lsls	r7, r3, #31
 8006aa4:	bf44      	itt	mi
 8006aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8006aaa:	6023      	strmi	r3, [r4, #0]
 8006aac:	b91e      	cbnz	r6, 8006ab6 <_printf_i+0x196>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	f023 0320 	bic.w	r3, r3, #32
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	2310      	movs	r3, #16
 8006ab8:	e7b0      	b.n	8006a1c <_printf_i+0xfc>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	f043 0320 	orr.w	r3, r3, #32
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	2378      	movs	r3, #120	; 0x78
 8006ac4:	4828      	ldr	r0, [pc, #160]	; (8006b68 <_printf_i+0x248>)
 8006ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aca:	e7e3      	b.n	8006a94 <_printf_i+0x174>
 8006acc:	0659      	lsls	r1, r3, #25
 8006ace:	bf48      	it	mi
 8006ad0:	b2b6      	uxthmi	r6, r6
 8006ad2:	e7e6      	b.n	8006aa2 <_printf_i+0x182>
 8006ad4:	4615      	mov	r5, r2
 8006ad6:	e7bb      	b.n	8006a50 <_printf_i+0x130>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	6826      	ldr	r6, [r4, #0]
 8006adc:	6961      	ldr	r1, [r4, #20]
 8006ade:	1d18      	adds	r0, r3, #4
 8006ae0:	6028      	str	r0, [r5, #0]
 8006ae2:	0635      	lsls	r5, r6, #24
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	d501      	bpl.n	8006aec <_printf_i+0x1cc>
 8006ae8:	6019      	str	r1, [r3, #0]
 8006aea:	e002      	b.n	8006af2 <_printf_i+0x1d2>
 8006aec:	0670      	lsls	r0, r6, #25
 8006aee:	d5fb      	bpl.n	8006ae8 <_printf_i+0x1c8>
 8006af0:	8019      	strh	r1, [r3, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	4615      	mov	r5, r2
 8006af8:	e7ba      	b.n	8006a70 <_printf_i+0x150>
 8006afa:	682b      	ldr	r3, [r5, #0]
 8006afc:	1d1a      	adds	r2, r3, #4
 8006afe:	602a      	str	r2, [r5, #0]
 8006b00:	681d      	ldr	r5, [r3, #0]
 8006b02:	6862      	ldr	r2, [r4, #4]
 8006b04:	2100      	movs	r1, #0
 8006b06:	4628      	mov	r0, r5
 8006b08:	f7f9 fb82 	bl	8000210 <memchr>
 8006b0c:	b108      	cbz	r0, 8006b12 <_printf_i+0x1f2>
 8006b0e:	1b40      	subs	r0, r0, r5
 8006b10:	6060      	str	r0, [r4, #4]
 8006b12:	6863      	ldr	r3, [r4, #4]
 8006b14:	6123      	str	r3, [r4, #16]
 8006b16:	2300      	movs	r3, #0
 8006b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b1c:	e7a8      	b.n	8006a70 <_printf_i+0x150>
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	462a      	mov	r2, r5
 8006b22:	4649      	mov	r1, r9
 8006b24:	4640      	mov	r0, r8
 8006b26:	47d0      	blx	sl
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d0ab      	beq.n	8006a84 <_printf_i+0x164>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	079b      	lsls	r3, r3, #30
 8006b30:	d413      	bmi.n	8006b5a <_printf_i+0x23a>
 8006b32:	68e0      	ldr	r0, [r4, #12]
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	4298      	cmp	r0, r3
 8006b38:	bfb8      	it	lt
 8006b3a:	4618      	movlt	r0, r3
 8006b3c:	e7a4      	b.n	8006a88 <_printf_i+0x168>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4632      	mov	r2, r6
 8006b42:	4649      	mov	r1, r9
 8006b44:	4640      	mov	r0, r8
 8006b46:	47d0      	blx	sl
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d09b      	beq.n	8006a84 <_printf_i+0x164>
 8006b4c:	3501      	adds	r5, #1
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	9903      	ldr	r1, [sp, #12]
 8006b52:	1a5b      	subs	r3, r3, r1
 8006b54:	42ab      	cmp	r3, r5
 8006b56:	dcf2      	bgt.n	8006b3e <_printf_i+0x21e>
 8006b58:	e7eb      	b.n	8006b32 <_printf_i+0x212>
 8006b5a:	2500      	movs	r5, #0
 8006b5c:	f104 0619 	add.w	r6, r4, #25
 8006b60:	e7f5      	b.n	8006b4e <_printf_i+0x22e>
 8006b62:	bf00      	nop
 8006b64:	0800b98e 	.word	0x0800b98e
 8006b68:	0800b99f 	.word	0x0800b99f

08006b6c <_scanf_float>:
 8006b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b70:	b087      	sub	sp, #28
 8006b72:	4617      	mov	r7, r2
 8006b74:	9303      	str	r3, [sp, #12]
 8006b76:	688b      	ldr	r3, [r1, #8]
 8006b78:	1e5a      	subs	r2, r3, #1
 8006b7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b7e:	bf83      	ittte	hi
 8006b80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b84:	195b      	addhi	r3, r3, r5
 8006b86:	9302      	strhi	r3, [sp, #8]
 8006b88:	2300      	movls	r3, #0
 8006b8a:	bf86      	itte	hi
 8006b8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b90:	608b      	strhi	r3, [r1, #8]
 8006b92:	9302      	strls	r3, [sp, #8]
 8006b94:	680b      	ldr	r3, [r1, #0]
 8006b96:	468b      	mov	fp, r1
 8006b98:	2500      	movs	r5, #0
 8006b9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006b9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ba2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ba6:	4680      	mov	r8, r0
 8006ba8:	460c      	mov	r4, r1
 8006baa:	465e      	mov	r6, fp
 8006bac:	46aa      	mov	sl, r5
 8006bae:	46a9      	mov	r9, r5
 8006bb0:	9501      	str	r5, [sp, #4]
 8006bb2:	68a2      	ldr	r2, [r4, #8]
 8006bb4:	b152      	cbz	r2, 8006bcc <_scanf_float+0x60>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b4e      	cmp	r3, #78	; 0x4e
 8006bbc:	d864      	bhi.n	8006c88 <_scanf_float+0x11c>
 8006bbe:	2b40      	cmp	r3, #64	; 0x40
 8006bc0:	d83c      	bhi.n	8006c3c <_scanf_float+0xd0>
 8006bc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006bc6:	b2c8      	uxtb	r0, r1
 8006bc8:	280e      	cmp	r0, #14
 8006bca:	d93a      	bls.n	8006c42 <_scanf_float+0xd6>
 8006bcc:	f1b9 0f00 	cmp.w	r9, #0
 8006bd0:	d003      	beq.n	8006bda <_scanf_float+0x6e>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bde:	f1ba 0f01 	cmp.w	sl, #1
 8006be2:	f200 8113 	bhi.w	8006e0c <_scanf_float+0x2a0>
 8006be6:	455e      	cmp	r6, fp
 8006be8:	f200 8105 	bhi.w	8006df6 <_scanf_float+0x28a>
 8006bec:	2501      	movs	r5, #1
 8006bee:	4628      	mov	r0, r5
 8006bf0:	b007      	add	sp, #28
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006bfa:	2a0d      	cmp	r2, #13
 8006bfc:	d8e6      	bhi.n	8006bcc <_scanf_float+0x60>
 8006bfe:	a101      	add	r1, pc, #4	; (adr r1, 8006c04 <_scanf_float+0x98>)
 8006c00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c04:	08006d43 	.word	0x08006d43
 8006c08:	08006bcd 	.word	0x08006bcd
 8006c0c:	08006bcd 	.word	0x08006bcd
 8006c10:	08006bcd 	.word	0x08006bcd
 8006c14:	08006da3 	.word	0x08006da3
 8006c18:	08006d7b 	.word	0x08006d7b
 8006c1c:	08006bcd 	.word	0x08006bcd
 8006c20:	08006bcd 	.word	0x08006bcd
 8006c24:	08006d51 	.word	0x08006d51
 8006c28:	08006bcd 	.word	0x08006bcd
 8006c2c:	08006bcd 	.word	0x08006bcd
 8006c30:	08006bcd 	.word	0x08006bcd
 8006c34:	08006bcd 	.word	0x08006bcd
 8006c38:	08006d09 	.word	0x08006d09
 8006c3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c40:	e7db      	b.n	8006bfa <_scanf_float+0x8e>
 8006c42:	290e      	cmp	r1, #14
 8006c44:	d8c2      	bhi.n	8006bcc <_scanf_float+0x60>
 8006c46:	a001      	add	r0, pc, #4	; (adr r0, 8006c4c <_scanf_float+0xe0>)
 8006c48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c4c:	08006cfb 	.word	0x08006cfb
 8006c50:	08006bcd 	.word	0x08006bcd
 8006c54:	08006cfb 	.word	0x08006cfb
 8006c58:	08006d8f 	.word	0x08006d8f
 8006c5c:	08006bcd 	.word	0x08006bcd
 8006c60:	08006ca9 	.word	0x08006ca9
 8006c64:	08006ce5 	.word	0x08006ce5
 8006c68:	08006ce5 	.word	0x08006ce5
 8006c6c:	08006ce5 	.word	0x08006ce5
 8006c70:	08006ce5 	.word	0x08006ce5
 8006c74:	08006ce5 	.word	0x08006ce5
 8006c78:	08006ce5 	.word	0x08006ce5
 8006c7c:	08006ce5 	.word	0x08006ce5
 8006c80:	08006ce5 	.word	0x08006ce5
 8006c84:	08006ce5 	.word	0x08006ce5
 8006c88:	2b6e      	cmp	r3, #110	; 0x6e
 8006c8a:	d809      	bhi.n	8006ca0 <_scanf_float+0x134>
 8006c8c:	2b60      	cmp	r3, #96	; 0x60
 8006c8e:	d8b2      	bhi.n	8006bf6 <_scanf_float+0x8a>
 8006c90:	2b54      	cmp	r3, #84	; 0x54
 8006c92:	d077      	beq.n	8006d84 <_scanf_float+0x218>
 8006c94:	2b59      	cmp	r3, #89	; 0x59
 8006c96:	d199      	bne.n	8006bcc <_scanf_float+0x60>
 8006c98:	2d07      	cmp	r5, #7
 8006c9a:	d197      	bne.n	8006bcc <_scanf_float+0x60>
 8006c9c:	2508      	movs	r5, #8
 8006c9e:	e029      	b.n	8006cf4 <_scanf_float+0x188>
 8006ca0:	2b74      	cmp	r3, #116	; 0x74
 8006ca2:	d06f      	beq.n	8006d84 <_scanf_float+0x218>
 8006ca4:	2b79      	cmp	r3, #121	; 0x79
 8006ca6:	e7f6      	b.n	8006c96 <_scanf_float+0x12a>
 8006ca8:	6821      	ldr	r1, [r4, #0]
 8006caa:	05c8      	lsls	r0, r1, #23
 8006cac:	d51a      	bpl.n	8006ce4 <_scanf_float+0x178>
 8006cae:	9b02      	ldr	r3, [sp, #8]
 8006cb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006cb4:	6021      	str	r1, [r4, #0]
 8006cb6:	f109 0901 	add.w	r9, r9, #1
 8006cba:	b11b      	cbz	r3, 8006cc4 <_scanf_float+0x158>
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	3201      	adds	r2, #1
 8006cc0:	9302      	str	r3, [sp, #8]
 8006cc2:	60a2      	str	r2, [r4, #8]
 8006cc4:	68a3      	ldr	r3, [r4, #8]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	60a3      	str	r3, [r4, #8]
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	6123      	str	r3, [r4, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	607b      	str	r3, [r7, #4]
 8006cd8:	f340 8084 	ble.w	8006de4 <_scanf_float+0x278>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	603b      	str	r3, [r7, #0]
 8006ce2:	e766      	b.n	8006bb2 <_scanf_float+0x46>
 8006ce4:	eb1a 0f05 	cmn.w	sl, r5
 8006ce8:	f47f af70 	bne.w	8006bcc <_scanf_float+0x60>
 8006cec:	6822      	ldr	r2, [r4, #0]
 8006cee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006cf2:	6022      	str	r2, [r4, #0]
 8006cf4:	f806 3b01 	strb.w	r3, [r6], #1
 8006cf8:	e7e4      	b.n	8006cc4 <_scanf_float+0x158>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	0610      	lsls	r0, r2, #24
 8006cfe:	f57f af65 	bpl.w	8006bcc <_scanf_float+0x60>
 8006d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d06:	e7f4      	b.n	8006cf2 <_scanf_float+0x186>
 8006d08:	f1ba 0f00 	cmp.w	sl, #0
 8006d0c:	d10e      	bne.n	8006d2c <_scanf_float+0x1c0>
 8006d0e:	f1b9 0f00 	cmp.w	r9, #0
 8006d12:	d10e      	bne.n	8006d32 <_scanf_float+0x1c6>
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d1e:	d108      	bne.n	8006d32 <_scanf_float+0x1c6>
 8006d20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d24:	6022      	str	r2, [r4, #0]
 8006d26:	f04f 0a01 	mov.w	sl, #1
 8006d2a:	e7e3      	b.n	8006cf4 <_scanf_float+0x188>
 8006d2c:	f1ba 0f02 	cmp.w	sl, #2
 8006d30:	d055      	beq.n	8006dde <_scanf_float+0x272>
 8006d32:	2d01      	cmp	r5, #1
 8006d34:	d002      	beq.n	8006d3c <_scanf_float+0x1d0>
 8006d36:	2d04      	cmp	r5, #4
 8006d38:	f47f af48 	bne.w	8006bcc <_scanf_float+0x60>
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	b2ed      	uxtb	r5, r5
 8006d40:	e7d8      	b.n	8006cf4 <_scanf_float+0x188>
 8006d42:	f1ba 0f01 	cmp.w	sl, #1
 8006d46:	f47f af41 	bne.w	8006bcc <_scanf_float+0x60>
 8006d4a:	f04f 0a02 	mov.w	sl, #2
 8006d4e:	e7d1      	b.n	8006cf4 <_scanf_float+0x188>
 8006d50:	b97d      	cbnz	r5, 8006d72 <_scanf_float+0x206>
 8006d52:	f1b9 0f00 	cmp.w	r9, #0
 8006d56:	f47f af3c 	bne.w	8006bd2 <_scanf_float+0x66>
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d64:	f47f af39 	bne.w	8006bda <_scanf_float+0x6e>
 8006d68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d6c:	6022      	str	r2, [r4, #0]
 8006d6e:	2501      	movs	r5, #1
 8006d70:	e7c0      	b.n	8006cf4 <_scanf_float+0x188>
 8006d72:	2d03      	cmp	r5, #3
 8006d74:	d0e2      	beq.n	8006d3c <_scanf_float+0x1d0>
 8006d76:	2d05      	cmp	r5, #5
 8006d78:	e7de      	b.n	8006d38 <_scanf_float+0x1cc>
 8006d7a:	2d02      	cmp	r5, #2
 8006d7c:	f47f af26 	bne.w	8006bcc <_scanf_float+0x60>
 8006d80:	2503      	movs	r5, #3
 8006d82:	e7b7      	b.n	8006cf4 <_scanf_float+0x188>
 8006d84:	2d06      	cmp	r5, #6
 8006d86:	f47f af21 	bne.w	8006bcc <_scanf_float+0x60>
 8006d8a:	2507      	movs	r5, #7
 8006d8c:	e7b2      	b.n	8006cf4 <_scanf_float+0x188>
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	0591      	lsls	r1, r2, #22
 8006d92:	f57f af1b 	bpl.w	8006bcc <_scanf_float+0x60>
 8006d96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006d9a:	6022      	str	r2, [r4, #0]
 8006d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006da0:	e7a8      	b.n	8006cf4 <_scanf_float+0x188>
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006da8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006dac:	d006      	beq.n	8006dbc <_scanf_float+0x250>
 8006dae:	0550      	lsls	r0, r2, #21
 8006db0:	f57f af0c 	bpl.w	8006bcc <_scanf_float+0x60>
 8006db4:	f1b9 0f00 	cmp.w	r9, #0
 8006db8:	f43f af0f 	beq.w	8006bda <_scanf_float+0x6e>
 8006dbc:	0591      	lsls	r1, r2, #22
 8006dbe:	bf58      	it	pl
 8006dc0:	9901      	ldrpl	r1, [sp, #4]
 8006dc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dc6:	bf58      	it	pl
 8006dc8:	eba9 0101 	subpl.w	r1, r9, r1
 8006dcc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006dd0:	bf58      	it	pl
 8006dd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006dd6:	6022      	str	r2, [r4, #0]
 8006dd8:	f04f 0900 	mov.w	r9, #0
 8006ddc:	e78a      	b.n	8006cf4 <_scanf_float+0x188>
 8006dde:	f04f 0a03 	mov.w	sl, #3
 8006de2:	e787      	b.n	8006cf4 <_scanf_float+0x188>
 8006de4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006de8:	4639      	mov	r1, r7
 8006dea:	4640      	mov	r0, r8
 8006dec:	4798      	blx	r3
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f43f aedf 	beq.w	8006bb2 <_scanf_float+0x46>
 8006df4:	e6ea      	b.n	8006bcc <_scanf_float+0x60>
 8006df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dfe:	463a      	mov	r2, r7
 8006e00:	4640      	mov	r0, r8
 8006e02:	4798      	blx	r3
 8006e04:	6923      	ldr	r3, [r4, #16]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	6123      	str	r3, [r4, #16]
 8006e0a:	e6ec      	b.n	8006be6 <_scanf_float+0x7a>
 8006e0c:	1e6b      	subs	r3, r5, #1
 8006e0e:	2b06      	cmp	r3, #6
 8006e10:	d825      	bhi.n	8006e5e <_scanf_float+0x2f2>
 8006e12:	2d02      	cmp	r5, #2
 8006e14:	d836      	bhi.n	8006e84 <_scanf_float+0x318>
 8006e16:	455e      	cmp	r6, fp
 8006e18:	f67f aee8 	bls.w	8006bec <_scanf_float+0x80>
 8006e1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e24:	463a      	mov	r2, r7
 8006e26:	4640      	mov	r0, r8
 8006e28:	4798      	blx	r3
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	6123      	str	r3, [r4, #16]
 8006e30:	e7f1      	b.n	8006e16 <_scanf_float+0x2aa>
 8006e32:	9802      	ldr	r0, [sp, #8]
 8006e34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e3c:	9002      	str	r0, [sp, #8]
 8006e3e:	463a      	mov	r2, r7
 8006e40:	4640      	mov	r0, r8
 8006e42:	4798      	blx	r3
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e4e:	fa5f fa8a 	uxtb.w	sl, sl
 8006e52:	f1ba 0f02 	cmp.w	sl, #2
 8006e56:	d1ec      	bne.n	8006e32 <_scanf_float+0x2c6>
 8006e58:	3d03      	subs	r5, #3
 8006e5a:	b2ed      	uxtb	r5, r5
 8006e5c:	1b76      	subs	r6, r6, r5
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	05da      	lsls	r2, r3, #23
 8006e62:	d52f      	bpl.n	8006ec4 <_scanf_float+0x358>
 8006e64:	055b      	lsls	r3, r3, #21
 8006e66:	d510      	bpl.n	8006e8a <_scanf_float+0x31e>
 8006e68:	455e      	cmp	r6, fp
 8006e6a:	f67f aebf 	bls.w	8006bec <_scanf_float+0x80>
 8006e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e76:	463a      	mov	r2, r7
 8006e78:	4640      	mov	r0, r8
 8006e7a:	4798      	blx	r3
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	e7f1      	b.n	8006e68 <_scanf_float+0x2fc>
 8006e84:	46aa      	mov	sl, r5
 8006e86:	9602      	str	r6, [sp, #8]
 8006e88:	e7df      	b.n	8006e4a <_scanf_float+0x2de>
 8006e8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e8e:	6923      	ldr	r3, [r4, #16]
 8006e90:	2965      	cmp	r1, #101	; 0x65
 8006e92:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e96:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e9a:	6123      	str	r3, [r4, #16]
 8006e9c:	d00c      	beq.n	8006eb8 <_scanf_float+0x34c>
 8006e9e:	2945      	cmp	r1, #69	; 0x45
 8006ea0:	d00a      	beq.n	8006eb8 <_scanf_float+0x34c>
 8006ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ea6:	463a      	mov	r2, r7
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4798      	blx	r3
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	1eb5      	subs	r5, r6, #2
 8006eb6:	6123      	str	r3, [r4, #16]
 8006eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ebc:	463a      	mov	r2, r7
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4798      	blx	r3
 8006ec2:	462e      	mov	r6, r5
 8006ec4:	6825      	ldr	r5, [r4, #0]
 8006ec6:	f015 0510 	ands.w	r5, r5, #16
 8006eca:	d159      	bne.n	8006f80 <_scanf_float+0x414>
 8006ecc:	7035      	strb	r5, [r6, #0]
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed8:	d11b      	bne.n	8006f12 <_scanf_float+0x3a6>
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	454b      	cmp	r3, r9
 8006ede:	eba3 0209 	sub.w	r2, r3, r9
 8006ee2:	d123      	bne.n	8006f2c <_scanf_float+0x3c0>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	4640      	mov	r0, r8
 8006eea:	f000 fe97 	bl	8007c1c <_strtod_r>
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	f012 0f02 	tst.w	r2, #2
 8006ef6:	ec57 6b10 	vmov	r6, r7, d0
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	d021      	beq.n	8006f42 <_scanf_float+0x3d6>
 8006efe:	9903      	ldr	r1, [sp, #12]
 8006f00:	1d1a      	adds	r2, r3, #4
 8006f02:	600a      	str	r2, [r1, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	e9c3 6700 	strd	r6, r7, [r3]
 8006f0a:	68e3      	ldr	r3, [r4, #12]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60e3      	str	r3, [r4, #12]
 8006f10:	e66d      	b.n	8006bee <_scanf_float+0x82>
 8006f12:	9b04      	ldr	r3, [sp, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0e5      	beq.n	8006ee4 <_scanf_float+0x378>
 8006f18:	9905      	ldr	r1, [sp, #20]
 8006f1a:	230a      	movs	r3, #10
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	3101      	adds	r1, #1
 8006f20:	4640      	mov	r0, r8
 8006f22:	f000 ff03 	bl	8007d2c <_strtol_r>
 8006f26:	9b04      	ldr	r3, [sp, #16]
 8006f28:	9e05      	ldr	r6, [sp, #20]
 8006f2a:	1ac2      	subs	r2, r0, r3
 8006f2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f30:	429e      	cmp	r6, r3
 8006f32:	bf28      	it	cs
 8006f34:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f38:	4912      	ldr	r1, [pc, #72]	; (8006f84 <_scanf_float+0x418>)
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f000 f82c 	bl	8006f98 <siprintf>
 8006f40:	e7d0      	b.n	8006ee4 <_scanf_float+0x378>
 8006f42:	9903      	ldr	r1, [sp, #12]
 8006f44:	f012 0f04 	tst.w	r2, #4
 8006f48:	f103 0204 	add.w	r2, r3, #4
 8006f4c:	600a      	str	r2, [r1, #0]
 8006f4e:	d1d9      	bne.n	8006f04 <_scanf_float+0x398>
 8006f50:	f8d3 8000 	ldr.w	r8, [r3]
 8006f54:	ee10 2a10 	vmov	r2, s0
 8006f58:	ee10 0a10 	vmov	r0, s0
 8006f5c:	463b      	mov	r3, r7
 8006f5e:	4639      	mov	r1, r7
 8006f60:	f7f9 fdfc 	bl	8000b5c <__aeabi_dcmpun>
 8006f64:	b128      	cbz	r0, 8006f72 <_scanf_float+0x406>
 8006f66:	4808      	ldr	r0, [pc, #32]	; (8006f88 <_scanf_float+0x41c>)
 8006f68:	f000 f810 	bl	8006f8c <nanf>
 8006f6c:	ed88 0a00 	vstr	s0, [r8]
 8006f70:	e7cb      	b.n	8006f0a <_scanf_float+0x39e>
 8006f72:	4630      	mov	r0, r6
 8006f74:	4639      	mov	r1, r7
 8006f76:	f7f9 fe4f 	bl	8000c18 <__aeabi_d2f>
 8006f7a:	f8c8 0000 	str.w	r0, [r8]
 8006f7e:	e7c4      	b.n	8006f0a <_scanf_float+0x39e>
 8006f80:	2500      	movs	r5, #0
 8006f82:	e634      	b.n	8006bee <_scanf_float+0x82>
 8006f84:	0800b9b0 	.word	0x0800b9b0
 8006f88:	0800bdb8 	.word	0x0800bdb8

08006f8c <nanf>:
 8006f8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006f94 <nanf+0x8>
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	7fc00000 	.word	0x7fc00000

08006f98 <siprintf>:
 8006f98:	b40e      	push	{r1, r2, r3}
 8006f9a:	b500      	push	{lr}
 8006f9c:	b09c      	sub	sp, #112	; 0x70
 8006f9e:	ab1d      	add	r3, sp, #116	; 0x74
 8006fa0:	9002      	str	r0, [sp, #8]
 8006fa2:	9006      	str	r0, [sp, #24]
 8006fa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fa8:	4809      	ldr	r0, [pc, #36]	; (8006fd0 <siprintf+0x38>)
 8006faa:	9107      	str	r1, [sp, #28]
 8006fac:	9104      	str	r1, [sp, #16]
 8006fae:	4909      	ldr	r1, [pc, #36]	; (8006fd4 <siprintf+0x3c>)
 8006fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb4:	9105      	str	r1, [sp, #20]
 8006fb6:	6800      	ldr	r0, [r0, #0]
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	a902      	add	r1, sp, #8
 8006fbc:	f002 fee2 	bl	8009d84 <_svfiprintf_r>
 8006fc0:	9b02      	ldr	r3, [sp, #8]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	b01c      	add	sp, #112	; 0x70
 8006fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fcc:	b003      	add	sp, #12
 8006fce:	4770      	bx	lr
 8006fd0:	20000030 	.word	0x20000030
 8006fd4:	ffff0208 	.word	0xffff0208

08006fd8 <sulp>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4604      	mov	r4, r0
 8006fdc:	460d      	mov	r5, r1
 8006fde:	ec45 4b10 	vmov	d0, r4, r5
 8006fe2:	4616      	mov	r6, r2
 8006fe4:	f002 fc2c 	bl	8009840 <__ulp>
 8006fe8:	ec51 0b10 	vmov	r0, r1, d0
 8006fec:	b17e      	cbz	r6, 800700e <sulp+0x36>
 8006fee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	dd09      	ble.n	800700e <sulp+0x36>
 8006ffa:	051b      	lsls	r3, r3, #20
 8006ffc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007000:	2400      	movs	r4, #0
 8007002:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007006:	4622      	mov	r2, r4
 8007008:	462b      	mov	r3, r5
 800700a:	f7f9 fb0d 	bl	8000628 <__aeabi_dmul>
 800700e:	bd70      	pop	{r4, r5, r6, pc}

08007010 <_strtod_l>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	ed2d 8b02 	vpush	{d8}
 8007018:	b09d      	sub	sp, #116	; 0x74
 800701a:	461f      	mov	r7, r3
 800701c:	2300      	movs	r3, #0
 800701e:	9318      	str	r3, [sp, #96]	; 0x60
 8007020:	4ba2      	ldr	r3, [pc, #648]	; (80072ac <_strtod_l+0x29c>)
 8007022:	9213      	str	r2, [sp, #76]	; 0x4c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	9305      	str	r3, [sp, #20]
 8007028:	4604      	mov	r4, r0
 800702a:	4618      	mov	r0, r3
 800702c:	4688      	mov	r8, r1
 800702e:	f7f9 f8e1 	bl	80001f4 <strlen>
 8007032:	f04f 0a00 	mov.w	sl, #0
 8007036:	4605      	mov	r5, r0
 8007038:	f04f 0b00 	mov.w	fp, #0
 800703c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	2a2b      	cmp	r2, #43	; 0x2b
 8007046:	d04e      	beq.n	80070e6 <_strtod_l+0xd6>
 8007048:	d83b      	bhi.n	80070c2 <_strtod_l+0xb2>
 800704a:	2a0d      	cmp	r2, #13
 800704c:	d834      	bhi.n	80070b8 <_strtod_l+0xa8>
 800704e:	2a08      	cmp	r2, #8
 8007050:	d834      	bhi.n	80070bc <_strtod_l+0xac>
 8007052:	2a00      	cmp	r2, #0
 8007054:	d03e      	beq.n	80070d4 <_strtod_l+0xc4>
 8007056:	2300      	movs	r3, #0
 8007058:	930a      	str	r3, [sp, #40]	; 0x28
 800705a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800705c:	7833      	ldrb	r3, [r6, #0]
 800705e:	2b30      	cmp	r3, #48	; 0x30
 8007060:	f040 80b0 	bne.w	80071c4 <_strtod_l+0x1b4>
 8007064:	7873      	ldrb	r3, [r6, #1]
 8007066:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800706a:	2b58      	cmp	r3, #88	; 0x58
 800706c:	d168      	bne.n	8007140 <_strtod_l+0x130>
 800706e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	ab18      	add	r3, sp, #96	; 0x60
 8007074:	9702      	str	r7, [sp, #8]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4a8d      	ldr	r2, [pc, #564]	; (80072b0 <_strtod_l+0x2a0>)
 800707a:	ab19      	add	r3, sp, #100	; 0x64
 800707c:	a917      	add	r1, sp, #92	; 0x5c
 800707e:	4620      	mov	r0, r4
 8007080:	f001 fd38 	bl	8008af4 <__gethex>
 8007084:	f010 0707 	ands.w	r7, r0, #7
 8007088:	4605      	mov	r5, r0
 800708a:	d005      	beq.n	8007098 <_strtod_l+0x88>
 800708c:	2f06      	cmp	r7, #6
 800708e:	d12c      	bne.n	80070ea <_strtod_l+0xda>
 8007090:	3601      	adds	r6, #1
 8007092:	2300      	movs	r3, #0
 8007094:	9617      	str	r6, [sp, #92]	; 0x5c
 8007096:	930a      	str	r3, [sp, #40]	; 0x28
 8007098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800709a:	2b00      	cmp	r3, #0
 800709c:	f040 8590 	bne.w	8007bc0 <_strtod_l+0xbb0>
 80070a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a2:	b1eb      	cbz	r3, 80070e0 <_strtod_l+0xd0>
 80070a4:	4652      	mov	r2, sl
 80070a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80070aa:	ec43 2b10 	vmov	d0, r2, r3
 80070ae:	b01d      	add	sp, #116	; 0x74
 80070b0:	ecbd 8b02 	vpop	{d8}
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b8:	2a20      	cmp	r2, #32
 80070ba:	d1cc      	bne.n	8007056 <_strtod_l+0x46>
 80070bc:	3301      	adds	r3, #1
 80070be:	9317      	str	r3, [sp, #92]	; 0x5c
 80070c0:	e7be      	b.n	8007040 <_strtod_l+0x30>
 80070c2:	2a2d      	cmp	r2, #45	; 0x2d
 80070c4:	d1c7      	bne.n	8007056 <_strtod_l+0x46>
 80070c6:	2201      	movs	r2, #1
 80070c8:	920a      	str	r2, [sp, #40]	; 0x28
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1c2      	bne.n	800705a <_strtod_l+0x4a>
 80070d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 856e 	bne.w	8007bbc <_strtod_l+0xbac>
 80070e0:	4652      	mov	r2, sl
 80070e2:	465b      	mov	r3, fp
 80070e4:	e7e1      	b.n	80070aa <_strtod_l+0x9a>
 80070e6:	2200      	movs	r2, #0
 80070e8:	e7ee      	b.n	80070c8 <_strtod_l+0xb8>
 80070ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070ec:	b13a      	cbz	r2, 80070fe <_strtod_l+0xee>
 80070ee:	2135      	movs	r1, #53	; 0x35
 80070f0:	a81a      	add	r0, sp, #104	; 0x68
 80070f2:	f002 fcb0 	bl	8009a56 <__copybits>
 80070f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070f8:	4620      	mov	r0, r4
 80070fa:	f002 f86f 	bl	80091dc <_Bfree>
 80070fe:	3f01      	subs	r7, #1
 8007100:	2f04      	cmp	r7, #4
 8007102:	d806      	bhi.n	8007112 <_strtod_l+0x102>
 8007104:	e8df f007 	tbb	[pc, r7]
 8007108:	1714030a 	.word	0x1714030a
 800710c:	0a          	.byte	0x0a
 800710d:	00          	.byte	0x00
 800710e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007112:	0728      	lsls	r0, r5, #28
 8007114:	d5c0      	bpl.n	8007098 <_strtod_l+0x88>
 8007116:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800711a:	e7bd      	b.n	8007098 <_strtod_l+0x88>
 800711c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007120:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007122:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007126:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800712a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800712e:	e7f0      	b.n	8007112 <_strtod_l+0x102>
 8007130:	f8df b180 	ldr.w	fp, [pc, #384]	; 80072b4 <_strtod_l+0x2a4>
 8007134:	e7ed      	b.n	8007112 <_strtod_l+0x102>
 8007136:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800713a:	f04f 3aff 	mov.w	sl, #4294967295
 800713e:	e7e8      	b.n	8007112 <_strtod_l+0x102>
 8007140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	9217      	str	r2, [sp, #92]	; 0x5c
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	2b30      	cmp	r3, #48	; 0x30
 800714a:	d0f9      	beq.n	8007140 <_strtod_l+0x130>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0a3      	beq.n	8007098 <_strtod_l+0x88>
 8007150:	2301      	movs	r3, #1
 8007152:	f04f 0900 	mov.w	r9, #0
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800715a:	9308      	str	r3, [sp, #32]
 800715c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007160:	464f      	mov	r7, r9
 8007162:	220a      	movs	r2, #10
 8007164:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007166:	7806      	ldrb	r6, [r0, #0]
 8007168:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800716c:	b2d9      	uxtb	r1, r3
 800716e:	2909      	cmp	r1, #9
 8007170:	d92a      	bls.n	80071c8 <_strtod_l+0x1b8>
 8007172:	9905      	ldr	r1, [sp, #20]
 8007174:	462a      	mov	r2, r5
 8007176:	f002 ff1f 	bl	8009fb8 <strncmp>
 800717a:	b398      	cbz	r0, 80071e4 <_strtod_l+0x1d4>
 800717c:	2000      	movs	r0, #0
 800717e:	4632      	mov	r2, r6
 8007180:	463d      	mov	r5, r7
 8007182:	9005      	str	r0, [sp, #20]
 8007184:	4603      	mov	r3, r0
 8007186:	2a65      	cmp	r2, #101	; 0x65
 8007188:	d001      	beq.n	800718e <_strtod_l+0x17e>
 800718a:	2a45      	cmp	r2, #69	; 0x45
 800718c:	d118      	bne.n	80071c0 <_strtod_l+0x1b0>
 800718e:	b91d      	cbnz	r5, 8007198 <_strtod_l+0x188>
 8007190:	9a04      	ldr	r2, [sp, #16]
 8007192:	4302      	orrs	r2, r0
 8007194:	d09e      	beq.n	80070d4 <_strtod_l+0xc4>
 8007196:	2500      	movs	r5, #0
 8007198:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800719c:	f108 0201 	add.w	r2, r8, #1
 80071a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80071a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80071a6:	2a2b      	cmp	r2, #43	; 0x2b
 80071a8:	d075      	beq.n	8007296 <_strtod_l+0x286>
 80071aa:	2a2d      	cmp	r2, #45	; 0x2d
 80071ac:	d07b      	beq.n	80072a6 <_strtod_l+0x296>
 80071ae:	f04f 0c00 	mov.w	ip, #0
 80071b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80071b6:	2909      	cmp	r1, #9
 80071b8:	f240 8082 	bls.w	80072c0 <_strtod_l+0x2b0>
 80071bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071c0:	2600      	movs	r6, #0
 80071c2:	e09d      	b.n	8007300 <_strtod_l+0x2f0>
 80071c4:	2300      	movs	r3, #0
 80071c6:	e7c4      	b.n	8007152 <_strtod_l+0x142>
 80071c8:	2f08      	cmp	r7, #8
 80071ca:	bfd8      	it	le
 80071cc:	9907      	ldrle	r1, [sp, #28]
 80071ce:	f100 0001 	add.w	r0, r0, #1
 80071d2:	bfda      	itte	le
 80071d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80071d8:	9307      	strle	r3, [sp, #28]
 80071da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80071de:	3701      	adds	r7, #1
 80071e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80071e2:	e7bf      	b.n	8007164 <_strtod_l+0x154>
 80071e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071e6:	195a      	adds	r2, r3, r5
 80071e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80071ea:	5d5a      	ldrb	r2, [r3, r5]
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	d037      	beq.n	8007260 <_strtod_l+0x250>
 80071f0:	9005      	str	r0, [sp, #20]
 80071f2:	463d      	mov	r5, r7
 80071f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071f8:	2b09      	cmp	r3, #9
 80071fa:	d912      	bls.n	8007222 <_strtod_l+0x212>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e7c2      	b.n	8007186 <_strtod_l+0x176>
 8007200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	9217      	str	r2, [sp, #92]	; 0x5c
 8007206:	785a      	ldrb	r2, [r3, #1]
 8007208:	3001      	adds	r0, #1
 800720a:	2a30      	cmp	r2, #48	; 0x30
 800720c:	d0f8      	beq.n	8007200 <_strtod_l+0x1f0>
 800720e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007212:	2b08      	cmp	r3, #8
 8007214:	f200 84d9 	bhi.w	8007bca <_strtod_l+0xbba>
 8007218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800721a:	9005      	str	r0, [sp, #20]
 800721c:	2000      	movs	r0, #0
 800721e:	9308      	str	r3, [sp, #32]
 8007220:	4605      	mov	r5, r0
 8007222:	3a30      	subs	r2, #48	; 0x30
 8007224:	f100 0301 	add.w	r3, r0, #1
 8007228:	d014      	beq.n	8007254 <_strtod_l+0x244>
 800722a:	9905      	ldr	r1, [sp, #20]
 800722c:	4419      	add	r1, r3
 800722e:	9105      	str	r1, [sp, #20]
 8007230:	462b      	mov	r3, r5
 8007232:	eb00 0e05 	add.w	lr, r0, r5
 8007236:	210a      	movs	r1, #10
 8007238:	4573      	cmp	r3, lr
 800723a:	d113      	bne.n	8007264 <_strtod_l+0x254>
 800723c:	182b      	adds	r3, r5, r0
 800723e:	2b08      	cmp	r3, #8
 8007240:	f105 0501 	add.w	r5, r5, #1
 8007244:	4405      	add	r5, r0
 8007246:	dc1c      	bgt.n	8007282 <_strtod_l+0x272>
 8007248:	9907      	ldr	r1, [sp, #28]
 800724a:	230a      	movs	r3, #10
 800724c:	fb03 2301 	mla	r3, r3, r1, r2
 8007250:	9307      	str	r3, [sp, #28]
 8007252:	2300      	movs	r3, #0
 8007254:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007256:	1c51      	adds	r1, r2, #1
 8007258:	9117      	str	r1, [sp, #92]	; 0x5c
 800725a:	7852      	ldrb	r2, [r2, #1]
 800725c:	4618      	mov	r0, r3
 800725e:	e7c9      	b.n	80071f4 <_strtod_l+0x1e4>
 8007260:	4638      	mov	r0, r7
 8007262:	e7d2      	b.n	800720a <_strtod_l+0x1fa>
 8007264:	2b08      	cmp	r3, #8
 8007266:	dc04      	bgt.n	8007272 <_strtod_l+0x262>
 8007268:	9e07      	ldr	r6, [sp, #28]
 800726a:	434e      	muls	r6, r1
 800726c:	9607      	str	r6, [sp, #28]
 800726e:	3301      	adds	r3, #1
 8007270:	e7e2      	b.n	8007238 <_strtod_l+0x228>
 8007272:	f103 0c01 	add.w	ip, r3, #1
 8007276:	f1bc 0f10 	cmp.w	ip, #16
 800727a:	bfd8      	it	le
 800727c:	fb01 f909 	mulle.w	r9, r1, r9
 8007280:	e7f5      	b.n	800726e <_strtod_l+0x25e>
 8007282:	2d10      	cmp	r5, #16
 8007284:	bfdc      	itt	le
 8007286:	230a      	movle	r3, #10
 8007288:	fb03 2909 	mlale	r9, r3, r9, r2
 800728c:	e7e1      	b.n	8007252 <_strtod_l+0x242>
 800728e:	2300      	movs	r3, #0
 8007290:	9305      	str	r3, [sp, #20]
 8007292:	2301      	movs	r3, #1
 8007294:	e77c      	b.n	8007190 <_strtod_l+0x180>
 8007296:	f04f 0c00 	mov.w	ip, #0
 800729a:	f108 0202 	add.w	r2, r8, #2
 800729e:	9217      	str	r2, [sp, #92]	; 0x5c
 80072a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80072a4:	e785      	b.n	80071b2 <_strtod_l+0x1a2>
 80072a6:	f04f 0c01 	mov.w	ip, #1
 80072aa:	e7f6      	b.n	800729a <_strtod_l+0x28a>
 80072ac:	0800bc00 	.word	0x0800bc00
 80072b0:	0800b9b8 	.word	0x0800b9b8
 80072b4:	7ff00000 	.word	0x7ff00000
 80072b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072ba:	1c51      	adds	r1, r2, #1
 80072bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80072be:	7852      	ldrb	r2, [r2, #1]
 80072c0:	2a30      	cmp	r2, #48	; 0x30
 80072c2:	d0f9      	beq.n	80072b8 <_strtod_l+0x2a8>
 80072c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80072c8:	2908      	cmp	r1, #8
 80072ca:	f63f af79 	bhi.w	80071c0 <_strtod_l+0x1b0>
 80072ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80072d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072d4:	9206      	str	r2, [sp, #24]
 80072d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072d8:	1c51      	adds	r1, r2, #1
 80072da:	9117      	str	r1, [sp, #92]	; 0x5c
 80072dc:	7852      	ldrb	r2, [r2, #1]
 80072de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80072e2:	2e09      	cmp	r6, #9
 80072e4:	d937      	bls.n	8007356 <_strtod_l+0x346>
 80072e6:	9e06      	ldr	r6, [sp, #24]
 80072e8:	1b89      	subs	r1, r1, r6
 80072ea:	2908      	cmp	r1, #8
 80072ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80072f0:	dc02      	bgt.n	80072f8 <_strtod_l+0x2e8>
 80072f2:	4576      	cmp	r6, lr
 80072f4:	bfa8      	it	ge
 80072f6:	4676      	movge	r6, lr
 80072f8:	f1bc 0f00 	cmp.w	ip, #0
 80072fc:	d000      	beq.n	8007300 <_strtod_l+0x2f0>
 80072fe:	4276      	negs	r6, r6
 8007300:	2d00      	cmp	r5, #0
 8007302:	d14d      	bne.n	80073a0 <_strtod_l+0x390>
 8007304:	9904      	ldr	r1, [sp, #16]
 8007306:	4301      	orrs	r1, r0
 8007308:	f47f aec6 	bne.w	8007098 <_strtod_l+0x88>
 800730c:	2b00      	cmp	r3, #0
 800730e:	f47f aee1 	bne.w	80070d4 <_strtod_l+0xc4>
 8007312:	2a69      	cmp	r2, #105	; 0x69
 8007314:	d027      	beq.n	8007366 <_strtod_l+0x356>
 8007316:	dc24      	bgt.n	8007362 <_strtod_l+0x352>
 8007318:	2a49      	cmp	r2, #73	; 0x49
 800731a:	d024      	beq.n	8007366 <_strtod_l+0x356>
 800731c:	2a4e      	cmp	r2, #78	; 0x4e
 800731e:	f47f aed9 	bne.w	80070d4 <_strtod_l+0xc4>
 8007322:	499f      	ldr	r1, [pc, #636]	; (80075a0 <_strtod_l+0x590>)
 8007324:	a817      	add	r0, sp, #92	; 0x5c
 8007326:	f001 fe3d 	bl	8008fa4 <__match>
 800732a:	2800      	cmp	r0, #0
 800732c:	f43f aed2 	beq.w	80070d4 <_strtod_l+0xc4>
 8007330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b28      	cmp	r3, #40	; 0x28
 8007336:	d12d      	bne.n	8007394 <_strtod_l+0x384>
 8007338:	499a      	ldr	r1, [pc, #616]	; (80075a4 <_strtod_l+0x594>)
 800733a:	aa1a      	add	r2, sp, #104	; 0x68
 800733c:	a817      	add	r0, sp, #92	; 0x5c
 800733e:	f001 fe45 	bl	8008fcc <__hexnan>
 8007342:	2805      	cmp	r0, #5
 8007344:	d126      	bne.n	8007394 <_strtod_l+0x384>
 8007346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007348:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800734c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007350:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007354:	e6a0      	b.n	8007098 <_strtod_l+0x88>
 8007356:	210a      	movs	r1, #10
 8007358:	fb01 2e0e 	mla	lr, r1, lr, r2
 800735c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007360:	e7b9      	b.n	80072d6 <_strtod_l+0x2c6>
 8007362:	2a6e      	cmp	r2, #110	; 0x6e
 8007364:	e7db      	b.n	800731e <_strtod_l+0x30e>
 8007366:	4990      	ldr	r1, [pc, #576]	; (80075a8 <_strtod_l+0x598>)
 8007368:	a817      	add	r0, sp, #92	; 0x5c
 800736a:	f001 fe1b 	bl	8008fa4 <__match>
 800736e:	2800      	cmp	r0, #0
 8007370:	f43f aeb0 	beq.w	80070d4 <_strtod_l+0xc4>
 8007374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007376:	498d      	ldr	r1, [pc, #564]	; (80075ac <_strtod_l+0x59c>)
 8007378:	3b01      	subs	r3, #1
 800737a:	a817      	add	r0, sp, #92	; 0x5c
 800737c:	9317      	str	r3, [sp, #92]	; 0x5c
 800737e:	f001 fe11 	bl	8008fa4 <__match>
 8007382:	b910      	cbnz	r0, 800738a <_strtod_l+0x37a>
 8007384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007386:	3301      	adds	r3, #1
 8007388:	9317      	str	r3, [sp, #92]	; 0x5c
 800738a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80075bc <_strtod_l+0x5ac>
 800738e:	f04f 0a00 	mov.w	sl, #0
 8007392:	e681      	b.n	8007098 <_strtod_l+0x88>
 8007394:	4886      	ldr	r0, [pc, #536]	; (80075b0 <_strtod_l+0x5a0>)
 8007396:	f002 fdf7 	bl	8009f88 <nan>
 800739a:	ec5b ab10 	vmov	sl, fp, d0
 800739e:	e67b      	b.n	8007098 <_strtod_l+0x88>
 80073a0:	9b05      	ldr	r3, [sp, #20]
 80073a2:	9807      	ldr	r0, [sp, #28]
 80073a4:	1af3      	subs	r3, r6, r3
 80073a6:	2f00      	cmp	r7, #0
 80073a8:	bf08      	it	eq
 80073aa:	462f      	moveq	r7, r5
 80073ac:	2d10      	cmp	r5, #16
 80073ae:	9306      	str	r3, [sp, #24]
 80073b0:	46a8      	mov	r8, r5
 80073b2:	bfa8      	it	ge
 80073b4:	f04f 0810 	movge.w	r8, #16
 80073b8:	f7f9 f8bc 	bl	8000534 <__aeabi_ui2d>
 80073bc:	2d09      	cmp	r5, #9
 80073be:	4682      	mov	sl, r0
 80073c0:	468b      	mov	fp, r1
 80073c2:	dd13      	ble.n	80073ec <_strtod_l+0x3dc>
 80073c4:	4b7b      	ldr	r3, [pc, #492]	; (80075b4 <_strtod_l+0x5a4>)
 80073c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80073ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073ce:	f7f9 f92b 	bl	8000628 <__aeabi_dmul>
 80073d2:	4682      	mov	sl, r0
 80073d4:	4648      	mov	r0, r9
 80073d6:	468b      	mov	fp, r1
 80073d8:	f7f9 f8ac 	bl	8000534 <__aeabi_ui2d>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4650      	mov	r0, sl
 80073e2:	4659      	mov	r1, fp
 80073e4:	f7f8 ff6a 	bl	80002bc <__adddf3>
 80073e8:	4682      	mov	sl, r0
 80073ea:	468b      	mov	fp, r1
 80073ec:	2d0f      	cmp	r5, #15
 80073ee:	dc38      	bgt.n	8007462 <_strtod_l+0x452>
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f43f ae50 	beq.w	8007098 <_strtod_l+0x88>
 80073f8:	dd24      	ble.n	8007444 <_strtod_l+0x434>
 80073fa:	2b16      	cmp	r3, #22
 80073fc:	dc0b      	bgt.n	8007416 <_strtod_l+0x406>
 80073fe:	496d      	ldr	r1, [pc, #436]	; (80075b4 <_strtod_l+0x5a4>)
 8007400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007408:	4652      	mov	r2, sl
 800740a:	465b      	mov	r3, fp
 800740c:	f7f9 f90c 	bl	8000628 <__aeabi_dmul>
 8007410:	4682      	mov	sl, r0
 8007412:	468b      	mov	fp, r1
 8007414:	e640      	b.n	8007098 <_strtod_l+0x88>
 8007416:	9a06      	ldr	r2, [sp, #24]
 8007418:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800741c:	4293      	cmp	r3, r2
 800741e:	db20      	blt.n	8007462 <_strtod_l+0x452>
 8007420:	4c64      	ldr	r4, [pc, #400]	; (80075b4 <_strtod_l+0x5a4>)
 8007422:	f1c5 050f 	rsb	r5, r5, #15
 8007426:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800742a:	4652      	mov	r2, sl
 800742c:	465b      	mov	r3, fp
 800742e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007432:	f7f9 f8f9 	bl	8000628 <__aeabi_dmul>
 8007436:	9b06      	ldr	r3, [sp, #24]
 8007438:	1b5d      	subs	r5, r3, r5
 800743a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800743e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007442:	e7e3      	b.n	800740c <_strtod_l+0x3fc>
 8007444:	9b06      	ldr	r3, [sp, #24]
 8007446:	3316      	adds	r3, #22
 8007448:	db0b      	blt.n	8007462 <_strtod_l+0x452>
 800744a:	9b05      	ldr	r3, [sp, #20]
 800744c:	1b9e      	subs	r6, r3, r6
 800744e:	4b59      	ldr	r3, [pc, #356]	; (80075b4 <_strtod_l+0x5a4>)
 8007450:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007454:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007458:	4650      	mov	r0, sl
 800745a:	4659      	mov	r1, fp
 800745c:	f7f9 fa0e 	bl	800087c <__aeabi_ddiv>
 8007460:	e7d6      	b.n	8007410 <_strtod_l+0x400>
 8007462:	9b06      	ldr	r3, [sp, #24]
 8007464:	eba5 0808 	sub.w	r8, r5, r8
 8007468:	4498      	add	r8, r3
 800746a:	f1b8 0f00 	cmp.w	r8, #0
 800746e:	dd74      	ble.n	800755a <_strtod_l+0x54a>
 8007470:	f018 030f 	ands.w	r3, r8, #15
 8007474:	d00a      	beq.n	800748c <_strtod_l+0x47c>
 8007476:	494f      	ldr	r1, [pc, #316]	; (80075b4 <_strtod_l+0x5a4>)
 8007478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800747c:	4652      	mov	r2, sl
 800747e:	465b      	mov	r3, fp
 8007480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007484:	f7f9 f8d0 	bl	8000628 <__aeabi_dmul>
 8007488:	4682      	mov	sl, r0
 800748a:	468b      	mov	fp, r1
 800748c:	f038 080f 	bics.w	r8, r8, #15
 8007490:	d04f      	beq.n	8007532 <_strtod_l+0x522>
 8007492:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007496:	dd22      	ble.n	80074de <_strtod_l+0x4ce>
 8007498:	2500      	movs	r5, #0
 800749a:	462e      	mov	r6, r5
 800749c:	9507      	str	r5, [sp, #28]
 800749e:	9505      	str	r5, [sp, #20]
 80074a0:	2322      	movs	r3, #34	; 0x22
 80074a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80075bc <_strtod_l+0x5ac>
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	f04f 0a00 	mov.w	sl, #0
 80074ac:	9b07      	ldr	r3, [sp, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f43f adf2 	beq.w	8007098 <_strtod_l+0x88>
 80074b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074b6:	4620      	mov	r0, r4
 80074b8:	f001 fe90 	bl	80091dc <_Bfree>
 80074bc:	9905      	ldr	r1, [sp, #20]
 80074be:	4620      	mov	r0, r4
 80074c0:	f001 fe8c 	bl	80091dc <_Bfree>
 80074c4:	4631      	mov	r1, r6
 80074c6:	4620      	mov	r0, r4
 80074c8:	f001 fe88 	bl	80091dc <_Bfree>
 80074cc:	9907      	ldr	r1, [sp, #28]
 80074ce:	4620      	mov	r0, r4
 80074d0:	f001 fe84 	bl	80091dc <_Bfree>
 80074d4:	4629      	mov	r1, r5
 80074d6:	4620      	mov	r0, r4
 80074d8:	f001 fe80 	bl	80091dc <_Bfree>
 80074dc:	e5dc      	b.n	8007098 <_strtod_l+0x88>
 80074de:	4b36      	ldr	r3, [pc, #216]	; (80075b8 <_strtod_l+0x5a8>)
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	2300      	movs	r3, #0
 80074e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80074e8:	4650      	mov	r0, sl
 80074ea:	4659      	mov	r1, fp
 80074ec:	4699      	mov	r9, r3
 80074ee:	f1b8 0f01 	cmp.w	r8, #1
 80074f2:	dc21      	bgt.n	8007538 <_strtod_l+0x528>
 80074f4:	b10b      	cbz	r3, 80074fa <_strtod_l+0x4ea>
 80074f6:	4682      	mov	sl, r0
 80074f8:	468b      	mov	fp, r1
 80074fa:	4b2f      	ldr	r3, [pc, #188]	; (80075b8 <_strtod_l+0x5a8>)
 80074fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007500:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007504:	4652      	mov	r2, sl
 8007506:	465b      	mov	r3, fp
 8007508:	e9d9 0100 	ldrd	r0, r1, [r9]
 800750c:	f7f9 f88c 	bl	8000628 <__aeabi_dmul>
 8007510:	4b2a      	ldr	r3, [pc, #168]	; (80075bc <_strtod_l+0x5ac>)
 8007512:	460a      	mov	r2, r1
 8007514:	400b      	ands	r3, r1
 8007516:	492a      	ldr	r1, [pc, #168]	; (80075c0 <_strtod_l+0x5b0>)
 8007518:	428b      	cmp	r3, r1
 800751a:	4682      	mov	sl, r0
 800751c:	d8bc      	bhi.n	8007498 <_strtod_l+0x488>
 800751e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007522:	428b      	cmp	r3, r1
 8007524:	bf86      	itte	hi
 8007526:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80075c4 <_strtod_l+0x5b4>
 800752a:	f04f 3aff 	movhi.w	sl, #4294967295
 800752e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007532:	2300      	movs	r3, #0
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	e084      	b.n	8007642 <_strtod_l+0x632>
 8007538:	f018 0f01 	tst.w	r8, #1
 800753c:	d005      	beq.n	800754a <_strtod_l+0x53a>
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f7f9 f870 	bl	8000628 <__aeabi_dmul>
 8007548:	2301      	movs	r3, #1
 800754a:	9a04      	ldr	r2, [sp, #16]
 800754c:	3208      	adds	r2, #8
 800754e:	f109 0901 	add.w	r9, r9, #1
 8007552:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007556:	9204      	str	r2, [sp, #16]
 8007558:	e7c9      	b.n	80074ee <_strtod_l+0x4de>
 800755a:	d0ea      	beq.n	8007532 <_strtod_l+0x522>
 800755c:	f1c8 0800 	rsb	r8, r8, #0
 8007560:	f018 020f 	ands.w	r2, r8, #15
 8007564:	d00a      	beq.n	800757c <_strtod_l+0x56c>
 8007566:	4b13      	ldr	r3, [pc, #76]	; (80075b4 <_strtod_l+0x5a4>)
 8007568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800756c:	4650      	mov	r0, sl
 800756e:	4659      	mov	r1, fp
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f7f9 f982 	bl	800087c <__aeabi_ddiv>
 8007578:	4682      	mov	sl, r0
 800757a:	468b      	mov	fp, r1
 800757c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007580:	d0d7      	beq.n	8007532 <_strtod_l+0x522>
 8007582:	f1b8 0f1f 	cmp.w	r8, #31
 8007586:	dd1f      	ble.n	80075c8 <_strtod_l+0x5b8>
 8007588:	2500      	movs	r5, #0
 800758a:	462e      	mov	r6, r5
 800758c:	9507      	str	r5, [sp, #28]
 800758e:	9505      	str	r5, [sp, #20]
 8007590:	2322      	movs	r3, #34	; 0x22
 8007592:	f04f 0a00 	mov.w	sl, #0
 8007596:	f04f 0b00 	mov.w	fp, #0
 800759a:	6023      	str	r3, [r4, #0]
 800759c:	e786      	b.n	80074ac <_strtod_l+0x49c>
 800759e:	bf00      	nop
 80075a0:	0800b989 	.word	0x0800b989
 80075a4:	0800b9cc 	.word	0x0800b9cc
 80075a8:	0800b981 	.word	0x0800b981
 80075ac:	0800bb0c 	.word	0x0800bb0c
 80075b0:	0800bdb8 	.word	0x0800bdb8
 80075b4:	0800bc98 	.word	0x0800bc98
 80075b8:	0800bc70 	.word	0x0800bc70
 80075bc:	7ff00000 	.word	0x7ff00000
 80075c0:	7ca00000 	.word	0x7ca00000
 80075c4:	7fefffff 	.word	0x7fefffff
 80075c8:	f018 0310 	ands.w	r3, r8, #16
 80075cc:	bf18      	it	ne
 80075ce:	236a      	movne	r3, #106	; 0x6a
 80075d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007980 <_strtod_l+0x970>
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	4650      	mov	r0, sl
 80075d8:	4659      	mov	r1, fp
 80075da:	2300      	movs	r3, #0
 80075dc:	f018 0f01 	tst.w	r8, #1
 80075e0:	d004      	beq.n	80075ec <_strtod_l+0x5dc>
 80075e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80075e6:	f7f9 f81f 	bl	8000628 <__aeabi_dmul>
 80075ea:	2301      	movs	r3, #1
 80075ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80075f0:	f109 0908 	add.w	r9, r9, #8
 80075f4:	d1f2      	bne.n	80075dc <_strtod_l+0x5cc>
 80075f6:	b10b      	cbz	r3, 80075fc <_strtod_l+0x5ec>
 80075f8:	4682      	mov	sl, r0
 80075fa:	468b      	mov	fp, r1
 80075fc:	9b04      	ldr	r3, [sp, #16]
 80075fe:	b1c3      	cbz	r3, 8007632 <_strtod_l+0x622>
 8007600:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007604:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007608:	2b00      	cmp	r3, #0
 800760a:	4659      	mov	r1, fp
 800760c:	dd11      	ble.n	8007632 <_strtod_l+0x622>
 800760e:	2b1f      	cmp	r3, #31
 8007610:	f340 8124 	ble.w	800785c <_strtod_l+0x84c>
 8007614:	2b34      	cmp	r3, #52	; 0x34
 8007616:	bfde      	ittt	le
 8007618:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800761c:	f04f 33ff 	movle.w	r3, #4294967295
 8007620:	fa03 f202 	lslle.w	r2, r3, r2
 8007624:	f04f 0a00 	mov.w	sl, #0
 8007628:	bfcc      	ite	gt
 800762a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800762e:	ea02 0b01 	andle.w	fp, r2, r1
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	4650      	mov	r0, sl
 8007638:	4659      	mov	r1, fp
 800763a:	f7f9 fa5d 	bl	8000af8 <__aeabi_dcmpeq>
 800763e:	2800      	cmp	r0, #0
 8007640:	d1a2      	bne.n	8007588 <_strtod_l+0x578>
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	9908      	ldr	r1, [sp, #32]
 8007648:	462b      	mov	r3, r5
 800764a:	463a      	mov	r2, r7
 800764c:	4620      	mov	r0, r4
 800764e:	f001 fe2d 	bl	80092ac <__s2b>
 8007652:	9007      	str	r0, [sp, #28]
 8007654:	2800      	cmp	r0, #0
 8007656:	f43f af1f 	beq.w	8007498 <_strtod_l+0x488>
 800765a:	9b05      	ldr	r3, [sp, #20]
 800765c:	1b9e      	subs	r6, r3, r6
 800765e:	9b06      	ldr	r3, [sp, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfb4      	ite	lt
 8007664:	4633      	movlt	r3, r6
 8007666:	2300      	movge	r3, #0
 8007668:	930c      	str	r3, [sp, #48]	; 0x30
 800766a:	9b06      	ldr	r3, [sp, #24]
 800766c:	2500      	movs	r5, #0
 800766e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007672:	9312      	str	r3, [sp, #72]	; 0x48
 8007674:	462e      	mov	r6, r5
 8007676:	9b07      	ldr	r3, [sp, #28]
 8007678:	4620      	mov	r0, r4
 800767a:	6859      	ldr	r1, [r3, #4]
 800767c:	f001 fd6e 	bl	800915c <_Balloc>
 8007680:	9005      	str	r0, [sp, #20]
 8007682:	2800      	cmp	r0, #0
 8007684:	f43f af0c 	beq.w	80074a0 <_strtod_l+0x490>
 8007688:	9b07      	ldr	r3, [sp, #28]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	3202      	adds	r2, #2
 800768e:	f103 010c 	add.w	r1, r3, #12
 8007692:	0092      	lsls	r2, r2, #2
 8007694:	300c      	adds	r0, #12
 8007696:	f001 fd53 	bl	8009140 <memcpy>
 800769a:	ec4b ab10 	vmov	d0, sl, fp
 800769e:	aa1a      	add	r2, sp, #104	; 0x68
 80076a0:	a919      	add	r1, sp, #100	; 0x64
 80076a2:	4620      	mov	r0, r4
 80076a4:	f002 f948 	bl	8009938 <__d2b>
 80076a8:	ec4b ab18 	vmov	d8, sl, fp
 80076ac:	9018      	str	r0, [sp, #96]	; 0x60
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f43f aef6 	beq.w	80074a0 <_strtod_l+0x490>
 80076b4:	2101      	movs	r1, #1
 80076b6:	4620      	mov	r0, r4
 80076b8:	f001 fe92 	bl	80093e0 <__i2b>
 80076bc:	4606      	mov	r6, r0
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f aeee 	beq.w	80074a0 <_strtod_l+0x490>
 80076c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076c6:	9904      	ldr	r1, [sp, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfab      	itete	ge
 80076cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80076ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80076d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80076d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80076d6:	bfac      	ite	ge
 80076d8:	eb03 0902 	addge.w	r9, r3, r2
 80076dc:	1ad7      	sublt	r7, r2, r3
 80076de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80076e0:	eba3 0801 	sub.w	r8, r3, r1
 80076e4:	4490      	add	r8, r2
 80076e6:	4ba1      	ldr	r3, [pc, #644]	; (800796c <_strtod_l+0x95c>)
 80076e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80076ec:	4598      	cmp	r8, r3
 80076ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076f2:	f280 80c7 	bge.w	8007884 <_strtod_l+0x874>
 80076f6:	eba3 0308 	sub.w	r3, r3, r8
 80076fa:	2b1f      	cmp	r3, #31
 80076fc:	eba2 0203 	sub.w	r2, r2, r3
 8007700:	f04f 0101 	mov.w	r1, #1
 8007704:	f300 80b1 	bgt.w	800786a <_strtod_l+0x85a>
 8007708:	fa01 f303 	lsl.w	r3, r1, r3
 800770c:	930d      	str	r3, [sp, #52]	; 0x34
 800770e:	2300      	movs	r3, #0
 8007710:	9308      	str	r3, [sp, #32]
 8007712:	eb09 0802 	add.w	r8, r9, r2
 8007716:	9b04      	ldr	r3, [sp, #16]
 8007718:	45c1      	cmp	r9, r8
 800771a:	4417      	add	r7, r2
 800771c:	441f      	add	r7, r3
 800771e:	464b      	mov	r3, r9
 8007720:	bfa8      	it	ge
 8007722:	4643      	movge	r3, r8
 8007724:	42bb      	cmp	r3, r7
 8007726:	bfa8      	it	ge
 8007728:	463b      	movge	r3, r7
 800772a:	2b00      	cmp	r3, #0
 800772c:	bfc2      	ittt	gt
 800772e:	eba8 0803 	subgt.w	r8, r8, r3
 8007732:	1aff      	subgt	r7, r7, r3
 8007734:	eba9 0903 	subgt.w	r9, r9, r3
 8007738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800773a:	2b00      	cmp	r3, #0
 800773c:	dd17      	ble.n	800776e <_strtod_l+0x75e>
 800773e:	4631      	mov	r1, r6
 8007740:	461a      	mov	r2, r3
 8007742:	4620      	mov	r0, r4
 8007744:	f001 ff0c 	bl	8009560 <__pow5mult>
 8007748:	4606      	mov	r6, r0
 800774a:	2800      	cmp	r0, #0
 800774c:	f43f aea8 	beq.w	80074a0 <_strtod_l+0x490>
 8007750:	4601      	mov	r1, r0
 8007752:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007754:	4620      	mov	r0, r4
 8007756:	f001 fe59 	bl	800940c <__multiply>
 800775a:	900b      	str	r0, [sp, #44]	; 0x2c
 800775c:	2800      	cmp	r0, #0
 800775e:	f43f ae9f 	beq.w	80074a0 <_strtod_l+0x490>
 8007762:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007764:	4620      	mov	r0, r4
 8007766:	f001 fd39 	bl	80091dc <_Bfree>
 800776a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776c:	9318      	str	r3, [sp, #96]	; 0x60
 800776e:	f1b8 0f00 	cmp.w	r8, #0
 8007772:	f300 808c 	bgt.w	800788e <_strtod_l+0x87e>
 8007776:	9b06      	ldr	r3, [sp, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	dd08      	ble.n	800778e <_strtod_l+0x77e>
 800777c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800777e:	9905      	ldr	r1, [sp, #20]
 8007780:	4620      	mov	r0, r4
 8007782:	f001 feed 	bl	8009560 <__pow5mult>
 8007786:	9005      	str	r0, [sp, #20]
 8007788:	2800      	cmp	r0, #0
 800778a:	f43f ae89 	beq.w	80074a0 <_strtod_l+0x490>
 800778e:	2f00      	cmp	r7, #0
 8007790:	dd08      	ble.n	80077a4 <_strtod_l+0x794>
 8007792:	9905      	ldr	r1, [sp, #20]
 8007794:	463a      	mov	r2, r7
 8007796:	4620      	mov	r0, r4
 8007798:	f001 ff3c 	bl	8009614 <__lshift>
 800779c:	9005      	str	r0, [sp, #20]
 800779e:	2800      	cmp	r0, #0
 80077a0:	f43f ae7e 	beq.w	80074a0 <_strtod_l+0x490>
 80077a4:	f1b9 0f00 	cmp.w	r9, #0
 80077a8:	dd08      	ble.n	80077bc <_strtod_l+0x7ac>
 80077aa:	4631      	mov	r1, r6
 80077ac:	464a      	mov	r2, r9
 80077ae:	4620      	mov	r0, r4
 80077b0:	f001 ff30 	bl	8009614 <__lshift>
 80077b4:	4606      	mov	r6, r0
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f43f ae72 	beq.w	80074a0 <_strtod_l+0x490>
 80077bc:	9a05      	ldr	r2, [sp, #20]
 80077be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077c0:	4620      	mov	r0, r4
 80077c2:	f001 ffb3 	bl	800972c <__mdiff>
 80077c6:	4605      	mov	r5, r0
 80077c8:	2800      	cmp	r0, #0
 80077ca:	f43f ae69 	beq.w	80074a0 <_strtod_l+0x490>
 80077ce:	68c3      	ldr	r3, [r0, #12]
 80077d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80077d2:	2300      	movs	r3, #0
 80077d4:	60c3      	str	r3, [r0, #12]
 80077d6:	4631      	mov	r1, r6
 80077d8:	f001 ff8c 	bl	80096f4 <__mcmp>
 80077dc:	2800      	cmp	r0, #0
 80077de:	da60      	bge.n	80078a2 <_strtod_l+0x892>
 80077e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e2:	ea53 030a 	orrs.w	r3, r3, sl
 80077e6:	f040 8082 	bne.w	80078ee <_strtod_l+0x8de>
 80077ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d17d      	bne.n	80078ee <_strtod_l+0x8de>
 80077f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077f6:	0d1b      	lsrs	r3, r3, #20
 80077f8:	051b      	lsls	r3, r3, #20
 80077fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077fe:	d976      	bls.n	80078ee <_strtod_l+0x8de>
 8007800:	696b      	ldr	r3, [r5, #20]
 8007802:	b913      	cbnz	r3, 800780a <_strtod_l+0x7fa>
 8007804:	692b      	ldr	r3, [r5, #16]
 8007806:	2b01      	cmp	r3, #1
 8007808:	dd71      	ble.n	80078ee <_strtod_l+0x8de>
 800780a:	4629      	mov	r1, r5
 800780c:	2201      	movs	r2, #1
 800780e:	4620      	mov	r0, r4
 8007810:	f001 ff00 	bl	8009614 <__lshift>
 8007814:	4631      	mov	r1, r6
 8007816:	4605      	mov	r5, r0
 8007818:	f001 ff6c 	bl	80096f4 <__mcmp>
 800781c:	2800      	cmp	r0, #0
 800781e:	dd66      	ble.n	80078ee <_strtod_l+0x8de>
 8007820:	9904      	ldr	r1, [sp, #16]
 8007822:	4a53      	ldr	r2, [pc, #332]	; (8007970 <_strtod_l+0x960>)
 8007824:	465b      	mov	r3, fp
 8007826:	2900      	cmp	r1, #0
 8007828:	f000 8081 	beq.w	800792e <_strtod_l+0x91e>
 800782c:	ea02 010b 	and.w	r1, r2, fp
 8007830:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007834:	dc7b      	bgt.n	800792e <_strtod_l+0x91e>
 8007836:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800783a:	f77f aea9 	ble.w	8007590 <_strtod_l+0x580>
 800783e:	4b4d      	ldr	r3, [pc, #308]	; (8007974 <_strtod_l+0x964>)
 8007840:	4650      	mov	r0, sl
 8007842:	4659      	mov	r1, fp
 8007844:	2200      	movs	r2, #0
 8007846:	f7f8 feef 	bl	8000628 <__aeabi_dmul>
 800784a:	460b      	mov	r3, r1
 800784c:	4303      	orrs	r3, r0
 800784e:	bf08      	it	eq
 8007850:	2322      	moveq	r3, #34	; 0x22
 8007852:	4682      	mov	sl, r0
 8007854:	468b      	mov	fp, r1
 8007856:	bf08      	it	eq
 8007858:	6023      	streq	r3, [r4, #0]
 800785a:	e62b      	b.n	80074b4 <_strtod_l+0x4a4>
 800785c:	f04f 32ff 	mov.w	r2, #4294967295
 8007860:	fa02 f303 	lsl.w	r3, r2, r3
 8007864:	ea03 0a0a 	and.w	sl, r3, sl
 8007868:	e6e3      	b.n	8007632 <_strtod_l+0x622>
 800786a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800786e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007872:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007876:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800787a:	fa01 f308 	lsl.w	r3, r1, r8
 800787e:	9308      	str	r3, [sp, #32]
 8007880:	910d      	str	r1, [sp, #52]	; 0x34
 8007882:	e746      	b.n	8007712 <_strtod_l+0x702>
 8007884:	2300      	movs	r3, #0
 8007886:	9308      	str	r3, [sp, #32]
 8007888:	2301      	movs	r3, #1
 800788a:	930d      	str	r3, [sp, #52]	; 0x34
 800788c:	e741      	b.n	8007712 <_strtod_l+0x702>
 800788e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007890:	4642      	mov	r2, r8
 8007892:	4620      	mov	r0, r4
 8007894:	f001 febe 	bl	8009614 <__lshift>
 8007898:	9018      	str	r0, [sp, #96]	; 0x60
 800789a:	2800      	cmp	r0, #0
 800789c:	f47f af6b 	bne.w	8007776 <_strtod_l+0x766>
 80078a0:	e5fe      	b.n	80074a0 <_strtod_l+0x490>
 80078a2:	465f      	mov	r7, fp
 80078a4:	d16e      	bne.n	8007984 <_strtod_l+0x974>
 80078a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078ac:	b342      	cbz	r2, 8007900 <_strtod_l+0x8f0>
 80078ae:	4a32      	ldr	r2, [pc, #200]	; (8007978 <_strtod_l+0x968>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d128      	bne.n	8007906 <_strtod_l+0x8f6>
 80078b4:	9b04      	ldr	r3, [sp, #16]
 80078b6:	4651      	mov	r1, sl
 80078b8:	b1eb      	cbz	r3, 80078f6 <_strtod_l+0x8e6>
 80078ba:	4b2d      	ldr	r3, [pc, #180]	; (8007970 <_strtod_l+0x960>)
 80078bc:	403b      	ands	r3, r7
 80078be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078c2:	f04f 32ff 	mov.w	r2, #4294967295
 80078c6:	d819      	bhi.n	80078fc <_strtod_l+0x8ec>
 80078c8:	0d1b      	lsrs	r3, r3, #20
 80078ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078ce:	fa02 f303 	lsl.w	r3, r2, r3
 80078d2:	4299      	cmp	r1, r3
 80078d4:	d117      	bne.n	8007906 <_strtod_l+0x8f6>
 80078d6:	4b29      	ldr	r3, [pc, #164]	; (800797c <_strtod_l+0x96c>)
 80078d8:	429f      	cmp	r7, r3
 80078da:	d102      	bne.n	80078e2 <_strtod_l+0x8d2>
 80078dc:	3101      	adds	r1, #1
 80078de:	f43f addf 	beq.w	80074a0 <_strtod_l+0x490>
 80078e2:	4b23      	ldr	r3, [pc, #140]	; (8007970 <_strtod_l+0x960>)
 80078e4:	403b      	ands	r3, r7
 80078e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80078ea:	f04f 0a00 	mov.w	sl, #0
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1a4      	bne.n	800783e <_strtod_l+0x82e>
 80078f4:	e5de      	b.n	80074b4 <_strtod_l+0x4a4>
 80078f6:	f04f 33ff 	mov.w	r3, #4294967295
 80078fa:	e7ea      	b.n	80078d2 <_strtod_l+0x8c2>
 80078fc:	4613      	mov	r3, r2
 80078fe:	e7e8      	b.n	80078d2 <_strtod_l+0x8c2>
 8007900:	ea53 030a 	orrs.w	r3, r3, sl
 8007904:	d08c      	beq.n	8007820 <_strtod_l+0x810>
 8007906:	9b08      	ldr	r3, [sp, #32]
 8007908:	b1db      	cbz	r3, 8007942 <_strtod_l+0x932>
 800790a:	423b      	tst	r3, r7
 800790c:	d0ef      	beq.n	80078ee <_strtod_l+0x8de>
 800790e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007910:	9a04      	ldr	r2, [sp, #16]
 8007912:	4650      	mov	r0, sl
 8007914:	4659      	mov	r1, fp
 8007916:	b1c3      	cbz	r3, 800794a <_strtod_l+0x93a>
 8007918:	f7ff fb5e 	bl	8006fd8 <sulp>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	ec51 0b18 	vmov	r0, r1, d8
 8007924:	f7f8 fcca 	bl	80002bc <__adddf3>
 8007928:	4682      	mov	sl, r0
 800792a:	468b      	mov	fp, r1
 800792c:	e7df      	b.n	80078ee <_strtod_l+0x8de>
 800792e:	4013      	ands	r3, r2
 8007930:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007934:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007938:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800793c:	f04f 3aff 	mov.w	sl, #4294967295
 8007940:	e7d5      	b.n	80078ee <_strtod_l+0x8de>
 8007942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007944:	ea13 0f0a 	tst.w	r3, sl
 8007948:	e7e0      	b.n	800790c <_strtod_l+0x8fc>
 800794a:	f7ff fb45 	bl	8006fd8 <sulp>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	ec51 0b18 	vmov	r0, r1, d8
 8007956:	f7f8 fcaf 	bl	80002b8 <__aeabi_dsub>
 800795a:	2200      	movs	r2, #0
 800795c:	2300      	movs	r3, #0
 800795e:	4682      	mov	sl, r0
 8007960:	468b      	mov	fp, r1
 8007962:	f7f9 f8c9 	bl	8000af8 <__aeabi_dcmpeq>
 8007966:	2800      	cmp	r0, #0
 8007968:	d0c1      	beq.n	80078ee <_strtod_l+0x8de>
 800796a:	e611      	b.n	8007590 <_strtod_l+0x580>
 800796c:	fffffc02 	.word	0xfffffc02
 8007970:	7ff00000 	.word	0x7ff00000
 8007974:	39500000 	.word	0x39500000
 8007978:	000fffff 	.word	0x000fffff
 800797c:	7fefffff 	.word	0x7fefffff
 8007980:	0800b9e0 	.word	0x0800b9e0
 8007984:	4631      	mov	r1, r6
 8007986:	4628      	mov	r0, r5
 8007988:	f002 f832 	bl	80099f0 <__ratio>
 800798c:	ec59 8b10 	vmov	r8, r9, d0
 8007990:	ee10 0a10 	vmov	r0, s0
 8007994:	2200      	movs	r2, #0
 8007996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800799a:	4649      	mov	r1, r9
 800799c:	f7f9 f8c0 	bl	8000b20 <__aeabi_dcmple>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d07a      	beq.n	8007a9a <_strtod_l+0xa8a>
 80079a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d04a      	beq.n	8007a40 <_strtod_l+0xa30>
 80079aa:	4b95      	ldr	r3, [pc, #596]	; (8007c00 <_strtod_l+0xbf0>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007c00 <_strtod_l+0xbf0>
 80079b6:	f04f 0800 	mov.w	r8, #0
 80079ba:	4b92      	ldr	r3, [pc, #584]	; (8007c04 <_strtod_l+0xbf4>)
 80079bc:	403b      	ands	r3, r7
 80079be:	930d      	str	r3, [sp, #52]	; 0x34
 80079c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079c2:	4b91      	ldr	r3, [pc, #580]	; (8007c08 <_strtod_l+0xbf8>)
 80079c4:	429a      	cmp	r2, r3
 80079c6:	f040 80b0 	bne.w	8007b2a <_strtod_l+0xb1a>
 80079ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80079d2:	ec4b ab10 	vmov	d0, sl, fp
 80079d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079da:	f001 ff31 	bl	8009840 <__ulp>
 80079de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079e2:	ec53 2b10 	vmov	r2, r3, d0
 80079e6:	f7f8 fe1f 	bl	8000628 <__aeabi_dmul>
 80079ea:	4652      	mov	r2, sl
 80079ec:	465b      	mov	r3, fp
 80079ee:	f7f8 fc65 	bl	80002bc <__adddf3>
 80079f2:	460b      	mov	r3, r1
 80079f4:	4983      	ldr	r1, [pc, #524]	; (8007c04 <_strtod_l+0xbf4>)
 80079f6:	4a85      	ldr	r2, [pc, #532]	; (8007c0c <_strtod_l+0xbfc>)
 80079f8:	4019      	ands	r1, r3
 80079fa:	4291      	cmp	r1, r2
 80079fc:	4682      	mov	sl, r0
 80079fe:	d960      	bls.n	8007ac2 <_strtod_l+0xab2>
 8007a00:	ee18 3a90 	vmov	r3, s17
 8007a04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d104      	bne.n	8007a16 <_strtod_l+0xa06>
 8007a0c:	ee18 3a10 	vmov	r3, s16
 8007a10:	3301      	adds	r3, #1
 8007a12:	f43f ad45 	beq.w	80074a0 <_strtod_l+0x490>
 8007a16:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007c18 <_strtod_l+0xc08>
 8007a1a:	f04f 3aff 	mov.w	sl, #4294967295
 8007a1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a20:	4620      	mov	r0, r4
 8007a22:	f001 fbdb 	bl	80091dc <_Bfree>
 8007a26:	9905      	ldr	r1, [sp, #20]
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f001 fbd7 	bl	80091dc <_Bfree>
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4620      	mov	r0, r4
 8007a32:	f001 fbd3 	bl	80091dc <_Bfree>
 8007a36:	4629      	mov	r1, r5
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f001 fbcf 	bl	80091dc <_Bfree>
 8007a3e:	e61a      	b.n	8007676 <_strtod_l+0x666>
 8007a40:	f1ba 0f00 	cmp.w	sl, #0
 8007a44:	d11b      	bne.n	8007a7e <_strtod_l+0xa6e>
 8007a46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a4a:	b9f3      	cbnz	r3, 8007a8a <_strtod_l+0xa7a>
 8007a4c:	4b6c      	ldr	r3, [pc, #432]	; (8007c00 <_strtod_l+0xbf0>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4640      	mov	r0, r8
 8007a52:	4649      	mov	r1, r9
 8007a54:	f7f9 f85a 	bl	8000b0c <__aeabi_dcmplt>
 8007a58:	b9d0      	cbnz	r0, 8007a90 <_strtod_l+0xa80>
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	4b6c      	ldr	r3, [pc, #432]	; (8007c10 <_strtod_l+0xc00>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	f7f8 fde1 	bl	8000628 <__aeabi_dmul>
 8007a66:	4680      	mov	r8, r0
 8007a68:	4689      	mov	r9, r1
 8007a6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007a72:	9315      	str	r3, [sp, #84]	; 0x54
 8007a74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a7c:	e79d      	b.n	80079ba <_strtod_l+0x9aa>
 8007a7e:	f1ba 0f01 	cmp.w	sl, #1
 8007a82:	d102      	bne.n	8007a8a <_strtod_l+0xa7a>
 8007a84:	2f00      	cmp	r7, #0
 8007a86:	f43f ad83 	beq.w	8007590 <_strtod_l+0x580>
 8007a8a:	4b62      	ldr	r3, [pc, #392]	; (8007c14 <_strtod_l+0xc04>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	e78e      	b.n	80079ae <_strtod_l+0x99e>
 8007a90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007c10 <_strtod_l+0xc00>
 8007a94:	f04f 0800 	mov.w	r8, #0
 8007a98:	e7e7      	b.n	8007a6a <_strtod_l+0xa5a>
 8007a9a:	4b5d      	ldr	r3, [pc, #372]	; (8007c10 <_strtod_l+0xc00>)
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f7f8 fdc1 	bl	8000628 <__aeabi_dmul>
 8007aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	4689      	mov	r9, r1
 8007aac:	b933      	cbnz	r3, 8007abc <_strtod_l+0xaac>
 8007aae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ab2:	900e      	str	r0, [sp, #56]	; 0x38
 8007ab4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ab6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007aba:	e7dd      	b.n	8007a78 <_strtod_l+0xa68>
 8007abc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ac0:	e7f9      	b.n	8007ab6 <_strtod_l+0xaa6>
 8007ac2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1a8      	bne.n	8007a1e <_strtod_l+0xa0e>
 8007acc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ad2:	0d1b      	lsrs	r3, r3, #20
 8007ad4:	051b      	lsls	r3, r3, #20
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d1a1      	bne.n	8007a1e <_strtod_l+0xa0e>
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	f7f9 f903 	bl	8000ce8 <__aeabi_d2lz>
 8007ae2:	f7f8 fd73 	bl	80005cc <__aeabi_l2d>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4640      	mov	r0, r8
 8007aec:	4649      	mov	r1, r9
 8007aee:	f7f8 fbe3 	bl	80002b8 <__aeabi_dsub>
 8007af2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007af8:	ea43 030a 	orr.w	r3, r3, sl
 8007afc:	4313      	orrs	r3, r2
 8007afe:	4680      	mov	r8, r0
 8007b00:	4689      	mov	r9, r1
 8007b02:	d055      	beq.n	8007bb0 <_strtod_l+0xba0>
 8007b04:	a336      	add	r3, pc, #216	; (adr r3, 8007be0 <_strtod_l+0xbd0>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	f7f8 ffff 	bl	8000b0c <__aeabi_dcmplt>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	f47f acd0 	bne.w	80074b4 <_strtod_l+0x4a4>
 8007b14:	a334      	add	r3, pc, #208	; (adr r3, 8007be8 <_strtod_l+0xbd8>)
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	f7f9 f813 	bl	8000b48 <__aeabi_dcmpgt>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	f43f af7b 	beq.w	8007a1e <_strtod_l+0xa0e>
 8007b28:	e4c4      	b.n	80074b4 <_strtod_l+0x4a4>
 8007b2a:	9b04      	ldr	r3, [sp, #16]
 8007b2c:	b333      	cbz	r3, 8007b7c <_strtod_l+0xb6c>
 8007b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b30:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b34:	d822      	bhi.n	8007b7c <_strtod_l+0xb6c>
 8007b36:	a32e      	add	r3, pc, #184	; (adr r3, 8007bf0 <_strtod_l+0xbe0>)
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	4649      	mov	r1, r9
 8007b40:	f7f8 ffee 	bl	8000b20 <__aeabi_dcmple>
 8007b44:	b1a0      	cbz	r0, 8007b70 <_strtod_l+0xb60>
 8007b46:	4649      	mov	r1, r9
 8007b48:	4640      	mov	r0, r8
 8007b4a:	f7f9 f845 	bl	8000bd8 <__aeabi_d2uiz>
 8007b4e:	2801      	cmp	r0, #1
 8007b50:	bf38      	it	cc
 8007b52:	2001      	movcc	r0, #1
 8007b54:	f7f8 fcee 	bl	8000534 <__aeabi_ui2d>
 8007b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	4689      	mov	r9, r1
 8007b5e:	bb23      	cbnz	r3, 8007baa <_strtod_l+0xb9a>
 8007b60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b64:	9010      	str	r0, [sp, #64]	; 0x40
 8007b66:	9311      	str	r3, [sp, #68]	; 0x44
 8007b68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b74:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b78:	1a9b      	subs	r3, r3, r2
 8007b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b80:	eeb0 0a48 	vmov.f32	s0, s16
 8007b84:	eef0 0a68 	vmov.f32	s1, s17
 8007b88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b8c:	f001 fe58 	bl	8009840 <__ulp>
 8007b90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b94:	ec53 2b10 	vmov	r2, r3, d0
 8007b98:	f7f8 fd46 	bl	8000628 <__aeabi_dmul>
 8007b9c:	ec53 2b18 	vmov	r2, r3, d8
 8007ba0:	f7f8 fb8c 	bl	80002bc <__adddf3>
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	468b      	mov	fp, r1
 8007ba8:	e78d      	b.n	8007ac6 <_strtod_l+0xab6>
 8007baa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007bae:	e7db      	b.n	8007b68 <_strtod_l+0xb58>
 8007bb0:	a311      	add	r3, pc, #68	; (adr r3, 8007bf8 <_strtod_l+0xbe8>)
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f7f8 ffa9 	bl	8000b0c <__aeabi_dcmplt>
 8007bba:	e7b2      	b.n	8007b22 <_strtod_l+0xb12>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8007bc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	f7ff ba6b 	b.w	80070a0 <_strtod_l+0x90>
 8007bca:	2a65      	cmp	r2, #101	; 0x65
 8007bcc:	f43f ab5f 	beq.w	800728e <_strtod_l+0x27e>
 8007bd0:	2a45      	cmp	r2, #69	; 0x45
 8007bd2:	f43f ab5c 	beq.w	800728e <_strtod_l+0x27e>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f7ff bb94 	b.w	8007304 <_strtod_l+0x2f4>
 8007bdc:	f3af 8000 	nop.w
 8007be0:	94a03595 	.word	0x94a03595
 8007be4:	3fdfffff 	.word	0x3fdfffff
 8007be8:	35afe535 	.word	0x35afe535
 8007bec:	3fe00000 	.word	0x3fe00000
 8007bf0:	ffc00000 	.word	0xffc00000
 8007bf4:	41dfffff 	.word	0x41dfffff
 8007bf8:	94a03595 	.word	0x94a03595
 8007bfc:	3fcfffff 	.word	0x3fcfffff
 8007c00:	3ff00000 	.word	0x3ff00000
 8007c04:	7ff00000 	.word	0x7ff00000
 8007c08:	7fe00000 	.word	0x7fe00000
 8007c0c:	7c9fffff 	.word	0x7c9fffff
 8007c10:	3fe00000 	.word	0x3fe00000
 8007c14:	bff00000 	.word	0xbff00000
 8007c18:	7fefffff 	.word	0x7fefffff

08007c1c <_strtod_r>:
 8007c1c:	4b01      	ldr	r3, [pc, #4]	; (8007c24 <_strtod_r+0x8>)
 8007c1e:	f7ff b9f7 	b.w	8007010 <_strtod_l>
 8007c22:	bf00      	nop
 8007c24:	20000098 	.word	0x20000098

08007c28 <_strtol_l.constprop.0>:
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2e:	d001      	beq.n	8007c34 <_strtol_l.constprop.0+0xc>
 8007c30:	2b24      	cmp	r3, #36	; 0x24
 8007c32:	d906      	bls.n	8007c42 <_strtol_l.constprop.0+0x1a>
 8007c34:	f7fe fafe 	bl	8006234 <__errno>
 8007c38:	2316      	movs	r3, #22
 8007c3a:	6003      	str	r3, [r0, #0]
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007d28 <_strtol_l.constprop.0+0x100>
 8007c46:	460d      	mov	r5, r1
 8007c48:	462e      	mov	r6, r5
 8007c4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007c52:	f017 0708 	ands.w	r7, r7, #8
 8007c56:	d1f7      	bne.n	8007c48 <_strtol_l.constprop.0+0x20>
 8007c58:	2c2d      	cmp	r4, #45	; 0x2d
 8007c5a:	d132      	bne.n	8007cc2 <_strtol_l.constprop.0+0x9a>
 8007c5c:	782c      	ldrb	r4, [r5, #0]
 8007c5e:	2701      	movs	r7, #1
 8007c60:	1cb5      	adds	r5, r6, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d05b      	beq.n	8007d1e <_strtol_l.constprop.0+0xf6>
 8007c66:	2b10      	cmp	r3, #16
 8007c68:	d109      	bne.n	8007c7e <_strtol_l.constprop.0+0x56>
 8007c6a:	2c30      	cmp	r4, #48	; 0x30
 8007c6c:	d107      	bne.n	8007c7e <_strtol_l.constprop.0+0x56>
 8007c6e:	782c      	ldrb	r4, [r5, #0]
 8007c70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c74:	2c58      	cmp	r4, #88	; 0x58
 8007c76:	d14d      	bne.n	8007d14 <_strtol_l.constprop.0+0xec>
 8007c78:	786c      	ldrb	r4, [r5, #1]
 8007c7a:	2310      	movs	r3, #16
 8007c7c:	3502      	adds	r5, #2
 8007c7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007c82:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c86:	f04f 0c00 	mov.w	ip, #0
 8007c8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007c8e:	4666      	mov	r6, ip
 8007c90:	fb03 8a19 	mls	sl, r3, r9, r8
 8007c94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007c98:	f1be 0f09 	cmp.w	lr, #9
 8007c9c:	d816      	bhi.n	8007ccc <_strtol_l.constprop.0+0xa4>
 8007c9e:	4674      	mov	r4, lr
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	dd24      	ble.n	8007cee <_strtol_l.constprop.0+0xc6>
 8007ca4:	f1bc 0f00 	cmp.w	ip, #0
 8007ca8:	db1e      	blt.n	8007ce8 <_strtol_l.constprop.0+0xc0>
 8007caa:	45b1      	cmp	r9, r6
 8007cac:	d31c      	bcc.n	8007ce8 <_strtol_l.constprop.0+0xc0>
 8007cae:	d101      	bne.n	8007cb4 <_strtol_l.constprop.0+0x8c>
 8007cb0:	45a2      	cmp	sl, r4
 8007cb2:	db19      	blt.n	8007ce8 <_strtol_l.constprop.0+0xc0>
 8007cb4:	fb06 4603 	mla	r6, r6, r3, r4
 8007cb8:	f04f 0c01 	mov.w	ip, #1
 8007cbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cc0:	e7e8      	b.n	8007c94 <_strtol_l.constprop.0+0x6c>
 8007cc2:	2c2b      	cmp	r4, #43	; 0x2b
 8007cc4:	bf04      	itt	eq
 8007cc6:	782c      	ldrbeq	r4, [r5, #0]
 8007cc8:	1cb5      	addeq	r5, r6, #2
 8007cca:	e7ca      	b.n	8007c62 <_strtol_l.constprop.0+0x3a>
 8007ccc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007cd0:	f1be 0f19 	cmp.w	lr, #25
 8007cd4:	d801      	bhi.n	8007cda <_strtol_l.constprop.0+0xb2>
 8007cd6:	3c37      	subs	r4, #55	; 0x37
 8007cd8:	e7e2      	b.n	8007ca0 <_strtol_l.constprop.0+0x78>
 8007cda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007cde:	f1be 0f19 	cmp.w	lr, #25
 8007ce2:	d804      	bhi.n	8007cee <_strtol_l.constprop.0+0xc6>
 8007ce4:	3c57      	subs	r4, #87	; 0x57
 8007ce6:	e7db      	b.n	8007ca0 <_strtol_l.constprop.0+0x78>
 8007ce8:	f04f 3cff 	mov.w	ip, #4294967295
 8007cec:	e7e6      	b.n	8007cbc <_strtol_l.constprop.0+0x94>
 8007cee:	f1bc 0f00 	cmp.w	ip, #0
 8007cf2:	da05      	bge.n	8007d00 <_strtol_l.constprop.0+0xd8>
 8007cf4:	2322      	movs	r3, #34	; 0x22
 8007cf6:	6003      	str	r3, [r0, #0]
 8007cf8:	4646      	mov	r6, r8
 8007cfa:	b942      	cbnz	r2, 8007d0e <_strtol_l.constprop.0+0xe6>
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	e79e      	b.n	8007c3e <_strtol_l.constprop.0+0x16>
 8007d00:	b107      	cbz	r7, 8007d04 <_strtol_l.constprop.0+0xdc>
 8007d02:	4276      	negs	r6, r6
 8007d04:	2a00      	cmp	r2, #0
 8007d06:	d0f9      	beq.n	8007cfc <_strtol_l.constprop.0+0xd4>
 8007d08:	f1bc 0f00 	cmp.w	ip, #0
 8007d0c:	d000      	beq.n	8007d10 <_strtol_l.constprop.0+0xe8>
 8007d0e:	1e69      	subs	r1, r5, #1
 8007d10:	6011      	str	r1, [r2, #0]
 8007d12:	e7f3      	b.n	8007cfc <_strtol_l.constprop.0+0xd4>
 8007d14:	2430      	movs	r4, #48	; 0x30
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1b1      	bne.n	8007c7e <_strtol_l.constprop.0+0x56>
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	e7af      	b.n	8007c7e <_strtol_l.constprop.0+0x56>
 8007d1e:	2c30      	cmp	r4, #48	; 0x30
 8007d20:	d0a5      	beq.n	8007c6e <_strtol_l.constprop.0+0x46>
 8007d22:	230a      	movs	r3, #10
 8007d24:	e7ab      	b.n	8007c7e <_strtol_l.constprop.0+0x56>
 8007d26:	bf00      	nop
 8007d28:	0800ba09 	.word	0x0800ba09

08007d2c <_strtol_r>:
 8007d2c:	f7ff bf7c 	b.w	8007c28 <_strtol_l.constprop.0>

08007d30 <quorem>:
 8007d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	6903      	ldr	r3, [r0, #16]
 8007d36:	690c      	ldr	r4, [r1, #16]
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	4607      	mov	r7, r0
 8007d3c:	f2c0 8081 	blt.w	8007e42 <quorem+0x112>
 8007d40:	3c01      	subs	r4, #1
 8007d42:	f101 0814 	add.w	r8, r1, #20
 8007d46:	f100 0514 	add.w	r5, r0, #20
 8007d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d68:	d331      	bcc.n	8007dce <quorem+0x9e>
 8007d6a:	f04f 0e00 	mov.w	lr, #0
 8007d6e:	4640      	mov	r0, r8
 8007d70:	46ac      	mov	ip, r5
 8007d72:	46f2      	mov	sl, lr
 8007d74:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d78:	b293      	uxth	r3, r2
 8007d7a:	fb06 e303 	mla	r3, r6, r3, lr
 8007d7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ebaa 0303 	sub.w	r3, sl, r3
 8007d88:	f8dc a000 	ldr.w	sl, [ip]
 8007d8c:	0c12      	lsrs	r2, r2, #16
 8007d8e:	fa13 f38a 	uxtah	r3, r3, sl
 8007d92:	fb06 e202 	mla	r2, r6, r2, lr
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	9b00      	ldr	r3, [sp, #0]
 8007d9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d9e:	b292      	uxth	r2, r2
 8007da0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007da4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007da8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007dac:	4581      	cmp	r9, r0
 8007dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007db2:	f84c 3b04 	str.w	r3, [ip], #4
 8007db6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dba:	d2db      	bcs.n	8007d74 <quorem+0x44>
 8007dbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007dc0:	b92b      	cbnz	r3, 8007dce <quorem+0x9e>
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	429d      	cmp	r5, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	d32e      	bcc.n	8007e2a <quorem+0xfa>
 8007dcc:	613c      	str	r4, [r7, #16]
 8007dce:	4638      	mov	r0, r7
 8007dd0:	f001 fc90 	bl	80096f4 <__mcmp>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	db24      	blt.n	8007e22 <quorem+0xf2>
 8007dd8:	3601      	adds	r6, #1
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f04f 0c00 	mov.w	ip, #0
 8007de0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007de4:	f8d0 e000 	ldr.w	lr, [r0]
 8007de8:	b293      	uxth	r3, r2
 8007dea:	ebac 0303 	sub.w	r3, ip, r3
 8007dee:	0c12      	lsrs	r2, r2, #16
 8007df0:	fa13 f38e 	uxtah	r3, r3, lr
 8007df4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007df8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e02:	45c1      	cmp	r9, r8
 8007e04:	f840 3b04 	str.w	r3, [r0], #4
 8007e08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e0c:	d2e8      	bcs.n	8007de0 <quorem+0xb0>
 8007e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e16:	b922      	cbnz	r2, 8007e22 <quorem+0xf2>
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	429d      	cmp	r5, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	d30a      	bcc.n	8007e36 <quorem+0x106>
 8007e20:	613c      	str	r4, [r7, #16]
 8007e22:	4630      	mov	r0, r6
 8007e24:	b003      	add	sp, #12
 8007e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2a:	6812      	ldr	r2, [r2, #0]
 8007e2c:	3b04      	subs	r3, #4
 8007e2e:	2a00      	cmp	r2, #0
 8007e30:	d1cc      	bne.n	8007dcc <quorem+0x9c>
 8007e32:	3c01      	subs	r4, #1
 8007e34:	e7c7      	b.n	8007dc6 <quorem+0x96>
 8007e36:	6812      	ldr	r2, [r2, #0]
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	2a00      	cmp	r2, #0
 8007e3c:	d1f0      	bne.n	8007e20 <quorem+0xf0>
 8007e3e:	3c01      	subs	r4, #1
 8007e40:	e7eb      	b.n	8007e1a <quorem+0xea>
 8007e42:	2000      	movs	r0, #0
 8007e44:	e7ee      	b.n	8007e24 <quorem+0xf4>
	...

08007e48 <_dtoa_r>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	ed2d 8b04 	vpush	{d8-d9}
 8007e50:	ec57 6b10 	vmov	r6, r7, d0
 8007e54:	b093      	sub	sp, #76	; 0x4c
 8007e56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e5c:	9106      	str	r1, [sp, #24]
 8007e5e:	ee10 aa10 	vmov	sl, s0
 8007e62:	4604      	mov	r4, r0
 8007e64:	9209      	str	r2, [sp, #36]	; 0x24
 8007e66:	930c      	str	r3, [sp, #48]	; 0x30
 8007e68:	46bb      	mov	fp, r7
 8007e6a:	b975      	cbnz	r5, 8007e8a <_dtoa_r+0x42>
 8007e6c:	2010      	movs	r0, #16
 8007e6e:	f001 f94d 	bl	800910c <malloc>
 8007e72:	4602      	mov	r2, r0
 8007e74:	6260      	str	r0, [r4, #36]	; 0x24
 8007e76:	b920      	cbnz	r0, 8007e82 <_dtoa_r+0x3a>
 8007e78:	4ba7      	ldr	r3, [pc, #668]	; (8008118 <_dtoa_r+0x2d0>)
 8007e7a:	21ea      	movs	r1, #234	; 0xea
 8007e7c:	48a7      	ldr	r0, [pc, #668]	; (800811c <_dtoa_r+0x2d4>)
 8007e7e:	f002 f8bd 	bl	8009ffc <__assert_func>
 8007e82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e86:	6005      	str	r5, [r0, #0]
 8007e88:	60c5      	str	r5, [r0, #12]
 8007e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e8c:	6819      	ldr	r1, [r3, #0]
 8007e8e:	b151      	cbz	r1, 8007ea6 <_dtoa_r+0x5e>
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	604a      	str	r2, [r1, #4]
 8007e94:	2301      	movs	r3, #1
 8007e96:	4093      	lsls	r3, r2
 8007e98:	608b      	str	r3, [r1, #8]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f001 f99e 	bl	80091dc <_Bfree>
 8007ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	1e3b      	subs	r3, r7, #0
 8007ea8:	bfaa      	itet	ge
 8007eaa:	2300      	movge	r3, #0
 8007eac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007eb0:	f8c8 3000 	strge.w	r3, [r8]
 8007eb4:	4b9a      	ldr	r3, [pc, #616]	; (8008120 <_dtoa_r+0x2d8>)
 8007eb6:	bfbc      	itt	lt
 8007eb8:	2201      	movlt	r2, #1
 8007eba:	f8c8 2000 	strlt.w	r2, [r8]
 8007ebe:	ea33 030b 	bics.w	r3, r3, fp
 8007ec2:	d11b      	bne.n	8007efc <_dtoa_r+0xb4>
 8007ec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ec6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ed0:	4333      	orrs	r3, r6
 8007ed2:	f000 8592 	beq.w	80089fa <_dtoa_r+0xbb2>
 8007ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed8:	b963      	cbnz	r3, 8007ef4 <_dtoa_r+0xac>
 8007eda:	4b92      	ldr	r3, [pc, #584]	; (8008124 <_dtoa_r+0x2dc>)
 8007edc:	e022      	b.n	8007f24 <_dtoa_r+0xdc>
 8007ede:	4b92      	ldr	r3, [pc, #584]	; (8008128 <_dtoa_r+0x2e0>)
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	9801      	ldr	r0, [sp, #4]
 8007eea:	b013      	add	sp, #76	; 0x4c
 8007eec:	ecbd 8b04 	vpop	{d8-d9}
 8007ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef4:	4b8b      	ldr	r3, [pc, #556]	; (8008124 <_dtoa_r+0x2dc>)
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	3303      	adds	r3, #3
 8007efa:	e7f3      	b.n	8007ee4 <_dtoa_r+0x9c>
 8007efc:	2200      	movs	r2, #0
 8007efe:	2300      	movs	r3, #0
 8007f00:	4650      	mov	r0, sl
 8007f02:	4659      	mov	r1, fp
 8007f04:	f7f8 fdf8 	bl	8000af8 <__aeabi_dcmpeq>
 8007f08:	ec4b ab19 	vmov	d9, sl, fp
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	b158      	cbz	r0, 8007f28 <_dtoa_r+0xe0>
 8007f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f12:	2301      	movs	r3, #1
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 856b 	beq.w	80089f4 <_dtoa_r+0xbac>
 8007f1e:	4883      	ldr	r0, [pc, #524]	; (800812c <_dtoa_r+0x2e4>)
 8007f20:	6018      	str	r0, [r3, #0]
 8007f22:	1e43      	subs	r3, r0, #1
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	e7df      	b.n	8007ee8 <_dtoa_r+0xa0>
 8007f28:	ec4b ab10 	vmov	d0, sl, fp
 8007f2c:	aa10      	add	r2, sp, #64	; 0x40
 8007f2e:	a911      	add	r1, sp, #68	; 0x44
 8007f30:	4620      	mov	r0, r4
 8007f32:	f001 fd01 	bl	8009938 <__d2b>
 8007f36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f3a:	ee08 0a10 	vmov	s16, r0
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	f000 8084 	beq.w	800804c <_dtoa_r+0x204>
 8007f44:	ee19 3a90 	vmov	r3, s19
 8007f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f50:	4656      	mov	r6, sl
 8007f52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f5e:	4b74      	ldr	r3, [pc, #464]	; (8008130 <_dtoa_r+0x2e8>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	4630      	mov	r0, r6
 8007f64:	4639      	mov	r1, r7
 8007f66:	f7f8 f9a7 	bl	80002b8 <__aeabi_dsub>
 8007f6a:	a365      	add	r3, pc, #404	; (adr r3, 8008100 <_dtoa_r+0x2b8>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 fb5a 	bl	8000628 <__aeabi_dmul>
 8007f74:	a364      	add	r3, pc, #400	; (adr r3, 8008108 <_dtoa_r+0x2c0>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f7f8 f99f 	bl	80002bc <__adddf3>
 8007f7e:	4606      	mov	r6, r0
 8007f80:	4628      	mov	r0, r5
 8007f82:	460f      	mov	r7, r1
 8007f84:	f7f8 fae6 	bl	8000554 <__aeabi_i2d>
 8007f88:	a361      	add	r3, pc, #388	; (adr r3, 8008110 <_dtoa_r+0x2c8>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 fb4b 	bl	8000628 <__aeabi_dmul>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4630      	mov	r0, r6
 8007f98:	4639      	mov	r1, r7
 8007f9a:	f7f8 f98f 	bl	80002bc <__adddf3>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	f7f8 fdf1 	bl	8000b88 <__aeabi_d2iz>
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	9000      	str	r0, [sp, #0]
 8007faa:	2300      	movs	r3, #0
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 fdac 	bl	8000b0c <__aeabi_dcmplt>
 8007fb4:	b150      	cbz	r0, 8007fcc <_dtoa_r+0x184>
 8007fb6:	9800      	ldr	r0, [sp, #0]
 8007fb8:	f7f8 facc 	bl	8000554 <__aeabi_i2d>
 8007fbc:	4632      	mov	r2, r6
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	f7f8 fd9a 	bl	8000af8 <__aeabi_dcmpeq>
 8007fc4:	b910      	cbnz	r0, 8007fcc <_dtoa_r+0x184>
 8007fc6:	9b00      	ldr	r3, [sp, #0]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	9b00      	ldr	r3, [sp, #0]
 8007fce:	2b16      	cmp	r3, #22
 8007fd0:	d85a      	bhi.n	8008088 <_dtoa_r+0x240>
 8007fd2:	9a00      	ldr	r2, [sp, #0]
 8007fd4:	4b57      	ldr	r3, [pc, #348]	; (8008134 <_dtoa_r+0x2ec>)
 8007fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	ec51 0b19 	vmov	r0, r1, d9
 8007fe2:	f7f8 fd93 	bl	8000b0c <__aeabi_dcmplt>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d050      	beq.n	800808c <_dtoa_r+0x244>
 8007fea:	9b00      	ldr	r3, [sp, #0]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ff6:	1b5d      	subs	r5, r3, r5
 8007ff8:	1e6b      	subs	r3, r5, #1
 8007ffa:	9305      	str	r3, [sp, #20]
 8007ffc:	bf45      	ittet	mi
 8007ffe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008002:	9304      	strmi	r3, [sp, #16]
 8008004:	2300      	movpl	r3, #0
 8008006:	2300      	movmi	r3, #0
 8008008:	bf4c      	ite	mi
 800800a:	9305      	strmi	r3, [sp, #20]
 800800c:	9304      	strpl	r3, [sp, #16]
 800800e:	9b00      	ldr	r3, [sp, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	db3d      	blt.n	8008090 <_dtoa_r+0x248>
 8008014:	9b05      	ldr	r3, [sp, #20]
 8008016:	9a00      	ldr	r2, [sp, #0]
 8008018:	920a      	str	r2, [sp, #40]	; 0x28
 800801a:	4413      	add	r3, r2
 800801c:	9305      	str	r3, [sp, #20]
 800801e:	2300      	movs	r3, #0
 8008020:	9307      	str	r3, [sp, #28]
 8008022:	9b06      	ldr	r3, [sp, #24]
 8008024:	2b09      	cmp	r3, #9
 8008026:	f200 8089 	bhi.w	800813c <_dtoa_r+0x2f4>
 800802a:	2b05      	cmp	r3, #5
 800802c:	bfc4      	itt	gt
 800802e:	3b04      	subgt	r3, #4
 8008030:	9306      	strgt	r3, [sp, #24]
 8008032:	9b06      	ldr	r3, [sp, #24]
 8008034:	f1a3 0302 	sub.w	r3, r3, #2
 8008038:	bfcc      	ite	gt
 800803a:	2500      	movgt	r5, #0
 800803c:	2501      	movle	r5, #1
 800803e:	2b03      	cmp	r3, #3
 8008040:	f200 8087 	bhi.w	8008152 <_dtoa_r+0x30a>
 8008044:	e8df f003 	tbb	[pc, r3]
 8008048:	59383a2d 	.word	0x59383a2d
 800804c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008050:	441d      	add	r5, r3
 8008052:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008056:	2b20      	cmp	r3, #32
 8008058:	bfc1      	itttt	gt
 800805a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800805e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008062:	fa0b f303 	lslgt.w	r3, fp, r3
 8008066:	fa26 f000 	lsrgt.w	r0, r6, r0
 800806a:	bfda      	itte	le
 800806c:	f1c3 0320 	rsble	r3, r3, #32
 8008070:	fa06 f003 	lslle.w	r0, r6, r3
 8008074:	4318      	orrgt	r0, r3
 8008076:	f7f8 fa5d 	bl	8000534 <__aeabi_ui2d>
 800807a:	2301      	movs	r3, #1
 800807c:	4606      	mov	r6, r0
 800807e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008082:	3d01      	subs	r5, #1
 8008084:	930e      	str	r3, [sp, #56]	; 0x38
 8008086:	e76a      	b.n	8007f5e <_dtoa_r+0x116>
 8008088:	2301      	movs	r3, #1
 800808a:	e7b2      	b.n	8007ff2 <_dtoa_r+0x1aa>
 800808c:	900b      	str	r0, [sp, #44]	; 0x2c
 800808e:	e7b1      	b.n	8007ff4 <_dtoa_r+0x1ac>
 8008090:	9b04      	ldr	r3, [sp, #16]
 8008092:	9a00      	ldr	r2, [sp, #0]
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	9304      	str	r3, [sp, #16]
 8008098:	4253      	negs	r3, r2
 800809a:	9307      	str	r3, [sp, #28]
 800809c:	2300      	movs	r3, #0
 800809e:	930a      	str	r3, [sp, #40]	; 0x28
 80080a0:	e7bf      	b.n	8008022 <_dtoa_r+0x1da>
 80080a2:	2300      	movs	r3, #0
 80080a4:	9308      	str	r3, [sp, #32]
 80080a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	dc55      	bgt.n	8008158 <_dtoa_r+0x310>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080b2:	461a      	mov	r2, r3
 80080b4:	9209      	str	r2, [sp, #36]	; 0x24
 80080b6:	e00c      	b.n	80080d2 <_dtoa_r+0x28a>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e7f3      	b.n	80080a4 <_dtoa_r+0x25c>
 80080bc:	2300      	movs	r3, #0
 80080be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080c0:	9308      	str	r3, [sp, #32]
 80080c2:	9b00      	ldr	r3, [sp, #0]
 80080c4:	4413      	add	r3, r2
 80080c6:	9302      	str	r3, [sp, #8]
 80080c8:	3301      	adds	r3, #1
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	9303      	str	r3, [sp, #12]
 80080ce:	bfb8      	it	lt
 80080d0:	2301      	movlt	r3, #1
 80080d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80080d4:	2200      	movs	r2, #0
 80080d6:	6042      	str	r2, [r0, #4]
 80080d8:	2204      	movs	r2, #4
 80080da:	f102 0614 	add.w	r6, r2, #20
 80080de:	429e      	cmp	r6, r3
 80080e0:	6841      	ldr	r1, [r0, #4]
 80080e2:	d93d      	bls.n	8008160 <_dtoa_r+0x318>
 80080e4:	4620      	mov	r0, r4
 80080e6:	f001 f839 	bl	800915c <_Balloc>
 80080ea:	9001      	str	r0, [sp, #4]
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d13b      	bne.n	8008168 <_dtoa_r+0x320>
 80080f0:	4b11      	ldr	r3, [pc, #68]	; (8008138 <_dtoa_r+0x2f0>)
 80080f2:	4602      	mov	r2, r0
 80080f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080f8:	e6c0      	b.n	8007e7c <_dtoa_r+0x34>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e7df      	b.n	80080be <_dtoa_r+0x276>
 80080fe:	bf00      	nop
 8008100:	636f4361 	.word	0x636f4361
 8008104:	3fd287a7 	.word	0x3fd287a7
 8008108:	8b60c8b3 	.word	0x8b60c8b3
 800810c:	3fc68a28 	.word	0x3fc68a28
 8008110:	509f79fb 	.word	0x509f79fb
 8008114:	3fd34413 	.word	0x3fd34413
 8008118:	0800bb16 	.word	0x0800bb16
 800811c:	0800bb2d 	.word	0x0800bb2d
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	0800bb12 	.word	0x0800bb12
 8008128:	0800bb09 	.word	0x0800bb09
 800812c:	0800b98d 	.word	0x0800b98d
 8008130:	3ff80000 	.word	0x3ff80000
 8008134:	0800bc98 	.word	0x0800bc98
 8008138:	0800bb88 	.word	0x0800bb88
 800813c:	2501      	movs	r5, #1
 800813e:	2300      	movs	r3, #0
 8008140:	9306      	str	r3, [sp, #24]
 8008142:	9508      	str	r5, [sp, #32]
 8008144:	f04f 33ff 	mov.w	r3, #4294967295
 8008148:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800814c:	2200      	movs	r2, #0
 800814e:	2312      	movs	r3, #18
 8008150:	e7b0      	b.n	80080b4 <_dtoa_r+0x26c>
 8008152:	2301      	movs	r3, #1
 8008154:	9308      	str	r3, [sp, #32]
 8008156:	e7f5      	b.n	8008144 <_dtoa_r+0x2fc>
 8008158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800815e:	e7b8      	b.n	80080d2 <_dtoa_r+0x28a>
 8008160:	3101      	adds	r1, #1
 8008162:	6041      	str	r1, [r0, #4]
 8008164:	0052      	lsls	r2, r2, #1
 8008166:	e7b8      	b.n	80080da <_dtoa_r+0x292>
 8008168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800816a:	9a01      	ldr	r2, [sp, #4]
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	2b0e      	cmp	r3, #14
 8008172:	f200 809d 	bhi.w	80082b0 <_dtoa_r+0x468>
 8008176:	2d00      	cmp	r5, #0
 8008178:	f000 809a 	beq.w	80082b0 <_dtoa_r+0x468>
 800817c:	9b00      	ldr	r3, [sp, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dd32      	ble.n	80081e8 <_dtoa_r+0x3a0>
 8008182:	4ab7      	ldr	r2, [pc, #732]	; (8008460 <_dtoa_r+0x618>)
 8008184:	f003 030f 	and.w	r3, r3, #15
 8008188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800818c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008190:	9b00      	ldr	r3, [sp, #0]
 8008192:	05d8      	lsls	r0, r3, #23
 8008194:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008198:	d516      	bpl.n	80081c8 <_dtoa_r+0x380>
 800819a:	4bb2      	ldr	r3, [pc, #712]	; (8008464 <_dtoa_r+0x61c>)
 800819c:	ec51 0b19 	vmov	r0, r1, d9
 80081a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081a4:	f7f8 fb6a 	bl	800087c <__aeabi_ddiv>
 80081a8:	f007 070f 	and.w	r7, r7, #15
 80081ac:	4682      	mov	sl, r0
 80081ae:	468b      	mov	fp, r1
 80081b0:	2503      	movs	r5, #3
 80081b2:	4eac      	ldr	r6, [pc, #688]	; (8008464 <_dtoa_r+0x61c>)
 80081b4:	b957      	cbnz	r7, 80081cc <_dtoa_r+0x384>
 80081b6:	4642      	mov	r2, r8
 80081b8:	464b      	mov	r3, r9
 80081ba:	4650      	mov	r0, sl
 80081bc:	4659      	mov	r1, fp
 80081be:	f7f8 fb5d 	bl	800087c <__aeabi_ddiv>
 80081c2:	4682      	mov	sl, r0
 80081c4:	468b      	mov	fp, r1
 80081c6:	e028      	b.n	800821a <_dtoa_r+0x3d2>
 80081c8:	2502      	movs	r5, #2
 80081ca:	e7f2      	b.n	80081b2 <_dtoa_r+0x36a>
 80081cc:	07f9      	lsls	r1, r7, #31
 80081ce:	d508      	bpl.n	80081e2 <_dtoa_r+0x39a>
 80081d0:	4640      	mov	r0, r8
 80081d2:	4649      	mov	r1, r9
 80081d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081d8:	f7f8 fa26 	bl	8000628 <__aeabi_dmul>
 80081dc:	3501      	adds	r5, #1
 80081de:	4680      	mov	r8, r0
 80081e0:	4689      	mov	r9, r1
 80081e2:	107f      	asrs	r7, r7, #1
 80081e4:	3608      	adds	r6, #8
 80081e6:	e7e5      	b.n	80081b4 <_dtoa_r+0x36c>
 80081e8:	f000 809b 	beq.w	8008322 <_dtoa_r+0x4da>
 80081ec:	9b00      	ldr	r3, [sp, #0]
 80081ee:	4f9d      	ldr	r7, [pc, #628]	; (8008464 <_dtoa_r+0x61c>)
 80081f0:	425e      	negs	r6, r3
 80081f2:	4b9b      	ldr	r3, [pc, #620]	; (8008460 <_dtoa_r+0x618>)
 80081f4:	f006 020f 	and.w	r2, r6, #15
 80081f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	ec51 0b19 	vmov	r0, r1, d9
 8008204:	f7f8 fa10 	bl	8000628 <__aeabi_dmul>
 8008208:	1136      	asrs	r6, r6, #4
 800820a:	4682      	mov	sl, r0
 800820c:	468b      	mov	fp, r1
 800820e:	2300      	movs	r3, #0
 8008210:	2502      	movs	r5, #2
 8008212:	2e00      	cmp	r6, #0
 8008214:	d17a      	bne.n	800830c <_dtoa_r+0x4c4>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1d3      	bne.n	80081c2 <_dtoa_r+0x37a>
 800821a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8082 	beq.w	8008326 <_dtoa_r+0x4de>
 8008222:	4b91      	ldr	r3, [pc, #580]	; (8008468 <_dtoa_r+0x620>)
 8008224:	2200      	movs	r2, #0
 8008226:	4650      	mov	r0, sl
 8008228:	4659      	mov	r1, fp
 800822a:	f7f8 fc6f 	bl	8000b0c <__aeabi_dcmplt>
 800822e:	2800      	cmp	r0, #0
 8008230:	d079      	beq.n	8008326 <_dtoa_r+0x4de>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d076      	beq.n	8008326 <_dtoa_r+0x4de>
 8008238:	9b02      	ldr	r3, [sp, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	dd36      	ble.n	80082ac <_dtoa_r+0x464>
 800823e:	9b00      	ldr	r3, [sp, #0]
 8008240:	4650      	mov	r0, sl
 8008242:	4659      	mov	r1, fp
 8008244:	1e5f      	subs	r7, r3, #1
 8008246:	2200      	movs	r2, #0
 8008248:	4b88      	ldr	r3, [pc, #544]	; (800846c <_dtoa_r+0x624>)
 800824a:	f7f8 f9ed 	bl	8000628 <__aeabi_dmul>
 800824e:	9e02      	ldr	r6, [sp, #8]
 8008250:	4682      	mov	sl, r0
 8008252:	468b      	mov	fp, r1
 8008254:	3501      	adds	r5, #1
 8008256:	4628      	mov	r0, r5
 8008258:	f7f8 f97c 	bl	8000554 <__aeabi_i2d>
 800825c:	4652      	mov	r2, sl
 800825e:	465b      	mov	r3, fp
 8008260:	f7f8 f9e2 	bl	8000628 <__aeabi_dmul>
 8008264:	4b82      	ldr	r3, [pc, #520]	; (8008470 <_dtoa_r+0x628>)
 8008266:	2200      	movs	r2, #0
 8008268:	f7f8 f828 	bl	80002bc <__adddf3>
 800826c:	46d0      	mov	r8, sl
 800826e:	46d9      	mov	r9, fp
 8008270:	4682      	mov	sl, r0
 8008272:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008276:	2e00      	cmp	r6, #0
 8008278:	d158      	bne.n	800832c <_dtoa_r+0x4e4>
 800827a:	4b7e      	ldr	r3, [pc, #504]	; (8008474 <_dtoa_r+0x62c>)
 800827c:	2200      	movs	r2, #0
 800827e:	4640      	mov	r0, r8
 8008280:	4649      	mov	r1, r9
 8008282:	f7f8 f819 	bl	80002b8 <__aeabi_dsub>
 8008286:	4652      	mov	r2, sl
 8008288:	465b      	mov	r3, fp
 800828a:	4680      	mov	r8, r0
 800828c:	4689      	mov	r9, r1
 800828e:	f7f8 fc5b 	bl	8000b48 <__aeabi_dcmpgt>
 8008292:	2800      	cmp	r0, #0
 8008294:	f040 8295 	bne.w	80087c2 <_dtoa_r+0x97a>
 8008298:	4652      	mov	r2, sl
 800829a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800829e:	4640      	mov	r0, r8
 80082a0:	4649      	mov	r1, r9
 80082a2:	f7f8 fc33 	bl	8000b0c <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f040 8289 	bne.w	80087be <_dtoa_r+0x976>
 80082ac:	ec5b ab19 	vmov	sl, fp, d9
 80082b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f2c0 8148 	blt.w	8008548 <_dtoa_r+0x700>
 80082b8:	9a00      	ldr	r2, [sp, #0]
 80082ba:	2a0e      	cmp	r2, #14
 80082bc:	f300 8144 	bgt.w	8008548 <_dtoa_r+0x700>
 80082c0:	4b67      	ldr	r3, [pc, #412]	; (8008460 <_dtoa_r+0x618>)
 80082c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f280 80d5 	bge.w	800847c <_dtoa_r+0x634>
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f300 80d1 	bgt.w	800847c <_dtoa_r+0x634>
 80082da:	f040 826f 	bne.w	80087bc <_dtoa_r+0x974>
 80082de:	4b65      	ldr	r3, [pc, #404]	; (8008474 <_dtoa_r+0x62c>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	4640      	mov	r0, r8
 80082e4:	4649      	mov	r1, r9
 80082e6:	f7f8 f99f 	bl	8000628 <__aeabi_dmul>
 80082ea:	4652      	mov	r2, sl
 80082ec:	465b      	mov	r3, fp
 80082ee:	f7f8 fc21 	bl	8000b34 <__aeabi_dcmpge>
 80082f2:	9e03      	ldr	r6, [sp, #12]
 80082f4:	4637      	mov	r7, r6
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f040 8245 	bne.w	8008786 <_dtoa_r+0x93e>
 80082fc:	9d01      	ldr	r5, [sp, #4]
 80082fe:	2331      	movs	r3, #49	; 0x31
 8008300:	f805 3b01 	strb.w	r3, [r5], #1
 8008304:	9b00      	ldr	r3, [sp, #0]
 8008306:	3301      	adds	r3, #1
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	e240      	b.n	800878e <_dtoa_r+0x946>
 800830c:	07f2      	lsls	r2, r6, #31
 800830e:	d505      	bpl.n	800831c <_dtoa_r+0x4d4>
 8008310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008314:	f7f8 f988 	bl	8000628 <__aeabi_dmul>
 8008318:	3501      	adds	r5, #1
 800831a:	2301      	movs	r3, #1
 800831c:	1076      	asrs	r6, r6, #1
 800831e:	3708      	adds	r7, #8
 8008320:	e777      	b.n	8008212 <_dtoa_r+0x3ca>
 8008322:	2502      	movs	r5, #2
 8008324:	e779      	b.n	800821a <_dtoa_r+0x3d2>
 8008326:	9f00      	ldr	r7, [sp, #0]
 8008328:	9e03      	ldr	r6, [sp, #12]
 800832a:	e794      	b.n	8008256 <_dtoa_r+0x40e>
 800832c:	9901      	ldr	r1, [sp, #4]
 800832e:	4b4c      	ldr	r3, [pc, #304]	; (8008460 <_dtoa_r+0x618>)
 8008330:	4431      	add	r1, r6
 8008332:	910d      	str	r1, [sp, #52]	; 0x34
 8008334:	9908      	ldr	r1, [sp, #32]
 8008336:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800833a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800833e:	2900      	cmp	r1, #0
 8008340:	d043      	beq.n	80083ca <_dtoa_r+0x582>
 8008342:	494d      	ldr	r1, [pc, #308]	; (8008478 <_dtoa_r+0x630>)
 8008344:	2000      	movs	r0, #0
 8008346:	f7f8 fa99 	bl	800087c <__aeabi_ddiv>
 800834a:	4652      	mov	r2, sl
 800834c:	465b      	mov	r3, fp
 800834e:	f7f7 ffb3 	bl	80002b8 <__aeabi_dsub>
 8008352:	9d01      	ldr	r5, [sp, #4]
 8008354:	4682      	mov	sl, r0
 8008356:	468b      	mov	fp, r1
 8008358:	4649      	mov	r1, r9
 800835a:	4640      	mov	r0, r8
 800835c:	f7f8 fc14 	bl	8000b88 <__aeabi_d2iz>
 8008360:	4606      	mov	r6, r0
 8008362:	f7f8 f8f7 	bl	8000554 <__aeabi_i2d>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4640      	mov	r0, r8
 800836c:	4649      	mov	r1, r9
 800836e:	f7f7 ffa3 	bl	80002b8 <__aeabi_dsub>
 8008372:	3630      	adds	r6, #48	; 0x30
 8008374:	f805 6b01 	strb.w	r6, [r5], #1
 8008378:	4652      	mov	r2, sl
 800837a:	465b      	mov	r3, fp
 800837c:	4680      	mov	r8, r0
 800837e:	4689      	mov	r9, r1
 8008380:	f7f8 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 8008384:	2800      	cmp	r0, #0
 8008386:	d163      	bne.n	8008450 <_dtoa_r+0x608>
 8008388:	4642      	mov	r2, r8
 800838a:	464b      	mov	r3, r9
 800838c:	4936      	ldr	r1, [pc, #216]	; (8008468 <_dtoa_r+0x620>)
 800838e:	2000      	movs	r0, #0
 8008390:	f7f7 ff92 	bl	80002b8 <__aeabi_dsub>
 8008394:	4652      	mov	r2, sl
 8008396:	465b      	mov	r3, fp
 8008398:	f7f8 fbb8 	bl	8000b0c <__aeabi_dcmplt>
 800839c:	2800      	cmp	r0, #0
 800839e:	f040 80b5 	bne.w	800850c <_dtoa_r+0x6c4>
 80083a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083a4:	429d      	cmp	r5, r3
 80083a6:	d081      	beq.n	80082ac <_dtoa_r+0x464>
 80083a8:	4b30      	ldr	r3, [pc, #192]	; (800846c <_dtoa_r+0x624>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	4650      	mov	r0, sl
 80083ae:	4659      	mov	r1, fp
 80083b0:	f7f8 f93a 	bl	8000628 <__aeabi_dmul>
 80083b4:	4b2d      	ldr	r3, [pc, #180]	; (800846c <_dtoa_r+0x624>)
 80083b6:	4682      	mov	sl, r0
 80083b8:	468b      	mov	fp, r1
 80083ba:	4640      	mov	r0, r8
 80083bc:	4649      	mov	r1, r9
 80083be:	2200      	movs	r2, #0
 80083c0:	f7f8 f932 	bl	8000628 <__aeabi_dmul>
 80083c4:	4680      	mov	r8, r0
 80083c6:	4689      	mov	r9, r1
 80083c8:	e7c6      	b.n	8008358 <_dtoa_r+0x510>
 80083ca:	4650      	mov	r0, sl
 80083cc:	4659      	mov	r1, fp
 80083ce:	f7f8 f92b 	bl	8000628 <__aeabi_dmul>
 80083d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083d4:	9d01      	ldr	r5, [sp, #4]
 80083d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80083d8:	4682      	mov	sl, r0
 80083da:	468b      	mov	fp, r1
 80083dc:	4649      	mov	r1, r9
 80083de:	4640      	mov	r0, r8
 80083e0:	f7f8 fbd2 	bl	8000b88 <__aeabi_d2iz>
 80083e4:	4606      	mov	r6, r0
 80083e6:	f7f8 f8b5 	bl	8000554 <__aeabi_i2d>
 80083ea:	3630      	adds	r6, #48	; 0x30
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4640      	mov	r0, r8
 80083f2:	4649      	mov	r1, r9
 80083f4:	f7f7 ff60 	bl	80002b8 <__aeabi_dsub>
 80083f8:	f805 6b01 	strb.w	r6, [r5], #1
 80083fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083fe:	429d      	cmp	r5, r3
 8008400:	4680      	mov	r8, r0
 8008402:	4689      	mov	r9, r1
 8008404:	f04f 0200 	mov.w	r2, #0
 8008408:	d124      	bne.n	8008454 <_dtoa_r+0x60c>
 800840a:	4b1b      	ldr	r3, [pc, #108]	; (8008478 <_dtoa_r+0x630>)
 800840c:	4650      	mov	r0, sl
 800840e:	4659      	mov	r1, fp
 8008410:	f7f7 ff54 	bl	80002bc <__adddf3>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4640      	mov	r0, r8
 800841a:	4649      	mov	r1, r9
 800841c:	f7f8 fb94 	bl	8000b48 <__aeabi_dcmpgt>
 8008420:	2800      	cmp	r0, #0
 8008422:	d173      	bne.n	800850c <_dtoa_r+0x6c4>
 8008424:	4652      	mov	r2, sl
 8008426:	465b      	mov	r3, fp
 8008428:	4913      	ldr	r1, [pc, #76]	; (8008478 <_dtoa_r+0x630>)
 800842a:	2000      	movs	r0, #0
 800842c:	f7f7 ff44 	bl	80002b8 <__aeabi_dsub>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4640      	mov	r0, r8
 8008436:	4649      	mov	r1, r9
 8008438:	f7f8 fb68 	bl	8000b0c <__aeabi_dcmplt>
 800843c:	2800      	cmp	r0, #0
 800843e:	f43f af35 	beq.w	80082ac <_dtoa_r+0x464>
 8008442:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008444:	1e6b      	subs	r3, r5, #1
 8008446:	930f      	str	r3, [sp, #60]	; 0x3c
 8008448:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800844c:	2b30      	cmp	r3, #48	; 0x30
 800844e:	d0f8      	beq.n	8008442 <_dtoa_r+0x5fa>
 8008450:	9700      	str	r7, [sp, #0]
 8008452:	e049      	b.n	80084e8 <_dtoa_r+0x6a0>
 8008454:	4b05      	ldr	r3, [pc, #20]	; (800846c <_dtoa_r+0x624>)
 8008456:	f7f8 f8e7 	bl	8000628 <__aeabi_dmul>
 800845a:	4680      	mov	r8, r0
 800845c:	4689      	mov	r9, r1
 800845e:	e7bd      	b.n	80083dc <_dtoa_r+0x594>
 8008460:	0800bc98 	.word	0x0800bc98
 8008464:	0800bc70 	.word	0x0800bc70
 8008468:	3ff00000 	.word	0x3ff00000
 800846c:	40240000 	.word	0x40240000
 8008470:	401c0000 	.word	0x401c0000
 8008474:	40140000 	.word	0x40140000
 8008478:	3fe00000 	.word	0x3fe00000
 800847c:	9d01      	ldr	r5, [sp, #4]
 800847e:	4656      	mov	r6, sl
 8008480:	465f      	mov	r7, fp
 8008482:	4642      	mov	r2, r8
 8008484:	464b      	mov	r3, r9
 8008486:	4630      	mov	r0, r6
 8008488:	4639      	mov	r1, r7
 800848a:	f7f8 f9f7 	bl	800087c <__aeabi_ddiv>
 800848e:	f7f8 fb7b 	bl	8000b88 <__aeabi_d2iz>
 8008492:	4682      	mov	sl, r0
 8008494:	f7f8 f85e 	bl	8000554 <__aeabi_i2d>
 8008498:	4642      	mov	r2, r8
 800849a:	464b      	mov	r3, r9
 800849c:	f7f8 f8c4 	bl	8000628 <__aeabi_dmul>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4630      	mov	r0, r6
 80084a6:	4639      	mov	r1, r7
 80084a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80084ac:	f7f7 ff04 	bl	80002b8 <__aeabi_dsub>
 80084b0:	f805 6b01 	strb.w	r6, [r5], #1
 80084b4:	9e01      	ldr	r6, [sp, #4]
 80084b6:	9f03      	ldr	r7, [sp, #12]
 80084b8:	1bae      	subs	r6, r5, r6
 80084ba:	42b7      	cmp	r7, r6
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	d135      	bne.n	800852e <_dtoa_r+0x6e6>
 80084c2:	f7f7 fefb 	bl	80002bc <__adddf3>
 80084c6:	4642      	mov	r2, r8
 80084c8:	464b      	mov	r3, r9
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	f7f8 fb3b 	bl	8000b48 <__aeabi_dcmpgt>
 80084d2:	b9d0      	cbnz	r0, 800850a <_dtoa_r+0x6c2>
 80084d4:	4642      	mov	r2, r8
 80084d6:	464b      	mov	r3, r9
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f8 fb0c 	bl	8000af8 <__aeabi_dcmpeq>
 80084e0:	b110      	cbz	r0, 80084e8 <_dtoa_r+0x6a0>
 80084e2:	f01a 0f01 	tst.w	sl, #1
 80084e6:	d110      	bne.n	800850a <_dtoa_r+0x6c2>
 80084e8:	4620      	mov	r0, r4
 80084ea:	ee18 1a10 	vmov	r1, s16
 80084ee:	f000 fe75 	bl	80091dc <_Bfree>
 80084f2:	2300      	movs	r3, #0
 80084f4:	9800      	ldr	r0, [sp, #0]
 80084f6:	702b      	strb	r3, [r5, #0]
 80084f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084fa:	3001      	adds	r0, #1
 80084fc:	6018      	str	r0, [r3, #0]
 80084fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008500:	2b00      	cmp	r3, #0
 8008502:	f43f acf1 	beq.w	8007ee8 <_dtoa_r+0xa0>
 8008506:	601d      	str	r5, [r3, #0]
 8008508:	e4ee      	b.n	8007ee8 <_dtoa_r+0xa0>
 800850a:	9f00      	ldr	r7, [sp, #0]
 800850c:	462b      	mov	r3, r5
 800850e:	461d      	mov	r5, r3
 8008510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008514:	2a39      	cmp	r2, #57	; 0x39
 8008516:	d106      	bne.n	8008526 <_dtoa_r+0x6de>
 8008518:	9a01      	ldr	r2, [sp, #4]
 800851a:	429a      	cmp	r2, r3
 800851c:	d1f7      	bne.n	800850e <_dtoa_r+0x6c6>
 800851e:	9901      	ldr	r1, [sp, #4]
 8008520:	2230      	movs	r2, #48	; 0x30
 8008522:	3701      	adds	r7, #1
 8008524:	700a      	strb	r2, [r1, #0]
 8008526:	781a      	ldrb	r2, [r3, #0]
 8008528:	3201      	adds	r2, #1
 800852a:	701a      	strb	r2, [r3, #0]
 800852c:	e790      	b.n	8008450 <_dtoa_r+0x608>
 800852e:	4ba6      	ldr	r3, [pc, #664]	; (80087c8 <_dtoa_r+0x980>)
 8008530:	2200      	movs	r2, #0
 8008532:	f7f8 f879 	bl	8000628 <__aeabi_dmul>
 8008536:	2200      	movs	r2, #0
 8008538:	2300      	movs	r3, #0
 800853a:	4606      	mov	r6, r0
 800853c:	460f      	mov	r7, r1
 800853e:	f7f8 fadb 	bl	8000af8 <__aeabi_dcmpeq>
 8008542:	2800      	cmp	r0, #0
 8008544:	d09d      	beq.n	8008482 <_dtoa_r+0x63a>
 8008546:	e7cf      	b.n	80084e8 <_dtoa_r+0x6a0>
 8008548:	9a08      	ldr	r2, [sp, #32]
 800854a:	2a00      	cmp	r2, #0
 800854c:	f000 80d7 	beq.w	80086fe <_dtoa_r+0x8b6>
 8008550:	9a06      	ldr	r2, [sp, #24]
 8008552:	2a01      	cmp	r2, #1
 8008554:	f300 80ba 	bgt.w	80086cc <_dtoa_r+0x884>
 8008558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800855a:	2a00      	cmp	r2, #0
 800855c:	f000 80b2 	beq.w	80086c4 <_dtoa_r+0x87c>
 8008560:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008564:	9e07      	ldr	r6, [sp, #28]
 8008566:	9d04      	ldr	r5, [sp, #16]
 8008568:	9a04      	ldr	r2, [sp, #16]
 800856a:	441a      	add	r2, r3
 800856c:	9204      	str	r2, [sp, #16]
 800856e:	9a05      	ldr	r2, [sp, #20]
 8008570:	2101      	movs	r1, #1
 8008572:	441a      	add	r2, r3
 8008574:	4620      	mov	r0, r4
 8008576:	9205      	str	r2, [sp, #20]
 8008578:	f000 ff32 	bl	80093e0 <__i2b>
 800857c:	4607      	mov	r7, r0
 800857e:	2d00      	cmp	r5, #0
 8008580:	dd0c      	ble.n	800859c <_dtoa_r+0x754>
 8008582:	9b05      	ldr	r3, [sp, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	dd09      	ble.n	800859c <_dtoa_r+0x754>
 8008588:	42ab      	cmp	r3, r5
 800858a:	9a04      	ldr	r2, [sp, #16]
 800858c:	bfa8      	it	ge
 800858e:	462b      	movge	r3, r5
 8008590:	1ad2      	subs	r2, r2, r3
 8008592:	9204      	str	r2, [sp, #16]
 8008594:	9a05      	ldr	r2, [sp, #20]
 8008596:	1aed      	subs	r5, r5, r3
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	9305      	str	r3, [sp, #20]
 800859c:	9b07      	ldr	r3, [sp, #28]
 800859e:	b31b      	cbz	r3, 80085e8 <_dtoa_r+0x7a0>
 80085a0:	9b08      	ldr	r3, [sp, #32]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80af 	beq.w	8008706 <_dtoa_r+0x8be>
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	dd13      	ble.n	80085d4 <_dtoa_r+0x78c>
 80085ac:	4639      	mov	r1, r7
 80085ae:	4632      	mov	r2, r6
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 ffd5 	bl	8009560 <__pow5mult>
 80085b6:	ee18 2a10 	vmov	r2, s16
 80085ba:	4601      	mov	r1, r0
 80085bc:	4607      	mov	r7, r0
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 ff24 	bl	800940c <__multiply>
 80085c4:	ee18 1a10 	vmov	r1, s16
 80085c8:	4680      	mov	r8, r0
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 fe06 	bl	80091dc <_Bfree>
 80085d0:	ee08 8a10 	vmov	s16, r8
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	1b9a      	subs	r2, r3, r6
 80085d8:	d006      	beq.n	80085e8 <_dtoa_r+0x7a0>
 80085da:	ee18 1a10 	vmov	r1, s16
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 ffbe 	bl	8009560 <__pow5mult>
 80085e4:	ee08 0a10 	vmov	s16, r0
 80085e8:	2101      	movs	r1, #1
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fef8 	bl	80093e0 <__i2b>
 80085f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	4606      	mov	r6, r0
 80085f6:	f340 8088 	ble.w	800870a <_dtoa_r+0x8c2>
 80085fa:	461a      	mov	r2, r3
 80085fc:	4601      	mov	r1, r0
 80085fe:	4620      	mov	r0, r4
 8008600:	f000 ffae 	bl	8009560 <__pow5mult>
 8008604:	9b06      	ldr	r3, [sp, #24]
 8008606:	2b01      	cmp	r3, #1
 8008608:	4606      	mov	r6, r0
 800860a:	f340 8081 	ble.w	8008710 <_dtoa_r+0x8c8>
 800860e:	f04f 0800 	mov.w	r8, #0
 8008612:	6933      	ldr	r3, [r6, #16]
 8008614:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008618:	6918      	ldr	r0, [r3, #16]
 800861a:	f000 fe91 	bl	8009340 <__hi0bits>
 800861e:	f1c0 0020 	rsb	r0, r0, #32
 8008622:	9b05      	ldr	r3, [sp, #20]
 8008624:	4418      	add	r0, r3
 8008626:	f010 001f 	ands.w	r0, r0, #31
 800862a:	f000 8092 	beq.w	8008752 <_dtoa_r+0x90a>
 800862e:	f1c0 0320 	rsb	r3, r0, #32
 8008632:	2b04      	cmp	r3, #4
 8008634:	f340 808a 	ble.w	800874c <_dtoa_r+0x904>
 8008638:	f1c0 001c 	rsb	r0, r0, #28
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	4403      	add	r3, r0
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	9b05      	ldr	r3, [sp, #20]
 8008644:	4403      	add	r3, r0
 8008646:	4405      	add	r5, r0
 8008648:	9305      	str	r3, [sp, #20]
 800864a:	9b04      	ldr	r3, [sp, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	dd07      	ble.n	8008660 <_dtoa_r+0x818>
 8008650:	ee18 1a10 	vmov	r1, s16
 8008654:	461a      	mov	r2, r3
 8008656:	4620      	mov	r0, r4
 8008658:	f000 ffdc 	bl	8009614 <__lshift>
 800865c:	ee08 0a10 	vmov	s16, r0
 8008660:	9b05      	ldr	r3, [sp, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dd05      	ble.n	8008672 <_dtoa_r+0x82a>
 8008666:	4631      	mov	r1, r6
 8008668:	461a      	mov	r2, r3
 800866a:	4620      	mov	r0, r4
 800866c:	f000 ffd2 	bl	8009614 <__lshift>
 8008670:	4606      	mov	r6, r0
 8008672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d06e      	beq.n	8008756 <_dtoa_r+0x90e>
 8008678:	ee18 0a10 	vmov	r0, s16
 800867c:	4631      	mov	r1, r6
 800867e:	f001 f839 	bl	80096f4 <__mcmp>
 8008682:	2800      	cmp	r0, #0
 8008684:	da67      	bge.n	8008756 <_dtoa_r+0x90e>
 8008686:	9b00      	ldr	r3, [sp, #0]
 8008688:	3b01      	subs	r3, #1
 800868a:	ee18 1a10 	vmov	r1, s16
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	220a      	movs	r2, #10
 8008692:	2300      	movs	r3, #0
 8008694:	4620      	mov	r0, r4
 8008696:	f000 fdc3 	bl	8009220 <__multadd>
 800869a:	9b08      	ldr	r3, [sp, #32]
 800869c:	ee08 0a10 	vmov	s16, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 81b1 	beq.w	8008a08 <_dtoa_r+0xbc0>
 80086a6:	2300      	movs	r3, #0
 80086a8:	4639      	mov	r1, r7
 80086aa:	220a      	movs	r2, #10
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fdb7 	bl	8009220 <__multadd>
 80086b2:	9b02      	ldr	r3, [sp, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	4607      	mov	r7, r0
 80086b8:	f300 808e 	bgt.w	80087d8 <_dtoa_r+0x990>
 80086bc:	9b06      	ldr	r3, [sp, #24]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	dc51      	bgt.n	8008766 <_dtoa_r+0x91e>
 80086c2:	e089      	b.n	80087d8 <_dtoa_r+0x990>
 80086c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086ca:	e74b      	b.n	8008564 <_dtoa_r+0x71c>
 80086cc:	9b03      	ldr	r3, [sp, #12]
 80086ce:	1e5e      	subs	r6, r3, #1
 80086d0:	9b07      	ldr	r3, [sp, #28]
 80086d2:	42b3      	cmp	r3, r6
 80086d4:	bfbf      	itttt	lt
 80086d6:	9b07      	ldrlt	r3, [sp, #28]
 80086d8:	9607      	strlt	r6, [sp, #28]
 80086da:	1af2      	sublt	r2, r6, r3
 80086dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086de:	bfb6      	itet	lt
 80086e0:	189b      	addlt	r3, r3, r2
 80086e2:	1b9e      	subge	r6, r3, r6
 80086e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	bfb8      	it	lt
 80086ea:	2600      	movlt	r6, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bfb7      	itett	lt
 80086f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80086f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80086f8:	1a9d      	sublt	r5, r3, r2
 80086fa:	2300      	movlt	r3, #0
 80086fc:	e734      	b.n	8008568 <_dtoa_r+0x720>
 80086fe:	9e07      	ldr	r6, [sp, #28]
 8008700:	9d04      	ldr	r5, [sp, #16]
 8008702:	9f08      	ldr	r7, [sp, #32]
 8008704:	e73b      	b.n	800857e <_dtoa_r+0x736>
 8008706:	9a07      	ldr	r2, [sp, #28]
 8008708:	e767      	b.n	80085da <_dtoa_r+0x792>
 800870a:	9b06      	ldr	r3, [sp, #24]
 800870c:	2b01      	cmp	r3, #1
 800870e:	dc18      	bgt.n	8008742 <_dtoa_r+0x8fa>
 8008710:	f1ba 0f00 	cmp.w	sl, #0
 8008714:	d115      	bne.n	8008742 <_dtoa_r+0x8fa>
 8008716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800871a:	b993      	cbnz	r3, 8008742 <_dtoa_r+0x8fa>
 800871c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008720:	0d1b      	lsrs	r3, r3, #20
 8008722:	051b      	lsls	r3, r3, #20
 8008724:	b183      	cbz	r3, 8008748 <_dtoa_r+0x900>
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	3301      	adds	r3, #1
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	9b05      	ldr	r3, [sp, #20]
 800872e:	3301      	adds	r3, #1
 8008730:	9305      	str	r3, [sp, #20]
 8008732:	f04f 0801 	mov.w	r8, #1
 8008736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008738:	2b00      	cmp	r3, #0
 800873a:	f47f af6a 	bne.w	8008612 <_dtoa_r+0x7ca>
 800873e:	2001      	movs	r0, #1
 8008740:	e76f      	b.n	8008622 <_dtoa_r+0x7da>
 8008742:	f04f 0800 	mov.w	r8, #0
 8008746:	e7f6      	b.n	8008736 <_dtoa_r+0x8ee>
 8008748:	4698      	mov	r8, r3
 800874a:	e7f4      	b.n	8008736 <_dtoa_r+0x8ee>
 800874c:	f43f af7d 	beq.w	800864a <_dtoa_r+0x802>
 8008750:	4618      	mov	r0, r3
 8008752:	301c      	adds	r0, #28
 8008754:	e772      	b.n	800863c <_dtoa_r+0x7f4>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	dc37      	bgt.n	80087cc <_dtoa_r+0x984>
 800875c:	9b06      	ldr	r3, [sp, #24]
 800875e:	2b02      	cmp	r3, #2
 8008760:	dd34      	ble.n	80087cc <_dtoa_r+0x984>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	9302      	str	r3, [sp, #8]
 8008766:	9b02      	ldr	r3, [sp, #8]
 8008768:	b96b      	cbnz	r3, 8008786 <_dtoa_r+0x93e>
 800876a:	4631      	mov	r1, r6
 800876c:	2205      	movs	r2, #5
 800876e:	4620      	mov	r0, r4
 8008770:	f000 fd56 	bl	8009220 <__multadd>
 8008774:	4601      	mov	r1, r0
 8008776:	4606      	mov	r6, r0
 8008778:	ee18 0a10 	vmov	r0, s16
 800877c:	f000 ffba 	bl	80096f4 <__mcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	f73f adbb 	bgt.w	80082fc <_dtoa_r+0x4b4>
 8008786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008788:	9d01      	ldr	r5, [sp, #4]
 800878a:	43db      	mvns	r3, r3
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	f04f 0800 	mov.w	r8, #0
 8008792:	4631      	mov	r1, r6
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fd21 	bl	80091dc <_Bfree>
 800879a:	2f00      	cmp	r7, #0
 800879c:	f43f aea4 	beq.w	80084e8 <_dtoa_r+0x6a0>
 80087a0:	f1b8 0f00 	cmp.w	r8, #0
 80087a4:	d005      	beq.n	80087b2 <_dtoa_r+0x96a>
 80087a6:	45b8      	cmp	r8, r7
 80087a8:	d003      	beq.n	80087b2 <_dtoa_r+0x96a>
 80087aa:	4641      	mov	r1, r8
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 fd15 	bl	80091dc <_Bfree>
 80087b2:	4639      	mov	r1, r7
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 fd11 	bl	80091dc <_Bfree>
 80087ba:	e695      	b.n	80084e8 <_dtoa_r+0x6a0>
 80087bc:	2600      	movs	r6, #0
 80087be:	4637      	mov	r7, r6
 80087c0:	e7e1      	b.n	8008786 <_dtoa_r+0x93e>
 80087c2:	9700      	str	r7, [sp, #0]
 80087c4:	4637      	mov	r7, r6
 80087c6:	e599      	b.n	80082fc <_dtoa_r+0x4b4>
 80087c8:	40240000 	.word	0x40240000
 80087cc:	9b08      	ldr	r3, [sp, #32]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 80ca 	beq.w	8008968 <_dtoa_r+0xb20>
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	2d00      	cmp	r5, #0
 80087da:	dd05      	ble.n	80087e8 <_dtoa_r+0x9a0>
 80087dc:	4639      	mov	r1, r7
 80087de:	462a      	mov	r2, r5
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 ff17 	bl	8009614 <__lshift>
 80087e6:	4607      	mov	r7, r0
 80087e8:	f1b8 0f00 	cmp.w	r8, #0
 80087ec:	d05b      	beq.n	80088a6 <_dtoa_r+0xa5e>
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 fcb3 	bl	800915c <_Balloc>
 80087f6:	4605      	mov	r5, r0
 80087f8:	b928      	cbnz	r0, 8008806 <_dtoa_r+0x9be>
 80087fa:	4b87      	ldr	r3, [pc, #540]	; (8008a18 <_dtoa_r+0xbd0>)
 80087fc:	4602      	mov	r2, r0
 80087fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008802:	f7ff bb3b 	b.w	8007e7c <_dtoa_r+0x34>
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	3202      	adds	r2, #2
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	f107 010c 	add.w	r1, r7, #12
 8008810:	300c      	adds	r0, #12
 8008812:	f000 fc95 	bl	8009140 <memcpy>
 8008816:	2201      	movs	r2, #1
 8008818:	4629      	mov	r1, r5
 800881a:	4620      	mov	r0, r4
 800881c:	f000 fefa 	bl	8009614 <__lshift>
 8008820:	9b01      	ldr	r3, [sp, #4]
 8008822:	f103 0901 	add.w	r9, r3, #1
 8008826:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800882a:	4413      	add	r3, r2
 800882c:	9305      	str	r3, [sp, #20]
 800882e:	f00a 0301 	and.w	r3, sl, #1
 8008832:	46b8      	mov	r8, r7
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	4607      	mov	r7, r0
 8008838:	4631      	mov	r1, r6
 800883a:	ee18 0a10 	vmov	r0, s16
 800883e:	f7ff fa77 	bl	8007d30 <quorem>
 8008842:	4641      	mov	r1, r8
 8008844:	9002      	str	r0, [sp, #8]
 8008846:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800884a:	ee18 0a10 	vmov	r0, s16
 800884e:	f000 ff51 	bl	80096f4 <__mcmp>
 8008852:	463a      	mov	r2, r7
 8008854:	9003      	str	r0, [sp, #12]
 8008856:	4631      	mov	r1, r6
 8008858:	4620      	mov	r0, r4
 800885a:	f000 ff67 	bl	800972c <__mdiff>
 800885e:	68c2      	ldr	r2, [r0, #12]
 8008860:	f109 3bff 	add.w	fp, r9, #4294967295
 8008864:	4605      	mov	r5, r0
 8008866:	bb02      	cbnz	r2, 80088aa <_dtoa_r+0xa62>
 8008868:	4601      	mov	r1, r0
 800886a:	ee18 0a10 	vmov	r0, s16
 800886e:	f000 ff41 	bl	80096f4 <__mcmp>
 8008872:	4602      	mov	r2, r0
 8008874:	4629      	mov	r1, r5
 8008876:	4620      	mov	r0, r4
 8008878:	9207      	str	r2, [sp, #28]
 800887a:	f000 fcaf 	bl	80091dc <_Bfree>
 800887e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008882:	ea43 0102 	orr.w	r1, r3, r2
 8008886:	9b04      	ldr	r3, [sp, #16]
 8008888:	430b      	orrs	r3, r1
 800888a:	464d      	mov	r5, r9
 800888c:	d10f      	bne.n	80088ae <_dtoa_r+0xa66>
 800888e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008892:	d02a      	beq.n	80088ea <_dtoa_r+0xaa2>
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	dd02      	ble.n	80088a0 <_dtoa_r+0xa58>
 800889a:	9b02      	ldr	r3, [sp, #8]
 800889c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80088a0:	f88b a000 	strb.w	sl, [fp]
 80088a4:	e775      	b.n	8008792 <_dtoa_r+0x94a>
 80088a6:	4638      	mov	r0, r7
 80088a8:	e7ba      	b.n	8008820 <_dtoa_r+0x9d8>
 80088aa:	2201      	movs	r2, #1
 80088ac:	e7e2      	b.n	8008874 <_dtoa_r+0xa2c>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db04      	blt.n	80088be <_dtoa_r+0xa76>
 80088b4:	9906      	ldr	r1, [sp, #24]
 80088b6:	430b      	orrs	r3, r1
 80088b8:	9904      	ldr	r1, [sp, #16]
 80088ba:	430b      	orrs	r3, r1
 80088bc:	d122      	bne.n	8008904 <_dtoa_r+0xabc>
 80088be:	2a00      	cmp	r2, #0
 80088c0:	ddee      	ble.n	80088a0 <_dtoa_r+0xa58>
 80088c2:	ee18 1a10 	vmov	r1, s16
 80088c6:	2201      	movs	r2, #1
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fea3 	bl	8009614 <__lshift>
 80088ce:	4631      	mov	r1, r6
 80088d0:	ee08 0a10 	vmov	s16, r0
 80088d4:	f000 ff0e 	bl	80096f4 <__mcmp>
 80088d8:	2800      	cmp	r0, #0
 80088da:	dc03      	bgt.n	80088e4 <_dtoa_r+0xa9c>
 80088dc:	d1e0      	bne.n	80088a0 <_dtoa_r+0xa58>
 80088de:	f01a 0f01 	tst.w	sl, #1
 80088e2:	d0dd      	beq.n	80088a0 <_dtoa_r+0xa58>
 80088e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088e8:	d1d7      	bne.n	800889a <_dtoa_r+0xa52>
 80088ea:	2339      	movs	r3, #57	; 0x39
 80088ec:	f88b 3000 	strb.w	r3, [fp]
 80088f0:	462b      	mov	r3, r5
 80088f2:	461d      	mov	r5, r3
 80088f4:	3b01      	subs	r3, #1
 80088f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088fa:	2a39      	cmp	r2, #57	; 0x39
 80088fc:	d071      	beq.n	80089e2 <_dtoa_r+0xb9a>
 80088fe:	3201      	adds	r2, #1
 8008900:	701a      	strb	r2, [r3, #0]
 8008902:	e746      	b.n	8008792 <_dtoa_r+0x94a>
 8008904:	2a00      	cmp	r2, #0
 8008906:	dd07      	ble.n	8008918 <_dtoa_r+0xad0>
 8008908:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800890c:	d0ed      	beq.n	80088ea <_dtoa_r+0xaa2>
 800890e:	f10a 0301 	add.w	r3, sl, #1
 8008912:	f88b 3000 	strb.w	r3, [fp]
 8008916:	e73c      	b.n	8008792 <_dtoa_r+0x94a>
 8008918:	9b05      	ldr	r3, [sp, #20]
 800891a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800891e:	4599      	cmp	r9, r3
 8008920:	d047      	beq.n	80089b2 <_dtoa_r+0xb6a>
 8008922:	ee18 1a10 	vmov	r1, s16
 8008926:	2300      	movs	r3, #0
 8008928:	220a      	movs	r2, #10
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fc78 	bl	8009220 <__multadd>
 8008930:	45b8      	cmp	r8, r7
 8008932:	ee08 0a10 	vmov	s16, r0
 8008936:	f04f 0300 	mov.w	r3, #0
 800893a:	f04f 020a 	mov.w	r2, #10
 800893e:	4641      	mov	r1, r8
 8008940:	4620      	mov	r0, r4
 8008942:	d106      	bne.n	8008952 <_dtoa_r+0xb0a>
 8008944:	f000 fc6c 	bl	8009220 <__multadd>
 8008948:	4680      	mov	r8, r0
 800894a:	4607      	mov	r7, r0
 800894c:	f109 0901 	add.w	r9, r9, #1
 8008950:	e772      	b.n	8008838 <_dtoa_r+0x9f0>
 8008952:	f000 fc65 	bl	8009220 <__multadd>
 8008956:	4639      	mov	r1, r7
 8008958:	4680      	mov	r8, r0
 800895a:	2300      	movs	r3, #0
 800895c:	220a      	movs	r2, #10
 800895e:	4620      	mov	r0, r4
 8008960:	f000 fc5e 	bl	8009220 <__multadd>
 8008964:	4607      	mov	r7, r0
 8008966:	e7f1      	b.n	800894c <_dtoa_r+0xb04>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	9302      	str	r3, [sp, #8]
 800896c:	9d01      	ldr	r5, [sp, #4]
 800896e:	ee18 0a10 	vmov	r0, s16
 8008972:	4631      	mov	r1, r6
 8008974:	f7ff f9dc 	bl	8007d30 <quorem>
 8008978:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	f805 ab01 	strb.w	sl, [r5], #1
 8008982:	1aea      	subs	r2, r5, r3
 8008984:	9b02      	ldr	r3, [sp, #8]
 8008986:	4293      	cmp	r3, r2
 8008988:	dd09      	ble.n	800899e <_dtoa_r+0xb56>
 800898a:	ee18 1a10 	vmov	r1, s16
 800898e:	2300      	movs	r3, #0
 8008990:	220a      	movs	r2, #10
 8008992:	4620      	mov	r0, r4
 8008994:	f000 fc44 	bl	8009220 <__multadd>
 8008998:	ee08 0a10 	vmov	s16, r0
 800899c:	e7e7      	b.n	800896e <_dtoa_r+0xb26>
 800899e:	9b02      	ldr	r3, [sp, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bfc8      	it	gt
 80089a4:	461d      	movgt	r5, r3
 80089a6:	9b01      	ldr	r3, [sp, #4]
 80089a8:	bfd8      	it	le
 80089aa:	2501      	movle	r5, #1
 80089ac:	441d      	add	r5, r3
 80089ae:	f04f 0800 	mov.w	r8, #0
 80089b2:	ee18 1a10 	vmov	r1, s16
 80089b6:	2201      	movs	r2, #1
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fe2b 	bl	8009614 <__lshift>
 80089be:	4631      	mov	r1, r6
 80089c0:	ee08 0a10 	vmov	s16, r0
 80089c4:	f000 fe96 	bl	80096f4 <__mcmp>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	dc91      	bgt.n	80088f0 <_dtoa_r+0xaa8>
 80089cc:	d102      	bne.n	80089d4 <_dtoa_r+0xb8c>
 80089ce:	f01a 0f01 	tst.w	sl, #1
 80089d2:	d18d      	bne.n	80088f0 <_dtoa_r+0xaa8>
 80089d4:	462b      	mov	r3, r5
 80089d6:	461d      	mov	r5, r3
 80089d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089dc:	2a30      	cmp	r2, #48	; 0x30
 80089de:	d0fa      	beq.n	80089d6 <_dtoa_r+0xb8e>
 80089e0:	e6d7      	b.n	8008792 <_dtoa_r+0x94a>
 80089e2:	9a01      	ldr	r2, [sp, #4]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d184      	bne.n	80088f2 <_dtoa_r+0xaaa>
 80089e8:	9b00      	ldr	r3, [sp, #0]
 80089ea:	3301      	adds	r3, #1
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	2331      	movs	r3, #49	; 0x31
 80089f0:	7013      	strb	r3, [r2, #0]
 80089f2:	e6ce      	b.n	8008792 <_dtoa_r+0x94a>
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <_dtoa_r+0xbd4>)
 80089f6:	f7ff ba95 	b.w	8007f24 <_dtoa_r+0xdc>
 80089fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f47f aa6e 	bne.w	8007ede <_dtoa_r+0x96>
 8008a02:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <_dtoa_r+0xbd8>)
 8008a04:	f7ff ba8e 	b.w	8007f24 <_dtoa_r+0xdc>
 8008a08:	9b02      	ldr	r3, [sp, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	dcae      	bgt.n	800896c <_dtoa_r+0xb24>
 8008a0e:	9b06      	ldr	r3, [sp, #24]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	f73f aea8 	bgt.w	8008766 <_dtoa_r+0x91e>
 8008a16:	e7a9      	b.n	800896c <_dtoa_r+0xb24>
 8008a18:	0800bb88 	.word	0x0800bb88
 8008a1c:	0800b98c 	.word	0x0800b98c
 8008a20:	0800bb09 	.word	0x0800bb09

08008a24 <rshift>:
 8008a24:	6903      	ldr	r3, [r0, #16]
 8008a26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a32:	f100 0414 	add.w	r4, r0, #20
 8008a36:	dd45      	ble.n	8008ac4 <rshift+0xa0>
 8008a38:	f011 011f 	ands.w	r1, r1, #31
 8008a3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a44:	d10c      	bne.n	8008a60 <rshift+0x3c>
 8008a46:	f100 0710 	add.w	r7, r0, #16
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	42b1      	cmp	r1, r6
 8008a4e:	d334      	bcc.n	8008aba <rshift+0x96>
 8008a50:	1a9b      	subs	r3, r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	1eea      	subs	r2, r5, #3
 8008a56:	4296      	cmp	r6, r2
 8008a58:	bf38      	it	cc
 8008a5a:	2300      	movcc	r3, #0
 8008a5c:	4423      	add	r3, r4
 8008a5e:	e015      	b.n	8008a8c <rshift+0x68>
 8008a60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a64:	f1c1 0820 	rsb	r8, r1, #32
 8008a68:	40cf      	lsrs	r7, r1
 8008a6a:	f105 0e04 	add.w	lr, r5, #4
 8008a6e:	46a1      	mov	r9, r4
 8008a70:	4576      	cmp	r6, lr
 8008a72:	46f4      	mov	ip, lr
 8008a74:	d815      	bhi.n	8008aa2 <rshift+0x7e>
 8008a76:	1a9a      	subs	r2, r3, r2
 8008a78:	0092      	lsls	r2, r2, #2
 8008a7a:	3a04      	subs	r2, #4
 8008a7c:	3501      	adds	r5, #1
 8008a7e:	42ae      	cmp	r6, r5
 8008a80:	bf38      	it	cc
 8008a82:	2200      	movcc	r2, #0
 8008a84:	18a3      	adds	r3, r4, r2
 8008a86:	50a7      	str	r7, [r4, r2]
 8008a88:	b107      	cbz	r7, 8008a8c <rshift+0x68>
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	1b1a      	subs	r2, r3, r4
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a94:	bf08      	it	eq
 8008a96:	2300      	moveq	r3, #0
 8008a98:	6102      	str	r2, [r0, #16]
 8008a9a:	bf08      	it	eq
 8008a9c:	6143      	streq	r3, [r0, #20]
 8008a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aa2:	f8dc c000 	ldr.w	ip, [ip]
 8008aa6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008aaa:	ea4c 0707 	orr.w	r7, ip, r7
 8008aae:	f849 7b04 	str.w	r7, [r9], #4
 8008ab2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ab6:	40cf      	lsrs	r7, r1
 8008ab8:	e7da      	b.n	8008a70 <rshift+0x4c>
 8008aba:	f851 cb04 	ldr.w	ip, [r1], #4
 8008abe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008ac2:	e7c3      	b.n	8008a4c <rshift+0x28>
 8008ac4:	4623      	mov	r3, r4
 8008ac6:	e7e1      	b.n	8008a8c <rshift+0x68>

08008ac8 <__hexdig_fun>:
 8008ac8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008acc:	2b09      	cmp	r3, #9
 8008ace:	d802      	bhi.n	8008ad6 <__hexdig_fun+0xe>
 8008ad0:	3820      	subs	r0, #32
 8008ad2:	b2c0      	uxtb	r0, r0
 8008ad4:	4770      	bx	lr
 8008ad6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ada:	2b05      	cmp	r3, #5
 8008adc:	d801      	bhi.n	8008ae2 <__hexdig_fun+0x1a>
 8008ade:	3847      	subs	r0, #71	; 0x47
 8008ae0:	e7f7      	b.n	8008ad2 <__hexdig_fun+0xa>
 8008ae2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008ae6:	2b05      	cmp	r3, #5
 8008ae8:	d801      	bhi.n	8008aee <__hexdig_fun+0x26>
 8008aea:	3827      	subs	r0, #39	; 0x27
 8008aec:	e7f1      	b.n	8008ad2 <__hexdig_fun+0xa>
 8008aee:	2000      	movs	r0, #0
 8008af0:	4770      	bx	lr
	...

08008af4 <__gethex>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	ed2d 8b02 	vpush	{d8}
 8008afc:	b089      	sub	sp, #36	; 0x24
 8008afe:	ee08 0a10 	vmov	s16, r0
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	4bb4      	ldr	r3, [pc, #720]	; (8008dd8 <__gethex+0x2e4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	468b      	mov	fp, r1
 8008b0e:	4690      	mov	r8, r2
 8008b10:	f7f7 fb70 	bl	80001f4 <strlen>
 8008b14:	9b01      	ldr	r3, [sp, #4]
 8008b16:	f8db 2000 	ldr.w	r2, [fp]
 8008b1a:	4403      	add	r3, r0
 8008b1c:	4682      	mov	sl, r0
 8008b1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b22:	9305      	str	r3, [sp, #20]
 8008b24:	1c93      	adds	r3, r2, #2
 8008b26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008b2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008b2e:	32fe      	adds	r2, #254	; 0xfe
 8008b30:	18d1      	adds	r1, r2, r3
 8008b32:	461f      	mov	r7, r3
 8008b34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b38:	9100      	str	r1, [sp, #0]
 8008b3a:	2830      	cmp	r0, #48	; 0x30
 8008b3c:	d0f8      	beq.n	8008b30 <__gethex+0x3c>
 8008b3e:	f7ff ffc3 	bl	8008ac8 <__hexdig_fun>
 8008b42:	4604      	mov	r4, r0
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d13a      	bne.n	8008bbe <__gethex+0xca>
 8008b48:	9901      	ldr	r1, [sp, #4]
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f001 fa33 	bl	8009fb8 <strncmp>
 8008b52:	4605      	mov	r5, r0
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d168      	bne.n	8008c2a <__gethex+0x136>
 8008b58:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008b5c:	eb07 060a 	add.w	r6, r7, sl
 8008b60:	f7ff ffb2 	bl	8008ac8 <__hexdig_fun>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d062      	beq.n	8008c2e <__gethex+0x13a>
 8008b68:	4633      	mov	r3, r6
 8008b6a:	7818      	ldrb	r0, [r3, #0]
 8008b6c:	2830      	cmp	r0, #48	; 0x30
 8008b6e:	461f      	mov	r7, r3
 8008b70:	f103 0301 	add.w	r3, r3, #1
 8008b74:	d0f9      	beq.n	8008b6a <__gethex+0x76>
 8008b76:	f7ff ffa7 	bl	8008ac8 <__hexdig_fun>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	fab0 f480 	clz	r4, r0
 8008b80:	0964      	lsrs	r4, r4, #5
 8008b82:	4635      	mov	r5, r6
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	463a      	mov	r2, r7
 8008b88:	4616      	mov	r6, r2
 8008b8a:	3201      	adds	r2, #1
 8008b8c:	7830      	ldrb	r0, [r6, #0]
 8008b8e:	f7ff ff9b 	bl	8008ac8 <__hexdig_fun>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d1f8      	bne.n	8008b88 <__gethex+0x94>
 8008b96:	9901      	ldr	r1, [sp, #4]
 8008b98:	4652      	mov	r2, sl
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f001 fa0c 	bl	8009fb8 <strncmp>
 8008ba0:	b980      	cbnz	r0, 8008bc4 <__gethex+0xd0>
 8008ba2:	b94d      	cbnz	r5, 8008bb8 <__gethex+0xc4>
 8008ba4:	eb06 050a 	add.w	r5, r6, sl
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4616      	mov	r6, r2
 8008bac:	3201      	adds	r2, #1
 8008bae:	7830      	ldrb	r0, [r6, #0]
 8008bb0:	f7ff ff8a 	bl	8008ac8 <__hexdig_fun>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d1f8      	bne.n	8008baa <__gethex+0xb6>
 8008bb8:	1bad      	subs	r5, r5, r6
 8008bba:	00ad      	lsls	r5, r5, #2
 8008bbc:	e004      	b.n	8008bc8 <__gethex+0xd4>
 8008bbe:	2400      	movs	r4, #0
 8008bc0:	4625      	mov	r5, r4
 8008bc2:	e7e0      	b.n	8008b86 <__gethex+0x92>
 8008bc4:	2d00      	cmp	r5, #0
 8008bc6:	d1f7      	bne.n	8008bb8 <__gethex+0xc4>
 8008bc8:	7833      	ldrb	r3, [r6, #0]
 8008bca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008bce:	2b50      	cmp	r3, #80	; 0x50
 8008bd0:	d13b      	bne.n	8008c4a <__gethex+0x156>
 8008bd2:	7873      	ldrb	r3, [r6, #1]
 8008bd4:	2b2b      	cmp	r3, #43	; 0x2b
 8008bd6:	d02c      	beq.n	8008c32 <__gethex+0x13e>
 8008bd8:	2b2d      	cmp	r3, #45	; 0x2d
 8008bda:	d02e      	beq.n	8008c3a <__gethex+0x146>
 8008bdc:	1c71      	adds	r1, r6, #1
 8008bde:	f04f 0900 	mov.w	r9, #0
 8008be2:	7808      	ldrb	r0, [r1, #0]
 8008be4:	f7ff ff70 	bl	8008ac8 <__hexdig_fun>
 8008be8:	1e43      	subs	r3, r0, #1
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b18      	cmp	r3, #24
 8008bee:	d82c      	bhi.n	8008c4a <__gethex+0x156>
 8008bf0:	f1a0 0210 	sub.w	r2, r0, #16
 8008bf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008bf8:	f7ff ff66 	bl	8008ac8 <__hexdig_fun>
 8008bfc:	1e43      	subs	r3, r0, #1
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b18      	cmp	r3, #24
 8008c02:	d91d      	bls.n	8008c40 <__gethex+0x14c>
 8008c04:	f1b9 0f00 	cmp.w	r9, #0
 8008c08:	d000      	beq.n	8008c0c <__gethex+0x118>
 8008c0a:	4252      	negs	r2, r2
 8008c0c:	4415      	add	r5, r2
 8008c0e:	f8cb 1000 	str.w	r1, [fp]
 8008c12:	b1e4      	cbz	r4, 8008c4e <__gethex+0x15a>
 8008c14:	9b00      	ldr	r3, [sp, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bf14      	ite	ne
 8008c1a:	2700      	movne	r7, #0
 8008c1c:	2706      	moveq	r7, #6
 8008c1e:	4638      	mov	r0, r7
 8008c20:	b009      	add	sp, #36	; 0x24
 8008c22:	ecbd 8b02 	vpop	{d8}
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2a:	463e      	mov	r6, r7
 8008c2c:	4625      	mov	r5, r4
 8008c2e:	2401      	movs	r4, #1
 8008c30:	e7ca      	b.n	8008bc8 <__gethex+0xd4>
 8008c32:	f04f 0900 	mov.w	r9, #0
 8008c36:	1cb1      	adds	r1, r6, #2
 8008c38:	e7d3      	b.n	8008be2 <__gethex+0xee>
 8008c3a:	f04f 0901 	mov.w	r9, #1
 8008c3e:	e7fa      	b.n	8008c36 <__gethex+0x142>
 8008c40:	230a      	movs	r3, #10
 8008c42:	fb03 0202 	mla	r2, r3, r2, r0
 8008c46:	3a10      	subs	r2, #16
 8008c48:	e7d4      	b.n	8008bf4 <__gethex+0x100>
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	e7df      	b.n	8008c0e <__gethex+0x11a>
 8008c4e:	1bf3      	subs	r3, r6, r7
 8008c50:	3b01      	subs	r3, #1
 8008c52:	4621      	mov	r1, r4
 8008c54:	2b07      	cmp	r3, #7
 8008c56:	dc0b      	bgt.n	8008c70 <__gethex+0x17c>
 8008c58:	ee18 0a10 	vmov	r0, s16
 8008c5c:	f000 fa7e 	bl	800915c <_Balloc>
 8008c60:	4604      	mov	r4, r0
 8008c62:	b940      	cbnz	r0, 8008c76 <__gethex+0x182>
 8008c64:	4b5d      	ldr	r3, [pc, #372]	; (8008ddc <__gethex+0x2e8>)
 8008c66:	4602      	mov	r2, r0
 8008c68:	21de      	movs	r1, #222	; 0xde
 8008c6a:	485d      	ldr	r0, [pc, #372]	; (8008de0 <__gethex+0x2ec>)
 8008c6c:	f001 f9c6 	bl	8009ffc <__assert_func>
 8008c70:	3101      	adds	r1, #1
 8008c72:	105b      	asrs	r3, r3, #1
 8008c74:	e7ee      	b.n	8008c54 <__gethex+0x160>
 8008c76:	f100 0914 	add.w	r9, r0, #20
 8008c7a:	f04f 0b00 	mov.w	fp, #0
 8008c7e:	f1ca 0301 	rsb	r3, sl, #1
 8008c82:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c86:	f8cd b000 	str.w	fp, [sp]
 8008c8a:	9306      	str	r3, [sp, #24]
 8008c8c:	42b7      	cmp	r7, r6
 8008c8e:	d340      	bcc.n	8008d12 <__gethex+0x21e>
 8008c90:	9802      	ldr	r0, [sp, #8]
 8008c92:	9b00      	ldr	r3, [sp, #0]
 8008c94:	f840 3b04 	str.w	r3, [r0], #4
 8008c98:	eba0 0009 	sub.w	r0, r0, r9
 8008c9c:	1080      	asrs	r0, r0, #2
 8008c9e:	0146      	lsls	r6, r0, #5
 8008ca0:	6120      	str	r0, [r4, #16]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fb4c 	bl	8009340 <__hi0bits>
 8008ca8:	1a30      	subs	r0, r6, r0
 8008caa:	f8d8 6000 	ldr.w	r6, [r8]
 8008cae:	42b0      	cmp	r0, r6
 8008cb0:	dd63      	ble.n	8008d7a <__gethex+0x286>
 8008cb2:	1b87      	subs	r7, r0, r6
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f000 fef0 	bl	8009a9c <__any_on>
 8008cbc:	4682      	mov	sl, r0
 8008cbe:	b1a8      	cbz	r0, 8008cec <__gethex+0x1f8>
 8008cc0:	1e7b      	subs	r3, r7, #1
 8008cc2:	1159      	asrs	r1, r3, #5
 8008cc4:	f003 021f 	and.w	r2, r3, #31
 8008cc8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008ccc:	f04f 0a01 	mov.w	sl, #1
 8008cd0:	fa0a f202 	lsl.w	r2, sl, r2
 8008cd4:	420a      	tst	r2, r1
 8008cd6:	d009      	beq.n	8008cec <__gethex+0x1f8>
 8008cd8:	4553      	cmp	r3, sl
 8008cda:	dd05      	ble.n	8008ce8 <__gethex+0x1f4>
 8008cdc:	1eb9      	subs	r1, r7, #2
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f000 fedc 	bl	8009a9c <__any_on>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d145      	bne.n	8008d74 <__gethex+0x280>
 8008ce8:	f04f 0a02 	mov.w	sl, #2
 8008cec:	4639      	mov	r1, r7
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f7ff fe98 	bl	8008a24 <rshift>
 8008cf4:	443d      	add	r5, r7
 8008cf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cfa:	42ab      	cmp	r3, r5
 8008cfc:	da4c      	bge.n	8008d98 <__gethex+0x2a4>
 8008cfe:	ee18 0a10 	vmov	r0, s16
 8008d02:	4621      	mov	r1, r4
 8008d04:	f000 fa6a 	bl	80091dc <_Bfree>
 8008d08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	27a3      	movs	r7, #163	; 0xa3
 8008d10:	e785      	b.n	8008c1e <__gethex+0x12a>
 8008d12:	1e73      	subs	r3, r6, #1
 8008d14:	9a05      	ldr	r2, [sp, #20]
 8008d16:	9303      	str	r3, [sp, #12]
 8008d18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d019      	beq.n	8008d54 <__gethex+0x260>
 8008d20:	f1bb 0f20 	cmp.w	fp, #32
 8008d24:	d107      	bne.n	8008d36 <__gethex+0x242>
 8008d26:	9b02      	ldr	r3, [sp, #8]
 8008d28:	9a00      	ldr	r2, [sp, #0]
 8008d2a:	f843 2b04 	str.w	r2, [r3], #4
 8008d2e:	9302      	str	r3, [sp, #8]
 8008d30:	2300      	movs	r3, #0
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	469b      	mov	fp, r3
 8008d36:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008d3a:	f7ff fec5 	bl	8008ac8 <__hexdig_fun>
 8008d3e:	9b00      	ldr	r3, [sp, #0]
 8008d40:	f000 000f 	and.w	r0, r0, #15
 8008d44:	fa00 f00b 	lsl.w	r0, r0, fp
 8008d48:	4303      	orrs	r3, r0
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	f10b 0b04 	add.w	fp, fp, #4
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	e00d      	b.n	8008d70 <__gethex+0x27c>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	9a06      	ldr	r2, [sp, #24]
 8008d58:	4413      	add	r3, r2
 8008d5a:	42bb      	cmp	r3, r7
 8008d5c:	d3e0      	bcc.n	8008d20 <__gethex+0x22c>
 8008d5e:	4618      	mov	r0, r3
 8008d60:	9901      	ldr	r1, [sp, #4]
 8008d62:	9307      	str	r3, [sp, #28]
 8008d64:	4652      	mov	r2, sl
 8008d66:	f001 f927 	bl	8009fb8 <strncmp>
 8008d6a:	9b07      	ldr	r3, [sp, #28]
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d1d7      	bne.n	8008d20 <__gethex+0x22c>
 8008d70:	461e      	mov	r6, r3
 8008d72:	e78b      	b.n	8008c8c <__gethex+0x198>
 8008d74:	f04f 0a03 	mov.w	sl, #3
 8008d78:	e7b8      	b.n	8008cec <__gethex+0x1f8>
 8008d7a:	da0a      	bge.n	8008d92 <__gethex+0x29e>
 8008d7c:	1a37      	subs	r7, r6, r0
 8008d7e:	4621      	mov	r1, r4
 8008d80:	ee18 0a10 	vmov	r0, s16
 8008d84:	463a      	mov	r2, r7
 8008d86:	f000 fc45 	bl	8009614 <__lshift>
 8008d8a:	1bed      	subs	r5, r5, r7
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	f100 0914 	add.w	r9, r0, #20
 8008d92:	f04f 0a00 	mov.w	sl, #0
 8008d96:	e7ae      	b.n	8008cf6 <__gethex+0x202>
 8008d98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d9c:	42a8      	cmp	r0, r5
 8008d9e:	dd72      	ble.n	8008e86 <__gethex+0x392>
 8008da0:	1b45      	subs	r5, r0, r5
 8008da2:	42ae      	cmp	r6, r5
 8008da4:	dc36      	bgt.n	8008e14 <__gethex+0x320>
 8008da6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d02a      	beq.n	8008e04 <__gethex+0x310>
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d02c      	beq.n	8008e0c <__gethex+0x318>
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d11c      	bne.n	8008df0 <__gethex+0x2fc>
 8008db6:	42ae      	cmp	r6, r5
 8008db8:	d11a      	bne.n	8008df0 <__gethex+0x2fc>
 8008dba:	2e01      	cmp	r6, #1
 8008dbc:	d112      	bne.n	8008de4 <__gethex+0x2f0>
 8008dbe:	9a04      	ldr	r2, [sp, #16]
 8008dc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	6123      	str	r3, [r4, #16]
 8008dca:	f8c9 3000 	str.w	r3, [r9]
 8008dce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dd0:	2762      	movs	r7, #98	; 0x62
 8008dd2:	601c      	str	r4, [r3, #0]
 8008dd4:	e723      	b.n	8008c1e <__gethex+0x12a>
 8008dd6:	bf00      	nop
 8008dd8:	0800bc00 	.word	0x0800bc00
 8008ddc:	0800bb88 	.word	0x0800bb88
 8008de0:	0800bb99 	.word	0x0800bb99
 8008de4:	1e71      	subs	r1, r6, #1
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fe58 	bl	8009a9c <__any_on>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d1e6      	bne.n	8008dbe <__gethex+0x2ca>
 8008df0:	ee18 0a10 	vmov	r0, s16
 8008df4:	4621      	mov	r1, r4
 8008df6:	f000 f9f1 	bl	80091dc <_Bfree>
 8008dfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	2750      	movs	r7, #80	; 0x50
 8008e02:	e70c      	b.n	8008c1e <__gethex+0x12a>
 8008e04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1f2      	bne.n	8008df0 <__gethex+0x2fc>
 8008e0a:	e7d8      	b.n	8008dbe <__gethex+0x2ca>
 8008e0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1d5      	bne.n	8008dbe <__gethex+0x2ca>
 8008e12:	e7ed      	b.n	8008df0 <__gethex+0x2fc>
 8008e14:	1e6f      	subs	r7, r5, #1
 8008e16:	f1ba 0f00 	cmp.w	sl, #0
 8008e1a:	d131      	bne.n	8008e80 <__gethex+0x38c>
 8008e1c:	b127      	cbz	r7, 8008e28 <__gethex+0x334>
 8008e1e:	4639      	mov	r1, r7
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 fe3b 	bl	8009a9c <__any_on>
 8008e26:	4682      	mov	sl, r0
 8008e28:	117b      	asrs	r3, r7, #5
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008e30:	f007 071f 	and.w	r7, r7, #31
 8008e34:	fa01 f707 	lsl.w	r7, r1, r7
 8008e38:	421f      	tst	r7, r3
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	bf18      	it	ne
 8008e40:	f04a 0a02 	orrne.w	sl, sl, #2
 8008e44:	1b76      	subs	r6, r6, r5
 8008e46:	f7ff fded 	bl	8008a24 <rshift>
 8008e4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e4e:	2702      	movs	r7, #2
 8008e50:	f1ba 0f00 	cmp.w	sl, #0
 8008e54:	d048      	beq.n	8008ee8 <__gethex+0x3f4>
 8008e56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d015      	beq.n	8008e8a <__gethex+0x396>
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d017      	beq.n	8008e92 <__gethex+0x39e>
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d109      	bne.n	8008e7a <__gethex+0x386>
 8008e66:	f01a 0f02 	tst.w	sl, #2
 8008e6a:	d006      	beq.n	8008e7a <__gethex+0x386>
 8008e6c:	f8d9 0000 	ldr.w	r0, [r9]
 8008e70:	ea4a 0a00 	orr.w	sl, sl, r0
 8008e74:	f01a 0f01 	tst.w	sl, #1
 8008e78:	d10e      	bne.n	8008e98 <__gethex+0x3a4>
 8008e7a:	f047 0710 	orr.w	r7, r7, #16
 8008e7e:	e033      	b.n	8008ee8 <__gethex+0x3f4>
 8008e80:	f04f 0a01 	mov.w	sl, #1
 8008e84:	e7d0      	b.n	8008e28 <__gethex+0x334>
 8008e86:	2701      	movs	r7, #1
 8008e88:	e7e2      	b.n	8008e50 <__gethex+0x35c>
 8008e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e8c:	f1c3 0301 	rsb	r3, r3, #1
 8008e90:	9315      	str	r3, [sp, #84]	; 0x54
 8008e92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0f0      	beq.n	8008e7a <__gethex+0x386>
 8008e98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e9c:	f104 0314 	add.w	r3, r4, #20
 8008ea0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ea4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ea8:	f04f 0c00 	mov.w	ip, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008eb6:	d01c      	beq.n	8008ef2 <__gethex+0x3fe>
 8008eb8:	3201      	adds	r2, #1
 8008eba:	6002      	str	r2, [r0, #0]
 8008ebc:	2f02      	cmp	r7, #2
 8008ebe:	f104 0314 	add.w	r3, r4, #20
 8008ec2:	d13f      	bne.n	8008f44 <__gethex+0x450>
 8008ec4:	f8d8 2000 	ldr.w	r2, [r8]
 8008ec8:	3a01      	subs	r2, #1
 8008eca:	42b2      	cmp	r2, r6
 8008ecc:	d10a      	bne.n	8008ee4 <__gethex+0x3f0>
 8008ece:	1171      	asrs	r1, r6, #5
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ed6:	f006 061f 	and.w	r6, r6, #31
 8008eda:	fa02 f606 	lsl.w	r6, r2, r6
 8008ede:	421e      	tst	r6, r3
 8008ee0:	bf18      	it	ne
 8008ee2:	4617      	movne	r7, r2
 8008ee4:	f047 0720 	orr.w	r7, r7, #32
 8008ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008eea:	601c      	str	r4, [r3, #0]
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	601d      	str	r5, [r3, #0]
 8008ef0:	e695      	b.n	8008c1e <__gethex+0x12a>
 8008ef2:	4299      	cmp	r1, r3
 8008ef4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ef8:	d8d8      	bhi.n	8008eac <__gethex+0x3b8>
 8008efa:	68a3      	ldr	r3, [r4, #8]
 8008efc:	459b      	cmp	fp, r3
 8008efe:	db19      	blt.n	8008f34 <__gethex+0x440>
 8008f00:	6861      	ldr	r1, [r4, #4]
 8008f02:	ee18 0a10 	vmov	r0, s16
 8008f06:	3101      	adds	r1, #1
 8008f08:	f000 f928 	bl	800915c <_Balloc>
 8008f0c:	4681      	mov	r9, r0
 8008f0e:	b918      	cbnz	r0, 8008f18 <__gethex+0x424>
 8008f10:	4b1a      	ldr	r3, [pc, #104]	; (8008f7c <__gethex+0x488>)
 8008f12:	4602      	mov	r2, r0
 8008f14:	2184      	movs	r1, #132	; 0x84
 8008f16:	e6a8      	b.n	8008c6a <__gethex+0x176>
 8008f18:	6922      	ldr	r2, [r4, #16]
 8008f1a:	3202      	adds	r2, #2
 8008f1c:	f104 010c 	add.w	r1, r4, #12
 8008f20:	0092      	lsls	r2, r2, #2
 8008f22:	300c      	adds	r0, #12
 8008f24:	f000 f90c 	bl	8009140 <memcpy>
 8008f28:	4621      	mov	r1, r4
 8008f2a:	ee18 0a10 	vmov	r0, s16
 8008f2e:	f000 f955 	bl	80091dc <_Bfree>
 8008f32:	464c      	mov	r4, r9
 8008f34:	6923      	ldr	r3, [r4, #16]
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f3c:	6122      	str	r2, [r4, #16]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	615a      	str	r2, [r3, #20]
 8008f42:	e7bb      	b.n	8008ebc <__gethex+0x3c8>
 8008f44:	6922      	ldr	r2, [r4, #16]
 8008f46:	455a      	cmp	r2, fp
 8008f48:	dd0b      	ble.n	8008f62 <__gethex+0x46e>
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f7ff fd69 	bl	8008a24 <rshift>
 8008f52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f56:	3501      	adds	r5, #1
 8008f58:	42ab      	cmp	r3, r5
 8008f5a:	f6ff aed0 	blt.w	8008cfe <__gethex+0x20a>
 8008f5e:	2701      	movs	r7, #1
 8008f60:	e7c0      	b.n	8008ee4 <__gethex+0x3f0>
 8008f62:	f016 061f 	ands.w	r6, r6, #31
 8008f66:	d0fa      	beq.n	8008f5e <__gethex+0x46a>
 8008f68:	4453      	add	r3, sl
 8008f6a:	f1c6 0620 	rsb	r6, r6, #32
 8008f6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f72:	f000 f9e5 	bl	8009340 <__hi0bits>
 8008f76:	42b0      	cmp	r0, r6
 8008f78:	dbe7      	blt.n	8008f4a <__gethex+0x456>
 8008f7a:	e7f0      	b.n	8008f5e <__gethex+0x46a>
 8008f7c:	0800bb88 	.word	0x0800bb88

08008f80 <L_shift>:
 8008f80:	f1c2 0208 	rsb	r2, r2, #8
 8008f84:	0092      	lsls	r2, r2, #2
 8008f86:	b570      	push	{r4, r5, r6, lr}
 8008f88:	f1c2 0620 	rsb	r6, r2, #32
 8008f8c:	6843      	ldr	r3, [r0, #4]
 8008f8e:	6804      	ldr	r4, [r0, #0]
 8008f90:	fa03 f506 	lsl.w	r5, r3, r6
 8008f94:	432c      	orrs	r4, r5
 8008f96:	40d3      	lsrs	r3, r2
 8008f98:	6004      	str	r4, [r0, #0]
 8008f9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f9e:	4288      	cmp	r0, r1
 8008fa0:	d3f4      	bcc.n	8008f8c <L_shift+0xc>
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}

08008fa4 <__match>:
 8008fa4:	b530      	push	{r4, r5, lr}
 8008fa6:	6803      	ldr	r3, [r0, #0]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fae:	b914      	cbnz	r4, 8008fb6 <__match+0x12>
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	bd30      	pop	{r4, r5, pc}
 8008fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008fbe:	2d19      	cmp	r5, #25
 8008fc0:	bf98      	it	ls
 8008fc2:	3220      	addls	r2, #32
 8008fc4:	42a2      	cmp	r2, r4
 8008fc6:	d0f0      	beq.n	8008faa <__match+0x6>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e7f3      	b.n	8008fb4 <__match+0x10>

08008fcc <__hexnan>:
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	680b      	ldr	r3, [r1, #0]
 8008fd2:	115e      	asrs	r6, r3, #5
 8008fd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008fd8:	f013 031f 	ands.w	r3, r3, #31
 8008fdc:	b087      	sub	sp, #28
 8008fde:	bf18      	it	ne
 8008fe0:	3604      	addne	r6, #4
 8008fe2:	2500      	movs	r5, #0
 8008fe4:	1f37      	subs	r7, r6, #4
 8008fe6:	4690      	mov	r8, r2
 8008fe8:	6802      	ldr	r2, [r0, #0]
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	4682      	mov	sl, r0
 8008fee:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ff2:	46b9      	mov	r9, r7
 8008ff4:	463c      	mov	r4, r7
 8008ff6:	9502      	str	r5, [sp, #8]
 8008ff8:	46ab      	mov	fp, r5
 8008ffa:	7851      	ldrb	r1, [r2, #1]
 8008ffc:	1c53      	adds	r3, r2, #1
 8008ffe:	9303      	str	r3, [sp, #12]
 8009000:	b341      	cbz	r1, 8009054 <__hexnan+0x88>
 8009002:	4608      	mov	r0, r1
 8009004:	9205      	str	r2, [sp, #20]
 8009006:	9104      	str	r1, [sp, #16]
 8009008:	f7ff fd5e 	bl	8008ac8 <__hexdig_fun>
 800900c:	2800      	cmp	r0, #0
 800900e:	d14f      	bne.n	80090b0 <__hexnan+0xe4>
 8009010:	9904      	ldr	r1, [sp, #16]
 8009012:	9a05      	ldr	r2, [sp, #20]
 8009014:	2920      	cmp	r1, #32
 8009016:	d818      	bhi.n	800904a <__hexnan+0x7e>
 8009018:	9b02      	ldr	r3, [sp, #8]
 800901a:	459b      	cmp	fp, r3
 800901c:	dd13      	ble.n	8009046 <__hexnan+0x7a>
 800901e:	454c      	cmp	r4, r9
 8009020:	d206      	bcs.n	8009030 <__hexnan+0x64>
 8009022:	2d07      	cmp	r5, #7
 8009024:	dc04      	bgt.n	8009030 <__hexnan+0x64>
 8009026:	462a      	mov	r2, r5
 8009028:	4649      	mov	r1, r9
 800902a:	4620      	mov	r0, r4
 800902c:	f7ff ffa8 	bl	8008f80 <L_shift>
 8009030:	4544      	cmp	r4, r8
 8009032:	d950      	bls.n	80090d6 <__hexnan+0x10a>
 8009034:	2300      	movs	r3, #0
 8009036:	f1a4 0904 	sub.w	r9, r4, #4
 800903a:	f844 3c04 	str.w	r3, [r4, #-4]
 800903e:	f8cd b008 	str.w	fp, [sp, #8]
 8009042:	464c      	mov	r4, r9
 8009044:	461d      	mov	r5, r3
 8009046:	9a03      	ldr	r2, [sp, #12]
 8009048:	e7d7      	b.n	8008ffa <__hexnan+0x2e>
 800904a:	2929      	cmp	r1, #41	; 0x29
 800904c:	d156      	bne.n	80090fc <__hexnan+0x130>
 800904e:	3202      	adds	r2, #2
 8009050:	f8ca 2000 	str.w	r2, [sl]
 8009054:	f1bb 0f00 	cmp.w	fp, #0
 8009058:	d050      	beq.n	80090fc <__hexnan+0x130>
 800905a:	454c      	cmp	r4, r9
 800905c:	d206      	bcs.n	800906c <__hexnan+0xa0>
 800905e:	2d07      	cmp	r5, #7
 8009060:	dc04      	bgt.n	800906c <__hexnan+0xa0>
 8009062:	462a      	mov	r2, r5
 8009064:	4649      	mov	r1, r9
 8009066:	4620      	mov	r0, r4
 8009068:	f7ff ff8a 	bl	8008f80 <L_shift>
 800906c:	4544      	cmp	r4, r8
 800906e:	d934      	bls.n	80090da <__hexnan+0x10e>
 8009070:	f1a8 0204 	sub.w	r2, r8, #4
 8009074:	4623      	mov	r3, r4
 8009076:	f853 1b04 	ldr.w	r1, [r3], #4
 800907a:	f842 1f04 	str.w	r1, [r2, #4]!
 800907e:	429f      	cmp	r7, r3
 8009080:	d2f9      	bcs.n	8009076 <__hexnan+0xaa>
 8009082:	1b3b      	subs	r3, r7, r4
 8009084:	f023 0303 	bic.w	r3, r3, #3
 8009088:	3304      	adds	r3, #4
 800908a:	3401      	adds	r4, #1
 800908c:	3e03      	subs	r6, #3
 800908e:	42b4      	cmp	r4, r6
 8009090:	bf88      	it	hi
 8009092:	2304      	movhi	r3, #4
 8009094:	4443      	add	r3, r8
 8009096:	2200      	movs	r2, #0
 8009098:	f843 2b04 	str.w	r2, [r3], #4
 800909c:	429f      	cmp	r7, r3
 800909e:	d2fb      	bcs.n	8009098 <__hexnan+0xcc>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	b91b      	cbnz	r3, 80090ac <__hexnan+0xe0>
 80090a4:	4547      	cmp	r7, r8
 80090a6:	d127      	bne.n	80090f8 <__hexnan+0x12c>
 80090a8:	2301      	movs	r3, #1
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	2005      	movs	r0, #5
 80090ae:	e026      	b.n	80090fe <__hexnan+0x132>
 80090b0:	3501      	adds	r5, #1
 80090b2:	2d08      	cmp	r5, #8
 80090b4:	f10b 0b01 	add.w	fp, fp, #1
 80090b8:	dd06      	ble.n	80090c8 <__hexnan+0xfc>
 80090ba:	4544      	cmp	r4, r8
 80090bc:	d9c3      	bls.n	8009046 <__hexnan+0x7a>
 80090be:	2300      	movs	r3, #0
 80090c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80090c4:	2501      	movs	r5, #1
 80090c6:	3c04      	subs	r4, #4
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	f000 000f 	and.w	r0, r0, #15
 80090ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80090d2:	6022      	str	r2, [r4, #0]
 80090d4:	e7b7      	b.n	8009046 <__hexnan+0x7a>
 80090d6:	2508      	movs	r5, #8
 80090d8:	e7b5      	b.n	8009046 <__hexnan+0x7a>
 80090da:	9b01      	ldr	r3, [sp, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d0df      	beq.n	80090a0 <__hexnan+0xd4>
 80090e0:	f04f 32ff 	mov.w	r2, #4294967295
 80090e4:	f1c3 0320 	rsb	r3, r3, #32
 80090e8:	fa22 f303 	lsr.w	r3, r2, r3
 80090ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80090f0:	401a      	ands	r2, r3
 80090f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80090f6:	e7d3      	b.n	80090a0 <__hexnan+0xd4>
 80090f8:	3f04      	subs	r7, #4
 80090fa:	e7d1      	b.n	80090a0 <__hexnan+0xd4>
 80090fc:	2004      	movs	r0, #4
 80090fe:	b007      	add	sp, #28
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009104 <_localeconv_r>:
 8009104:	4800      	ldr	r0, [pc, #0]	; (8009108 <_localeconv_r+0x4>)
 8009106:	4770      	bx	lr
 8009108:	20000188 	.word	0x20000188

0800910c <malloc>:
 800910c:	4b02      	ldr	r3, [pc, #8]	; (8009118 <malloc+0xc>)
 800910e:	4601      	mov	r1, r0
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	f000 bd67 	b.w	8009be4 <_malloc_r>
 8009116:	bf00      	nop
 8009118:	20000030 	.word	0x20000030

0800911c <__ascii_mbtowc>:
 800911c:	b082      	sub	sp, #8
 800911e:	b901      	cbnz	r1, 8009122 <__ascii_mbtowc+0x6>
 8009120:	a901      	add	r1, sp, #4
 8009122:	b142      	cbz	r2, 8009136 <__ascii_mbtowc+0x1a>
 8009124:	b14b      	cbz	r3, 800913a <__ascii_mbtowc+0x1e>
 8009126:	7813      	ldrb	r3, [r2, #0]
 8009128:	600b      	str	r3, [r1, #0]
 800912a:	7812      	ldrb	r2, [r2, #0]
 800912c:	1e10      	subs	r0, r2, #0
 800912e:	bf18      	it	ne
 8009130:	2001      	movne	r0, #1
 8009132:	b002      	add	sp, #8
 8009134:	4770      	bx	lr
 8009136:	4610      	mov	r0, r2
 8009138:	e7fb      	b.n	8009132 <__ascii_mbtowc+0x16>
 800913a:	f06f 0001 	mvn.w	r0, #1
 800913e:	e7f8      	b.n	8009132 <__ascii_mbtowc+0x16>

08009140 <memcpy>:
 8009140:	440a      	add	r2, r1
 8009142:	4291      	cmp	r1, r2
 8009144:	f100 33ff 	add.w	r3, r0, #4294967295
 8009148:	d100      	bne.n	800914c <memcpy+0xc>
 800914a:	4770      	bx	lr
 800914c:	b510      	push	{r4, lr}
 800914e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009156:	4291      	cmp	r1, r2
 8009158:	d1f9      	bne.n	800914e <memcpy+0xe>
 800915a:	bd10      	pop	{r4, pc}

0800915c <_Balloc>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009160:	4604      	mov	r4, r0
 8009162:	460d      	mov	r5, r1
 8009164:	b976      	cbnz	r6, 8009184 <_Balloc+0x28>
 8009166:	2010      	movs	r0, #16
 8009168:	f7ff ffd0 	bl	800910c <malloc>
 800916c:	4602      	mov	r2, r0
 800916e:	6260      	str	r0, [r4, #36]	; 0x24
 8009170:	b920      	cbnz	r0, 800917c <_Balloc+0x20>
 8009172:	4b18      	ldr	r3, [pc, #96]	; (80091d4 <_Balloc+0x78>)
 8009174:	4818      	ldr	r0, [pc, #96]	; (80091d8 <_Balloc+0x7c>)
 8009176:	2166      	movs	r1, #102	; 0x66
 8009178:	f000 ff40 	bl	8009ffc <__assert_func>
 800917c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009180:	6006      	str	r6, [r0, #0]
 8009182:	60c6      	str	r6, [r0, #12]
 8009184:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009186:	68f3      	ldr	r3, [r6, #12]
 8009188:	b183      	cbz	r3, 80091ac <_Balloc+0x50>
 800918a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009192:	b9b8      	cbnz	r0, 80091c4 <_Balloc+0x68>
 8009194:	2101      	movs	r1, #1
 8009196:	fa01 f605 	lsl.w	r6, r1, r5
 800919a:	1d72      	adds	r2, r6, #5
 800919c:	0092      	lsls	r2, r2, #2
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 fc9d 	bl	8009ade <_calloc_r>
 80091a4:	b160      	cbz	r0, 80091c0 <_Balloc+0x64>
 80091a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091aa:	e00e      	b.n	80091ca <_Balloc+0x6e>
 80091ac:	2221      	movs	r2, #33	; 0x21
 80091ae:	2104      	movs	r1, #4
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fc94 	bl	8009ade <_calloc_r>
 80091b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091b8:	60f0      	str	r0, [r6, #12]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e4      	bne.n	800918a <_Balloc+0x2e>
 80091c0:	2000      	movs	r0, #0
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	6802      	ldr	r2, [r0, #0]
 80091c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091ca:	2300      	movs	r3, #0
 80091cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091d0:	e7f7      	b.n	80091c2 <_Balloc+0x66>
 80091d2:	bf00      	nop
 80091d4:	0800bb16 	.word	0x0800bb16
 80091d8:	0800bc14 	.word	0x0800bc14

080091dc <_Bfree>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091e0:	4605      	mov	r5, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	b976      	cbnz	r6, 8009204 <_Bfree+0x28>
 80091e6:	2010      	movs	r0, #16
 80091e8:	f7ff ff90 	bl	800910c <malloc>
 80091ec:	4602      	mov	r2, r0
 80091ee:	6268      	str	r0, [r5, #36]	; 0x24
 80091f0:	b920      	cbnz	r0, 80091fc <_Bfree+0x20>
 80091f2:	4b09      	ldr	r3, [pc, #36]	; (8009218 <_Bfree+0x3c>)
 80091f4:	4809      	ldr	r0, [pc, #36]	; (800921c <_Bfree+0x40>)
 80091f6:	218a      	movs	r1, #138	; 0x8a
 80091f8:	f000 ff00 	bl	8009ffc <__assert_func>
 80091fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009200:	6006      	str	r6, [r0, #0]
 8009202:	60c6      	str	r6, [r0, #12]
 8009204:	b13c      	cbz	r4, 8009216 <_Bfree+0x3a>
 8009206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009208:	6862      	ldr	r2, [r4, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009210:	6021      	str	r1, [r4, #0]
 8009212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	0800bb16 	.word	0x0800bb16
 800921c:	0800bc14 	.word	0x0800bc14

08009220 <__multadd>:
 8009220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009224:	690d      	ldr	r5, [r1, #16]
 8009226:	4607      	mov	r7, r0
 8009228:	460c      	mov	r4, r1
 800922a:	461e      	mov	r6, r3
 800922c:	f101 0c14 	add.w	ip, r1, #20
 8009230:	2000      	movs	r0, #0
 8009232:	f8dc 3000 	ldr.w	r3, [ip]
 8009236:	b299      	uxth	r1, r3
 8009238:	fb02 6101 	mla	r1, r2, r1, r6
 800923c:	0c1e      	lsrs	r6, r3, #16
 800923e:	0c0b      	lsrs	r3, r1, #16
 8009240:	fb02 3306 	mla	r3, r2, r6, r3
 8009244:	b289      	uxth	r1, r1
 8009246:	3001      	adds	r0, #1
 8009248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800924c:	4285      	cmp	r5, r0
 800924e:	f84c 1b04 	str.w	r1, [ip], #4
 8009252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009256:	dcec      	bgt.n	8009232 <__multadd+0x12>
 8009258:	b30e      	cbz	r6, 800929e <__multadd+0x7e>
 800925a:	68a3      	ldr	r3, [r4, #8]
 800925c:	42ab      	cmp	r3, r5
 800925e:	dc19      	bgt.n	8009294 <__multadd+0x74>
 8009260:	6861      	ldr	r1, [r4, #4]
 8009262:	4638      	mov	r0, r7
 8009264:	3101      	adds	r1, #1
 8009266:	f7ff ff79 	bl	800915c <_Balloc>
 800926a:	4680      	mov	r8, r0
 800926c:	b928      	cbnz	r0, 800927a <__multadd+0x5a>
 800926e:	4602      	mov	r2, r0
 8009270:	4b0c      	ldr	r3, [pc, #48]	; (80092a4 <__multadd+0x84>)
 8009272:	480d      	ldr	r0, [pc, #52]	; (80092a8 <__multadd+0x88>)
 8009274:	21b5      	movs	r1, #181	; 0xb5
 8009276:	f000 fec1 	bl	8009ffc <__assert_func>
 800927a:	6922      	ldr	r2, [r4, #16]
 800927c:	3202      	adds	r2, #2
 800927e:	f104 010c 	add.w	r1, r4, #12
 8009282:	0092      	lsls	r2, r2, #2
 8009284:	300c      	adds	r0, #12
 8009286:	f7ff ff5b 	bl	8009140 <memcpy>
 800928a:	4621      	mov	r1, r4
 800928c:	4638      	mov	r0, r7
 800928e:	f7ff ffa5 	bl	80091dc <_Bfree>
 8009292:	4644      	mov	r4, r8
 8009294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009298:	3501      	adds	r5, #1
 800929a:	615e      	str	r6, [r3, #20]
 800929c:	6125      	str	r5, [r4, #16]
 800929e:	4620      	mov	r0, r4
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a4:	0800bb88 	.word	0x0800bb88
 80092a8:	0800bc14 	.word	0x0800bc14

080092ac <__s2b>:
 80092ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b0:	460c      	mov	r4, r1
 80092b2:	4615      	mov	r5, r2
 80092b4:	461f      	mov	r7, r3
 80092b6:	2209      	movs	r2, #9
 80092b8:	3308      	adds	r3, #8
 80092ba:	4606      	mov	r6, r0
 80092bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80092c0:	2100      	movs	r1, #0
 80092c2:	2201      	movs	r2, #1
 80092c4:	429a      	cmp	r2, r3
 80092c6:	db09      	blt.n	80092dc <__s2b+0x30>
 80092c8:	4630      	mov	r0, r6
 80092ca:	f7ff ff47 	bl	800915c <_Balloc>
 80092ce:	b940      	cbnz	r0, 80092e2 <__s2b+0x36>
 80092d0:	4602      	mov	r2, r0
 80092d2:	4b19      	ldr	r3, [pc, #100]	; (8009338 <__s2b+0x8c>)
 80092d4:	4819      	ldr	r0, [pc, #100]	; (800933c <__s2b+0x90>)
 80092d6:	21ce      	movs	r1, #206	; 0xce
 80092d8:	f000 fe90 	bl	8009ffc <__assert_func>
 80092dc:	0052      	lsls	r2, r2, #1
 80092de:	3101      	adds	r1, #1
 80092e0:	e7f0      	b.n	80092c4 <__s2b+0x18>
 80092e2:	9b08      	ldr	r3, [sp, #32]
 80092e4:	6143      	str	r3, [r0, #20]
 80092e6:	2d09      	cmp	r5, #9
 80092e8:	f04f 0301 	mov.w	r3, #1
 80092ec:	6103      	str	r3, [r0, #16]
 80092ee:	dd16      	ble.n	800931e <__s2b+0x72>
 80092f0:	f104 0909 	add.w	r9, r4, #9
 80092f4:	46c8      	mov	r8, r9
 80092f6:	442c      	add	r4, r5
 80092f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80092fc:	4601      	mov	r1, r0
 80092fe:	3b30      	subs	r3, #48	; 0x30
 8009300:	220a      	movs	r2, #10
 8009302:	4630      	mov	r0, r6
 8009304:	f7ff ff8c 	bl	8009220 <__multadd>
 8009308:	45a0      	cmp	r8, r4
 800930a:	d1f5      	bne.n	80092f8 <__s2b+0x4c>
 800930c:	f1a5 0408 	sub.w	r4, r5, #8
 8009310:	444c      	add	r4, r9
 8009312:	1b2d      	subs	r5, r5, r4
 8009314:	1963      	adds	r3, r4, r5
 8009316:	42bb      	cmp	r3, r7
 8009318:	db04      	blt.n	8009324 <__s2b+0x78>
 800931a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931e:	340a      	adds	r4, #10
 8009320:	2509      	movs	r5, #9
 8009322:	e7f6      	b.n	8009312 <__s2b+0x66>
 8009324:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009328:	4601      	mov	r1, r0
 800932a:	3b30      	subs	r3, #48	; 0x30
 800932c:	220a      	movs	r2, #10
 800932e:	4630      	mov	r0, r6
 8009330:	f7ff ff76 	bl	8009220 <__multadd>
 8009334:	e7ee      	b.n	8009314 <__s2b+0x68>
 8009336:	bf00      	nop
 8009338:	0800bb88 	.word	0x0800bb88
 800933c:	0800bc14 	.word	0x0800bc14

08009340 <__hi0bits>:
 8009340:	0c03      	lsrs	r3, r0, #16
 8009342:	041b      	lsls	r3, r3, #16
 8009344:	b9d3      	cbnz	r3, 800937c <__hi0bits+0x3c>
 8009346:	0400      	lsls	r0, r0, #16
 8009348:	2310      	movs	r3, #16
 800934a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800934e:	bf04      	itt	eq
 8009350:	0200      	lsleq	r0, r0, #8
 8009352:	3308      	addeq	r3, #8
 8009354:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009358:	bf04      	itt	eq
 800935a:	0100      	lsleq	r0, r0, #4
 800935c:	3304      	addeq	r3, #4
 800935e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009362:	bf04      	itt	eq
 8009364:	0080      	lsleq	r0, r0, #2
 8009366:	3302      	addeq	r3, #2
 8009368:	2800      	cmp	r0, #0
 800936a:	db05      	blt.n	8009378 <__hi0bits+0x38>
 800936c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009370:	f103 0301 	add.w	r3, r3, #1
 8009374:	bf08      	it	eq
 8009376:	2320      	moveq	r3, #32
 8009378:	4618      	mov	r0, r3
 800937a:	4770      	bx	lr
 800937c:	2300      	movs	r3, #0
 800937e:	e7e4      	b.n	800934a <__hi0bits+0xa>

08009380 <__lo0bits>:
 8009380:	6803      	ldr	r3, [r0, #0]
 8009382:	f013 0207 	ands.w	r2, r3, #7
 8009386:	4601      	mov	r1, r0
 8009388:	d00b      	beq.n	80093a2 <__lo0bits+0x22>
 800938a:	07da      	lsls	r2, r3, #31
 800938c:	d423      	bmi.n	80093d6 <__lo0bits+0x56>
 800938e:	0798      	lsls	r0, r3, #30
 8009390:	bf49      	itett	mi
 8009392:	085b      	lsrmi	r3, r3, #1
 8009394:	089b      	lsrpl	r3, r3, #2
 8009396:	2001      	movmi	r0, #1
 8009398:	600b      	strmi	r3, [r1, #0]
 800939a:	bf5c      	itt	pl
 800939c:	600b      	strpl	r3, [r1, #0]
 800939e:	2002      	movpl	r0, #2
 80093a0:	4770      	bx	lr
 80093a2:	b298      	uxth	r0, r3
 80093a4:	b9a8      	cbnz	r0, 80093d2 <__lo0bits+0x52>
 80093a6:	0c1b      	lsrs	r3, r3, #16
 80093a8:	2010      	movs	r0, #16
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	b90a      	cbnz	r2, 80093b2 <__lo0bits+0x32>
 80093ae:	3008      	adds	r0, #8
 80093b0:	0a1b      	lsrs	r3, r3, #8
 80093b2:	071a      	lsls	r2, r3, #28
 80093b4:	bf04      	itt	eq
 80093b6:	091b      	lsreq	r3, r3, #4
 80093b8:	3004      	addeq	r0, #4
 80093ba:	079a      	lsls	r2, r3, #30
 80093bc:	bf04      	itt	eq
 80093be:	089b      	lsreq	r3, r3, #2
 80093c0:	3002      	addeq	r0, #2
 80093c2:	07da      	lsls	r2, r3, #31
 80093c4:	d403      	bmi.n	80093ce <__lo0bits+0x4e>
 80093c6:	085b      	lsrs	r3, r3, #1
 80093c8:	f100 0001 	add.w	r0, r0, #1
 80093cc:	d005      	beq.n	80093da <__lo0bits+0x5a>
 80093ce:	600b      	str	r3, [r1, #0]
 80093d0:	4770      	bx	lr
 80093d2:	4610      	mov	r0, r2
 80093d4:	e7e9      	b.n	80093aa <__lo0bits+0x2a>
 80093d6:	2000      	movs	r0, #0
 80093d8:	4770      	bx	lr
 80093da:	2020      	movs	r0, #32
 80093dc:	4770      	bx	lr
	...

080093e0 <__i2b>:
 80093e0:	b510      	push	{r4, lr}
 80093e2:	460c      	mov	r4, r1
 80093e4:	2101      	movs	r1, #1
 80093e6:	f7ff feb9 	bl	800915c <_Balloc>
 80093ea:	4602      	mov	r2, r0
 80093ec:	b928      	cbnz	r0, 80093fa <__i2b+0x1a>
 80093ee:	4b05      	ldr	r3, [pc, #20]	; (8009404 <__i2b+0x24>)
 80093f0:	4805      	ldr	r0, [pc, #20]	; (8009408 <__i2b+0x28>)
 80093f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093f6:	f000 fe01 	bl	8009ffc <__assert_func>
 80093fa:	2301      	movs	r3, #1
 80093fc:	6144      	str	r4, [r0, #20]
 80093fe:	6103      	str	r3, [r0, #16]
 8009400:	bd10      	pop	{r4, pc}
 8009402:	bf00      	nop
 8009404:	0800bb88 	.word	0x0800bb88
 8009408:	0800bc14 	.word	0x0800bc14

0800940c <__multiply>:
 800940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	4691      	mov	r9, r2
 8009412:	690a      	ldr	r2, [r1, #16]
 8009414:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009418:	429a      	cmp	r2, r3
 800941a:	bfb8      	it	lt
 800941c:	460b      	movlt	r3, r1
 800941e:	460c      	mov	r4, r1
 8009420:	bfbc      	itt	lt
 8009422:	464c      	movlt	r4, r9
 8009424:	4699      	movlt	r9, r3
 8009426:	6927      	ldr	r7, [r4, #16]
 8009428:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800942c:	68a3      	ldr	r3, [r4, #8]
 800942e:	6861      	ldr	r1, [r4, #4]
 8009430:	eb07 060a 	add.w	r6, r7, sl
 8009434:	42b3      	cmp	r3, r6
 8009436:	b085      	sub	sp, #20
 8009438:	bfb8      	it	lt
 800943a:	3101      	addlt	r1, #1
 800943c:	f7ff fe8e 	bl	800915c <_Balloc>
 8009440:	b930      	cbnz	r0, 8009450 <__multiply+0x44>
 8009442:	4602      	mov	r2, r0
 8009444:	4b44      	ldr	r3, [pc, #272]	; (8009558 <__multiply+0x14c>)
 8009446:	4845      	ldr	r0, [pc, #276]	; (800955c <__multiply+0x150>)
 8009448:	f240 115d 	movw	r1, #349	; 0x15d
 800944c:	f000 fdd6 	bl	8009ffc <__assert_func>
 8009450:	f100 0514 	add.w	r5, r0, #20
 8009454:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009458:	462b      	mov	r3, r5
 800945a:	2200      	movs	r2, #0
 800945c:	4543      	cmp	r3, r8
 800945e:	d321      	bcc.n	80094a4 <__multiply+0x98>
 8009460:	f104 0314 	add.w	r3, r4, #20
 8009464:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009468:	f109 0314 	add.w	r3, r9, #20
 800946c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009470:	9202      	str	r2, [sp, #8]
 8009472:	1b3a      	subs	r2, r7, r4
 8009474:	3a15      	subs	r2, #21
 8009476:	f022 0203 	bic.w	r2, r2, #3
 800947a:	3204      	adds	r2, #4
 800947c:	f104 0115 	add.w	r1, r4, #21
 8009480:	428f      	cmp	r7, r1
 8009482:	bf38      	it	cc
 8009484:	2204      	movcc	r2, #4
 8009486:	9201      	str	r2, [sp, #4]
 8009488:	9a02      	ldr	r2, [sp, #8]
 800948a:	9303      	str	r3, [sp, #12]
 800948c:	429a      	cmp	r2, r3
 800948e:	d80c      	bhi.n	80094aa <__multiply+0x9e>
 8009490:	2e00      	cmp	r6, #0
 8009492:	dd03      	ble.n	800949c <__multiply+0x90>
 8009494:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009498:	2b00      	cmp	r3, #0
 800949a:	d05a      	beq.n	8009552 <__multiply+0x146>
 800949c:	6106      	str	r6, [r0, #16]
 800949e:	b005      	add	sp, #20
 80094a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a4:	f843 2b04 	str.w	r2, [r3], #4
 80094a8:	e7d8      	b.n	800945c <__multiply+0x50>
 80094aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80094ae:	f1ba 0f00 	cmp.w	sl, #0
 80094b2:	d024      	beq.n	80094fe <__multiply+0xf2>
 80094b4:	f104 0e14 	add.w	lr, r4, #20
 80094b8:	46a9      	mov	r9, r5
 80094ba:	f04f 0c00 	mov.w	ip, #0
 80094be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094c2:	f8d9 1000 	ldr.w	r1, [r9]
 80094c6:	fa1f fb82 	uxth.w	fp, r2
 80094ca:	b289      	uxth	r1, r1
 80094cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80094d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094d4:	f8d9 2000 	ldr.w	r2, [r9]
 80094d8:	4461      	add	r1, ip
 80094da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094de:	fb0a c20b 	mla	r2, sl, fp, ip
 80094e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094e6:	b289      	uxth	r1, r1
 80094e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094ec:	4577      	cmp	r7, lr
 80094ee:	f849 1b04 	str.w	r1, [r9], #4
 80094f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094f6:	d8e2      	bhi.n	80094be <__multiply+0xb2>
 80094f8:	9a01      	ldr	r2, [sp, #4]
 80094fa:	f845 c002 	str.w	ip, [r5, r2]
 80094fe:	9a03      	ldr	r2, [sp, #12]
 8009500:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009504:	3304      	adds	r3, #4
 8009506:	f1b9 0f00 	cmp.w	r9, #0
 800950a:	d020      	beq.n	800954e <__multiply+0x142>
 800950c:	6829      	ldr	r1, [r5, #0]
 800950e:	f104 0c14 	add.w	ip, r4, #20
 8009512:	46ae      	mov	lr, r5
 8009514:	f04f 0a00 	mov.w	sl, #0
 8009518:	f8bc b000 	ldrh.w	fp, [ip]
 800951c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009520:	fb09 220b 	mla	r2, r9, fp, r2
 8009524:	4492      	add	sl, r2
 8009526:	b289      	uxth	r1, r1
 8009528:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800952c:	f84e 1b04 	str.w	r1, [lr], #4
 8009530:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009534:	f8be 1000 	ldrh.w	r1, [lr]
 8009538:	0c12      	lsrs	r2, r2, #16
 800953a:	fb09 1102 	mla	r1, r9, r2, r1
 800953e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009542:	4567      	cmp	r7, ip
 8009544:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009548:	d8e6      	bhi.n	8009518 <__multiply+0x10c>
 800954a:	9a01      	ldr	r2, [sp, #4]
 800954c:	50a9      	str	r1, [r5, r2]
 800954e:	3504      	adds	r5, #4
 8009550:	e79a      	b.n	8009488 <__multiply+0x7c>
 8009552:	3e01      	subs	r6, #1
 8009554:	e79c      	b.n	8009490 <__multiply+0x84>
 8009556:	bf00      	nop
 8009558:	0800bb88 	.word	0x0800bb88
 800955c:	0800bc14 	.word	0x0800bc14

08009560 <__pow5mult>:
 8009560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009564:	4615      	mov	r5, r2
 8009566:	f012 0203 	ands.w	r2, r2, #3
 800956a:	4606      	mov	r6, r0
 800956c:	460f      	mov	r7, r1
 800956e:	d007      	beq.n	8009580 <__pow5mult+0x20>
 8009570:	4c25      	ldr	r4, [pc, #148]	; (8009608 <__pow5mult+0xa8>)
 8009572:	3a01      	subs	r2, #1
 8009574:	2300      	movs	r3, #0
 8009576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800957a:	f7ff fe51 	bl	8009220 <__multadd>
 800957e:	4607      	mov	r7, r0
 8009580:	10ad      	asrs	r5, r5, #2
 8009582:	d03d      	beq.n	8009600 <__pow5mult+0xa0>
 8009584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009586:	b97c      	cbnz	r4, 80095a8 <__pow5mult+0x48>
 8009588:	2010      	movs	r0, #16
 800958a:	f7ff fdbf 	bl	800910c <malloc>
 800958e:	4602      	mov	r2, r0
 8009590:	6270      	str	r0, [r6, #36]	; 0x24
 8009592:	b928      	cbnz	r0, 80095a0 <__pow5mult+0x40>
 8009594:	4b1d      	ldr	r3, [pc, #116]	; (800960c <__pow5mult+0xac>)
 8009596:	481e      	ldr	r0, [pc, #120]	; (8009610 <__pow5mult+0xb0>)
 8009598:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800959c:	f000 fd2e 	bl	8009ffc <__assert_func>
 80095a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095a4:	6004      	str	r4, [r0, #0]
 80095a6:	60c4      	str	r4, [r0, #12]
 80095a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095b0:	b94c      	cbnz	r4, 80095c6 <__pow5mult+0x66>
 80095b2:	f240 2171 	movw	r1, #625	; 0x271
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7ff ff12 	bl	80093e0 <__i2b>
 80095bc:	2300      	movs	r3, #0
 80095be:	f8c8 0008 	str.w	r0, [r8, #8]
 80095c2:	4604      	mov	r4, r0
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	f04f 0900 	mov.w	r9, #0
 80095ca:	07eb      	lsls	r3, r5, #31
 80095cc:	d50a      	bpl.n	80095e4 <__pow5mult+0x84>
 80095ce:	4639      	mov	r1, r7
 80095d0:	4622      	mov	r2, r4
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ff1a 	bl	800940c <__multiply>
 80095d8:	4639      	mov	r1, r7
 80095da:	4680      	mov	r8, r0
 80095dc:	4630      	mov	r0, r6
 80095de:	f7ff fdfd 	bl	80091dc <_Bfree>
 80095e2:	4647      	mov	r7, r8
 80095e4:	106d      	asrs	r5, r5, #1
 80095e6:	d00b      	beq.n	8009600 <__pow5mult+0xa0>
 80095e8:	6820      	ldr	r0, [r4, #0]
 80095ea:	b938      	cbnz	r0, 80095fc <__pow5mult+0x9c>
 80095ec:	4622      	mov	r2, r4
 80095ee:	4621      	mov	r1, r4
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7ff ff0b 	bl	800940c <__multiply>
 80095f6:	6020      	str	r0, [r4, #0]
 80095f8:	f8c0 9000 	str.w	r9, [r0]
 80095fc:	4604      	mov	r4, r0
 80095fe:	e7e4      	b.n	80095ca <__pow5mult+0x6a>
 8009600:	4638      	mov	r0, r7
 8009602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009606:	bf00      	nop
 8009608:	0800bd60 	.word	0x0800bd60
 800960c:	0800bb16 	.word	0x0800bb16
 8009610:	0800bc14 	.word	0x0800bc14

08009614 <__lshift>:
 8009614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009618:	460c      	mov	r4, r1
 800961a:	6849      	ldr	r1, [r1, #4]
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009622:	68a3      	ldr	r3, [r4, #8]
 8009624:	4607      	mov	r7, r0
 8009626:	4691      	mov	r9, r2
 8009628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800962c:	f108 0601 	add.w	r6, r8, #1
 8009630:	42b3      	cmp	r3, r6
 8009632:	db0b      	blt.n	800964c <__lshift+0x38>
 8009634:	4638      	mov	r0, r7
 8009636:	f7ff fd91 	bl	800915c <_Balloc>
 800963a:	4605      	mov	r5, r0
 800963c:	b948      	cbnz	r0, 8009652 <__lshift+0x3e>
 800963e:	4602      	mov	r2, r0
 8009640:	4b2a      	ldr	r3, [pc, #168]	; (80096ec <__lshift+0xd8>)
 8009642:	482b      	ldr	r0, [pc, #172]	; (80096f0 <__lshift+0xdc>)
 8009644:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009648:	f000 fcd8 	bl	8009ffc <__assert_func>
 800964c:	3101      	adds	r1, #1
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	e7ee      	b.n	8009630 <__lshift+0x1c>
 8009652:	2300      	movs	r3, #0
 8009654:	f100 0114 	add.w	r1, r0, #20
 8009658:	f100 0210 	add.w	r2, r0, #16
 800965c:	4618      	mov	r0, r3
 800965e:	4553      	cmp	r3, sl
 8009660:	db37      	blt.n	80096d2 <__lshift+0xbe>
 8009662:	6920      	ldr	r0, [r4, #16]
 8009664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009668:	f104 0314 	add.w	r3, r4, #20
 800966c:	f019 091f 	ands.w	r9, r9, #31
 8009670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009674:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009678:	d02f      	beq.n	80096da <__lshift+0xc6>
 800967a:	f1c9 0e20 	rsb	lr, r9, #32
 800967e:	468a      	mov	sl, r1
 8009680:	f04f 0c00 	mov.w	ip, #0
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	fa02 f209 	lsl.w	r2, r2, r9
 800968a:	ea42 020c 	orr.w	r2, r2, ip
 800968e:	f84a 2b04 	str.w	r2, [sl], #4
 8009692:	f853 2b04 	ldr.w	r2, [r3], #4
 8009696:	4298      	cmp	r0, r3
 8009698:	fa22 fc0e 	lsr.w	ip, r2, lr
 800969c:	d8f2      	bhi.n	8009684 <__lshift+0x70>
 800969e:	1b03      	subs	r3, r0, r4
 80096a0:	3b15      	subs	r3, #21
 80096a2:	f023 0303 	bic.w	r3, r3, #3
 80096a6:	3304      	adds	r3, #4
 80096a8:	f104 0215 	add.w	r2, r4, #21
 80096ac:	4290      	cmp	r0, r2
 80096ae:	bf38      	it	cc
 80096b0:	2304      	movcc	r3, #4
 80096b2:	f841 c003 	str.w	ip, [r1, r3]
 80096b6:	f1bc 0f00 	cmp.w	ip, #0
 80096ba:	d001      	beq.n	80096c0 <__lshift+0xac>
 80096bc:	f108 0602 	add.w	r6, r8, #2
 80096c0:	3e01      	subs	r6, #1
 80096c2:	4638      	mov	r0, r7
 80096c4:	612e      	str	r6, [r5, #16]
 80096c6:	4621      	mov	r1, r4
 80096c8:	f7ff fd88 	bl	80091dc <_Bfree>
 80096cc:	4628      	mov	r0, r5
 80096ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80096d6:	3301      	adds	r3, #1
 80096d8:	e7c1      	b.n	800965e <__lshift+0x4a>
 80096da:	3904      	subs	r1, #4
 80096dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80096e4:	4298      	cmp	r0, r3
 80096e6:	d8f9      	bhi.n	80096dc <__lshift+0xc8>
 80096e8:	e7ea      	b.n	80096c0 <__lshift+0xac>
 80096ea:	bf00      	nop
 80096ec:	0800bb88 	.word	0x0800bb88
 80096f0:	0800bc14 	.word	0x0800bc14

080096f4 <__mcmp>:
 80096f4:	b530      	push	{r4, r5, lr}
 80096f6:	6902      	ldr	r2, [r0, #16]
 80096f8:	690c      	ldr	r4, [r1, #16]
 80096fa:	1b12      	subs	r2, r2, r4
 80096fc:	d10e      	bne.n	800971c <__mcmp+0x28>
 80096fe:	f100 0314 	add.w	r3, r0, #20
 8009702:	3114      	adds	r1, #20
 8009704:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009708:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800970c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009710:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009714:	42a5      	cmp	r5, r4
 8009716:	d003      	beq.n	8009720 <__mcmp+0x2c>
 8009718:	d305      	bcc.n	8009726 <__mcmp+0x32>
 800971a:	2201      	movs	r2, #1
 800971c:	4610      	mov	r0, r2
 800971e:	bd30      	pop	{r4, r5, pc}
 8009720:	4283      	cmp	r3, r0
 8009722:	d3f3      	bcc.n	800970c <__mcmp+0x18>
 8009724:	e7fa      	b.n	800971c <__mcmp+0x28>
 8009726:	f04f 32ff 	mov.w	r2, #4294967295
 800972a:	e7f7      	b.n	800971c <__mcmp+0x28>

0800972c <__mdiff>:
 800972c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	460c      	mov	r4, r1
 8009732:	4606      	mov	r6, r0
 8009734:	4611      	mov	r1, r2
 8009736:	4620      	mov	r0, r4
 8009738:	4690      	mov	r8, r2
 800973a:	f7ff ffdb 	bl	80096f4 <__mcmp>
 800973e:	1e05      	subs	r5, r0, #0
 8009740:	d110      	bne.n	8009764 <__mdiff+0x38>
 8009742:	4629      	mov	r1, r5
 8009744:	4630      	mov	r0, r6
 8009746:	f7ff fd09 	bl	800915c <_Balloc>
 800974a:	b930      	cbnz	r0, 800975a <__mdiff+0x2e>
 800974c:	4b3a      	ldr	r3, [pc, #232]	; (8009838 <__mdiff+0x10c>)
 800974e:	4602      	mov	r2, r0
 8009750:	f240 2132 	movw	r1, #562	; 0x232
 8009754:	4839      	ldr	r0, [pc, #228]	; (800983c <__mdiff+0x110>)
 8009756:	f000 fc51 	bl	8009ffc <__assert_func>
 800975a:	2301      	movs	r3, #1
 800975c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009764:	bfa4      	itt	ge
 8009766:	4643      	movge	r3, r8
 8009768:	46a0      	movge	r8, r4
 800976a:	4630      	mov	r0, r6
 800976c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009770:	bfa6      	itte	ge
 8009772:	461c      	movge	r4, r3
 8009774:	2500      	movge	r5, #0
 8009776:	2501      	movlt	r5, #1
 8009778:	f7ff fcf0 	bl	800915c <_Balloc>
 800977c:	b920      	cbnz	r0, 8009788 <__mdiff+0x5c>
 800977e:	4b2e      	ldr	r3, [pc, #184]	; (8009838 <__mdiff+0x10c>)
 8009780:	4602      	mov	r2, r0
 8009782:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009786:	e7e5      	b.n	8009754 <__mdiff+0x28>
 8009788:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800978c:	6926      	ldr	r6, [r4, #16]
 800978e:	60c5      	str	r5, [r0, #12]
 8009790:	f104 0914 	add.w	r9, r4, #20
 8009794:	f108 0514 	add.w	r5, r8, #20
 8009798:	f100 0e14 	add.w	lr, r0, #20
 800979c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80097a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097a4:	f108 0210 	add.w	r2, r8, #16
 80097a8:	46f2      	mov	sl, lr
 80097aa:	2100      	movs	r1, #0
 80097ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80097b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80097b4:	fa1f f883 	uxth.w	r8, r3
 80097b8:	fa11 f18b 	uxtah	r1, r1, fp
 80097bc:	0c1b      	lsrs	r3, r3, #16
 80097be:	eba1 0808 	sub.w	r8, r1, r8
 80097c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097ca:	fa1f f888 	uxth.w	r8, r8
 80097ce:	1419      	asrs	r1, r3, #16
 80097d0:	454e      	cmp	r6, r9
 80097d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097d6:	f84a 3b04 	str.w	r3, [sl], #4
 80097da:	d8e7      	bhi.n	80097ac <__mdiff+0x80>
 80097dc:	1b33      	subs	r3, r6, r4
 80097de:	3b15      	subs	r3, #21
 80097e0:	f023 0303 	bic.w	r3, r3, #3
 80097e4:	3304      	adds	r3, #4
 80097e6:	3415      	adds	r4, #21
 80097e8:	42a6      	cmp	r6, r4
 80097ea:	bf38      	it	cc
 80097ec:	2304      	movcc	r3, #4
 80097ee:	441d      	add	r5, r3
 80097f0:	4473      	add	r3, lr
 80097f2:	469e      	mov	lr, r3
 80097f4:	462e      	mov	r6, r5
 80097f6:	4566      	cmp	r6, ip
 80097f8:	d30e      	bcc.n	8009818 <__mdiff+0xec>
 80097fa:	f10c 0203 	add.w	r2, ip, #3
 80097fe:	1b52      	subs	r2, r2, r5
 8009800:	f022 0203 	bic.w	r2, r2, #3
 8009804:	3d03      	subs	r5, #3
 8009806:	45ac      	cmp	ip, r5
 8009808:	bf38      	it	cc
 800980a:	2200      	movcc	r2, #0
 800980c:	441a      	add	r2, r3
 800980e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009812:	b17b      	cbz	r3, 8009834 <__mdiff+0x108>
 8009814:	6107      	str	r7, [r0, #16]
 8009816:	e7a3      	b.n	8009760 <__mdiff+0x34>
 8009818:	f856 8b04 	ldr.w	r8, [r6], #4
 800981c:	fa11 f288 	uxtah	r2, r1, r8
 8009820:	1414      	asrs	r4, r2, #16
 8009822:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009826:	b292      	uxth	r2, r2
 8009828:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800982c:	f84e 2b04 	str.w	r2, [lr], #4
 8009830:	1421      	asrs	r1, r4, #16
 8009832:	e7e0      	b.n	80097f6 <__mdiff+0xca>
 8009834:	3f01      	subs	r7, #1
 8009836:	e7ea      	b.n	800980e <__mdiff+0xe2>
 8009838:	0800bb88 	.word	0x0800bb88
 800983c:	0800bc14 	.word	0x0800bc14

08009840 <__ulp>:
 8009840:	b082      	sub	sp, #8
 8009842:	ed8d 0b00 	vstr	d0, [sp]
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	4912      	ldr	r1, [pc, #72]	; (8009894 <__ulp+0x54>)
 800984a:	4019      	ands	r1, r3
 800984c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009850:	2900      	cmp	r1, #0
 8009852:	dd05      	ble.n	8009860 <__ulp+0x20>
 8009854:	2200      	movs	r2, #0
 8009856:	460b      	mov	r3, r1
 8009858:	ec43 2b10 	vmov	d0, r2, r3
 800985c:	b002      	add	sp, #8
 800985e:	4770      	bx	lr
 8009860:	4249      	negs	r1, r1
 8009862:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009866:	ea4f 5021 	mov.w	r0, r1, asr #20
 800986a:	f04f 0200 	mov.w	r2, #0
 800986e:	f04f 0300 	mov.w	r3, #0
 8009872:	da04      	bge.n	800987e <__ulp+0x3e>
 8009874:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009878:	fa41 f300 	asr.w	r3, r1, r0
 800987c:	e7ec      	b.n	8009858 <__ulp+0x18>
 800987e:	f1a0 0114 	sub.w	r1, r0, #20
 8009882:	291e      	cmp	r1, #30
 8009884:	bfda      	itte	le
 8009886:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800988a:	fa20 f101 	lsrle.w	r1, r0, r1
 800988e:	2101      	movgt	r1, #1
 8009890:	460a      	mov	r2, r1
 8009892:	e7e1      	b.n	8009858 <__ulp+0x18>
 8009894:	7ff00000 	.word	0x7ff00000

08009898 <__b2d>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	6905      	ldr	r5, [r0, #16]
 800989c:	f100 0714 	add.w	r7, r0, #20
 80098a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80098a4:	1f2e      	subs	r6, r5, #4
 80098a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80098aa:	4620      	mov	r0, r4
 80098ac:	f7ff fd48 	bl	8009340 <__hi0bits>
 80098b0:	f1c0 0320 	rsb	r3, r0, #32
 80098b4:	280a      	cmp	r0, #10
 80098b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009934 <__b2d+0x9c>
 80098ba:	600b      	str	r3, [r1, #0]
 80098bc:	dc14      	bgt.n	80098e8 <__b2d+0x50>
 80098be:	f1c0 0e0b 	rsb	lr, r0, #11
 80098c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80098c6:	42b7      	cmp	r7, r6
 80098c8:	ea41 030c 	orr.w	r3, r1, ip
 80098cc:	bf34      	ite	cc
 80098ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80098d2:	2100      	movcs	r1, #0
 80098d4:	3015      	adds	r0, #21
 80098d6:	fa04 f000 	lsl.w	r0, r4, r0
 80098da:	fa21 f10e 	lsr.w	r1, r1, lr
 80098de:	ea40 0201 	orr.w	r2, r0, r1
 80098e2:	ec43 2b10 	vmov	d0, r2, r3
 80098e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e8:	42b7      	cmp	r7, r6
 80098ea:	bf3a      	itte	cc
 80098ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80098f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80098f4:	2100      	movcs	r1, #0
 80098f6:	380b      	subs	r0, #11
 80098f8:	d017      	beq.n	800992a <__b2d+0x92>
 80098fa:	f1c0 0c20 	rsb	ip, r0, #32
 80098fe:	fa04 f500 	lsl.w	r5, r4, r0
 8009902:	42be      	cmp	r6, r7
 8009904:	fa21 f40c 	lsr.w	r4, r1, ip
 8009908:	ea45 0504 	orr.w	r5, r5, r4
 800990c:	bf8c      	ite	hi
 800990e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009912:	2400      	movls	r4, #0
 8009914:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009918:	fa01 f000 	lsl.w	r0, r1, r0
 800991c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009920:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009924:	ea40 0204 	orr.w	r2, r0, r4
 8009928:	e7db      	b.n	80098e2 <__b2d+0x4a>
 800992a:	ea44 030c 	orr.w	r3, r4, ip
 800992e:	460a      	mov	r2, r1
 8009930:	e7d7      	b.n	80098e2 <__b2d+0x4a>
 8009932:	bf00      	nop
 8009934:	3ff00000 	.word	0x3ff00000

08009938 <__d2b>:
 8009938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800993c:	4689      	mov	r9, r1
 800993e:	2101      	movs	r1, #1
 8009940:	ec57 6b10 	vmov	r6, r7, d0
 8009944:	4690      	mov	r8, r2
 8009946:	f7ff fc09 	bl	800915c <_Balloc>
 800994a:	4604      	mov	r4, r0
 800994c:	b930      	cbnz	r0, 800995c <__d2b+0x24>
 800994e:	4602      	mov	r2, r0
 8009950:	4b25      	ldr	r3, [pc, #148]	; (80099e8 <__d2b+0xb0>)
 8009952:	4826      	ldr	r0, [pc, #152]	; (80099ec <__d2b+0xb4>)
 8009954:	f240 310a 	movw	r1, #778	; 0x30a
 8009958:	f000 fb50 	bl	8009ffc <__assert_func>
 800995c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009964:	bb35      	cbnz	r5, 80099b4 <__d2b+0x7c>
 8009966:	2e00      	cmp	r6, #0
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	d028      	beq.n	80099be <__d2b+0x86>
 800996c:	4668      	mov	r0, sp
 800996e:	9600      	str	r6, [sp, #0]
 8009970:	f7ff fd06 	bl	8009380 <__lo0bits>
 8009974:	9900      	ldr	r1, [sp, #0]
 8009976:	b300      	cbz	r0, 80099ba <__d2b+0x82>
 8009978:	9a01      	ldr	r2, [sp, #4]
 800997a:	f1c0 0320 	rsb	r3, r0, #32
 800997e:	fa02 f303 	lsl.w	r3, r2, r3
 8009982:	430b      	orrs	r3, r1
 8009984:	40c2      	lsrs	r2, r0
 8009986:	6163      	str	r3, [r4, #20]
 8009988:	9201      	str	r2, [sp, #4]
 800998a:	9b01      	ldr	r3, [sp, #4]
 800998c:	61a3      	str	r3, [r4, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	bf14      	ite	ne
 8009992:	2202      	movne	r2, #2
 8009994:	2201      	moveq	r2, #1
 8009996:	6122      	str	r2, [r4, #16]
 8009998:	b1d5      	cbz	r5, 80099d0 <__d2b+0x98>
 800999a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800999e:	4405      	add	r5, r0
 80099a0:	f8c9 5000 	str.w	r5, [r9]
 80099a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099a8:	f8c8 0000 	str.w	r0, [r8]
 80099ac:	4620      	mov	r0, r4
 80099ae:	b003      	add	sp, #12
 80099b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099b8:	e7d5      	b.n	8009966 <__d2b+0x2e>
 80099ba:	6161      	str	r1, [r4, #20]
 80099bc:	e7e5      	b.n	800998a <__d2b+0x52>
 80099be:	a801      	add	r0, sp, #4
 80099c0:	f7ff fcde 	bl	8009380 <__lo0bits>
 80099c4:	9b01      	ldr	r3, [sp, #4]
 80099c6:	6163      	str	r3, [r4, #20]
 80099c8:	2201      	movs	r2, #1
 80099ca:	6122      	str	r2, [r4, #16]
 80099cc:	3020      	adds	r0, #32
 80099ce:	e7e3      	b.n	8009998 <__d2b+0x60>
 80099d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099d8:	f8c9 0000 	str.w	r0, [r9]
 80099dc:	6918      	ldr	r0, [r3, #16]
 80099de:	f7ff fcaf 	bl	8009340 <__hi0bits>
 80099e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099e6:	e7df      	b.n	80099a8 <__d2b+0x70>
 80099e8:	0800bb88 	.word	0x0800bb88
 80099ec:	0800bc14 	.word	0x0800bc14

080099f0 <__ratio>:
 80099f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	4688      	mov	r8, r1
 80099f6:	4669      	mov	r1, sp
 80099f8:	4681      	mov	r9, r0
 80099fa:	f7ff ff4d 	bl	8009898 <__b2d>
 80099fe:	a901      	add	r1, sp, #4
 8009a00:	4640      	mov	r0, r8
 8009a02:	ec55 4b10 	vmov	r4, r5, d0
 8009a06:	f7ff ff47 	bl	8009898 <__b2d>
 8009a0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a12:	eba3 0c02 	sub.w	ip, r3, r2
 8009a16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a20:	ec51 0b10 	vmov	r0, r1, d0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bfd6      	itet	le
 8009a28:	460a      	movle	r2, r1
 8009a2a:	462a      	movgt	r2, r5
 8009a2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a30:	468b      	mov	fp, r1
 8009a32:	462f      	mov	r7, r5
 8009a34:	bfd4      	ite	le
 8009a36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009a3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009a3e:	4620      	mov	r0, r4
 8009a40:	ee10 2a10 	vmov	r2, s0
 8009a44:	465b      	mov	r3, fp
 8009a46:	4639      	mov	r1, r7
 8009a48:	f7f6 ff18 	bl	800087c <__aeabi_ddiv>
 8009a4c:	ec41 0b10 	vmov	d0, r0, r1
 8009a50:	b003      	add	sp, #12
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a56 <__copybits>:
 8009a56:	3901      	subs	r1, #1
 8009a58:	b570      	push	{r4, r5, r6, lr}
 8009a5a:	1149      	asrs	r1, r1, #5
 8009a5c:	6914      	ldr	r4, [r2, #16]
 8009a5e:	3101      	adds	r1, #1
 8009a60:	f102 0314 	add.w	r3, r2, #20
 8009a64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a6c:	1f05      	subs	r5, r0, #4
 8009a6e:	42a3      	cmp	r3, r4
 8009a70:	d30c      	bcc.n	8009a8c <__copybits+0x36>
 8009a72:	1aa3      	subs	r3, r4, r2
 8009a74:	3b11      	subs	r3, #17
 8009a76:	f023 0303 	bic.w	r3, r3, #3
 8009a7a:	3211      	adds	r2, #17
 8009a7c:	42a2      	cmp	r2, r4
 8009a7e:	bf88      	it	hi
 8009a80:	2300      	movhi	r3, #0
 8009a82:	4418      	add	r0, r3
 8009a84:	2300      	movs	r3, #0
 8009a86:	4288      	cmp	r0, r1
 8009a88:	d305      	bcc.n	8009a96 <__copybits+0x40>
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a90:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a94:	e7eb      	b.n	8009a6e <__copybits+0x18>
 8009a96:	f840 3b04 	str.w	r3, [r0], #4
 8009a9a:	e7f4      	b.n	8009a86 <__copybits+0x30>

08009a9c <__any_on>:
 8009a9c:	f100 0214 	add.w	r2, r0, #20
 8009aa0:	6900      	ldr	r0, [r0, #16]
 8009aa2:	114b      	asrs	r3, r1, #5
 8009aa4:	4298      	cmp	r0, r3
 8009aa6:	b510      	push	{r4, lr}
 8009aa8:	db11      	blt.n	8009ace <__any_on+0x32>
 8009aaa:	dd0a      	ble.n	8009ac2 <__any_on+0x26>
 8009aac:	f011 011f 	ands.w	r1, r1, #31
 8009ab0:	d007      	beq.n	8009ac2 <__any_on+0x26>
 8009ab2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ab6:	fa24 f001 	lsr.w	r0, r4, r1
 8009aba:	fa00 f101 	lsl.w	r1, r0, r1
 8009abe:	428c      	cmp	r4, r1
 8009ac0:	d10b      	bne.n	8009ada <__any_on+0x3e>
 8009ac2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d803      	bhi.n	8009ad2 <__any_on+0x36>
 8009aca:	2000      	movs	r0, #0
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	4603      	mov	r3, r0
 8009ad0:	e7f7      	b.n	8009ac2 <__any_on+0x26>
 8009ad2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ad6:	2900      	cmp	r1, #0
 8009ad8:	d0f5      	beq.n	8009ac6 <__any_on+0x2a>
 8009ada:	2001      	movs	r0, #1
 8009adc:	e7f6      	b.n	8009acc <__any_on+0x30>

08009ade <_calloc_r>:
 8009ade:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ae0:	fba1 2402 	umull	r2, r4, r1, r2
 8009ae4:	b94c      	cbnz	r4, 8009afa <_calloc_r+0x1c>
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	9201      	str	r2, [sp, #4]
 8009aea:	f000 f87b 	bl	8009be4 <_malloc_r>
 8009aee:	9a01      	ldr	r2, [sp, #4]
 8009af0:	4605      	mov	r5, r0
 8009af2:	b930      	cbnz	r0, 8009b02 <_calloc_r+0x24>
 8009af4:	4628      	mov	r0, r5
 8009af6:	b003      	add	sp, #12
 8009af8:	bd30      	pop	{r4, r5, pc}
 8009afa:	220c      	movs	r2, #12
 8009afc:	6002      	str	r2, [r0, #0]
 8009afe:	2500      	movs	r5, #0
 8009b00:	e7f8      	b.n	8009af4 <_calloc_r+0x16>
 8009b02:	4621      	mov	r1, r4
 8009b04:	f7fc fbc0 	bl	8006288 <memset>
 8009b08:	e7f4      	b.n	8009af4 <_calloc_r+0x16>
	...

08009b0c <_free_r>:
 8009b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b0e:	2900      	cmp	r1, #0
 8009b10:	d044      	beq.n	8009b9c <_free_r+0x90>
 8009b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b16:	9001      	str	r0, [sp, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b1e:	bfb8      	it	lt
 8009b20:	18e4      	addlt	r4, r4, r3
 8009b22:	f000 fab5 	bl	800a090 <__malloc_lock>
 8009b26:	4a1e      	ldr	r2, [pc, #120]	; (8009ba0 <_free_r+0x94>)
 8009b28:	9801      	ldr	r0, [sp, #4]
 8009b2a:	6813      	ldr	r3, [r2, #0]
 8009b2c:	b933      	cbnz	r3, 8009b3c <_free_r+0x30>
 8009b2e:	6063      	str	r3, [r4, #4]
 8009b30:	6014      	str	r4, [r2, #0]
 8009b32:	b003      	add	sp, #12
 8009b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b38:	f000 bab0 	b.w	800a09c <__malloc_unlock>
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	d908      	bls.n	8009b52 <_free_r+0x46>
 8009b40:	6825      	ldr	r5, [r4, #0]
 8009b42:	1961      	adds	r1, r4, r5
 8009b44:	428b      	cmp	r3, r1
 8009b46:	bf01      	itttt	eq
 8009b48:	6819      	ldreq	r1, [r3, #0]
 8009b4a:	685b      	ldreq	r3, [r3, #4]
 8009b4c:	1949      	addeq	r1, r1, r5
 8009b4e:	6021      	streq	r1, [r4, #0]
 8009b50:	e7ed      	b.n	8009b2e <_free_r+0x22>
 8009b52:	461a      	mov	r2, r3
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	b10b      	cbz	r3, 8009b5c <_free_r+0x50>
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	d9fa      	bls.n	8009b52 <_free_r+0x46>
 8009b5c:	6811      	ldr	r1, [r2, #0]
 8009b5e:	1855      	adds	r5, r2, r1
 8009b60:	42a5      	cmp	r5, r4
 8009b62:	d10b      	bne.n	8009b7c <_free_r+0x70>
 8009b64:	6824      	ldr	r4, [r4, #0]
 8009b66:	4421      	add	r1, r4
 8009b68:	1854      	adds	r4, r2, r1
 8009b6a:	42a3      	cmp	r3, r4
 8009b6c:	6011      	str	r1, [r2, #0]
 8009b6e:	d1e0      	bne.n	8009b32 <_free_r+0x26>
 8009b70:	681c      	ldr	r4, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	6053      	str	r3, [r2, #4]
 8009b76:	4421      	add	r1, r4
 8009b78:	6011      	str	r1, [r2, #0]
 8009b7a:	e7da      	b.n	8009b32 <_free_r+0x26>
 8009b7c:	d902      	bls.n	8009b84 <_free_r+0x78>
 8009b7e:	230c      	movs	r3, #12
 8009b80:	6003      	str	r3, [r0, #0]
 8009b82:	e7d6      	b.n	8009b32 <_free_r+0x26>
 8009b84:	6825      	ldr	r5, [r4, #0]
 8009b86:	1961      	adds	r1, r4, r5
 8009b88:	428b      	cmp	r3, r1
 8009b8a:	bf04      	itt	eq
 8009b8c:	6819      	ldreq	r1, [r3, #0]
 8009b8e:	685b      	ldreq	r3, [r3, #4]
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	bf04      	itt	eq
 8009b94:	1949      	addeq	r1, r1, r5
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	6054      	str	r4, [r2, #4]
 8009b9a:	e7ca      	b.n	8009b32 <_free_r+0x26>
 8009b9c:	b003      	add	sp, #12
 8009b9e:	bd30      	pop	{r4, r5, pc}
 8009ba0:	200007d0 	.word	0x200007d0

08009ba4 <sbrk_aligned>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	4e0e      	ldr	r6, [pc, #56]	; (8009be0 <sbrk_aligned+0x3c>)
 8009ba8:	460c      	mov	r4, r1
 8009baa:	6831      	ldr	r1, [r6, #0]
 8009bac:	4605      	mov	r5, r0
 8009bae:	b911      	cbnz	r1, 8009bb6 <sbrk_aligned+0x12>
 8009bb0:	f000 f9f2 	bl	8009f98 <_sbrk_r>
 8009bb4:	6030      	str	r0, [r6, #0]
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 f9ed 	bl	8009f98 <_sbrk_r>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	d00a      	beq.n	8009bd8 <sbrk_aligned+0x34>
 8009bc2:	1cc4      	adds	r4, r0, #3
 8009bc4:	f024 0403 	bic.w	r4, r4, #3
 8009bc8:	42a0      	cmp	r0, r4
 8009bca:	d007      	beq.n	8009bdc <sbrk_aligned+0x38>
 8009bcc:	1a21      	subs	r1, r4, r0
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f000 f9e2 	bl	8009f98 <_sbrk_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d101      	bne.n	8009bdc <sbrk_aligned+0x38>
 8009bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8009bdc:	4620      	mov	r0, r4
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	200007d4 	.word	0x200007d4

08009be4 <_malloc_r>:
 8009be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be8:	1ccd      	adds	r5, r1, #3
 8009bea:	f025 0503 	bic.w	r5, r5, #3
 8009bee:	3508      	adds	r5, #8
 8009bf0:	2d0c      	cmp	r5, #12
 8009bf2:	bf38      	it	cc
 8009bf4:	250c      	movcc	r5, #12
 8009bf6:	2d00      	cmp	r5, #0
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	db01      	blt.n	8009c00 <_malloc_r+0x1c>
 8009bfc:	42a9      	cmp	r1, r5
 8009bfe:	d905      	bls.n	8009c0c <_malloc_r+0x28>
 8009c00:	230c      	movs	r3, #12
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	2600      	movs	r6, #0
 8009c06:	4630      	mov	r0, r6
 8009c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c0c:	4e2e      	ldr	r6, [pc, #184]	; (8009cc8 <_malloc_r+0xe4>)
 8009c0e:	f000 fa3f 	bl	800a090 <__malloc_lock>
 8009c12:	6833      	ldr	r3, [r6, #0]
 8009c14:	461c      	mov	r4, r3
 8009c16:	bb34      	cbnz	r4, 8009c66 <_malloc_r+0x82>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	f7ff ffc2 	bl	8009ba4 <sbrk_aligned>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	4604      	mov	r4, r0
 8009c24:	d14d      	bne.n	8009cc2 <_malloc_r+0xde>
 8009c26:	6834      	ldr	r4, [r6, #0]
 8009c28:	4626      	mov	r6, r4
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	d140      	bne.n	8009cb0 <_malloc_r+0xcc>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	4631      	mov	r1, r6
 8009c32:	4638      	mov	r0, r7
 8009c34:	eb04 0803 	add.w	r8, r4, r3
 8009c38:	f000 f9ae 	bl	8009f98 <_sbrk_r>
 8009c3c:	4580      	cmp	r8, r0
 8009c3e:	d13a      	bne.n	8009cb6 <_malloc_r+0xd2>
 8009c40:	6821      	ldr	r1, [r4, #0]
 8009c42:	3503      	adds	r5, #3
 8009c44:	1a6d      	subs	r5, r5, r1
 8009c46:	f025 0503 	bic.w	r5, r5, #3
 8009c4a:	3508      	adds	r5, #8
 8009c4c:	2d0c      	cmp	r5, #12
 8009c4e:	bf38      	it	cc
 8009c50:	250c      	movcc	r5, #12
 8009c52:	4629      	mov	r1, r5
 8009c54:	4638      	mov	r0, r7
 8009c56:	f7ff ffa5 	bl	8009ba4 <sbrk_aligned>
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d02b      	beq.n	8009cb6 <_malloc_r+0xd2>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	442b      	add	r3, r5
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	e00e      	b.n	8009c84 <_malloc_r+0xa0>
 8009c66:	6822      	ldr	r2, [r4, #0]
 8009c68:	1b52      	subs	r2, r2, r5
 8009c6a:	d41e      	bmi.n	8009caa <_malloc_r+0xc6>
 8009c6c:	2a0b      	cmp	r2, #11
 8009c6e:	d916      	bls.n	8009c9e <_malloc_r+0xba>
 8009c70:	1961      	adds	r1, r4, r5
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	6025      	str	r5, [r4, #0]
 8009c76:	bf18      	it	ne
 8009c78:	6059      	strne	r1, [r3, #4]
 8009c7a:	6863      	ldr	r3, [r4, #4]
 8009c7c:	bf08      	it	eq
 8009c7e:	6031      	streq	r1, [r6, #0]
 8009c80:	5162      	str	r2, [r4, r5]
 8009c82:	604b      	str	r3, [r1, #4]
 8009c84:	4638      	mov	r0, r7
 8009c86:	f104 060b 	add.w	r6, r4, #11
 8009c8a:	f000 fa07 	bl	800a09c <__malloc_unlock>
 8009c8e:	f026 0607 	bic.w	r6, r6, #7
 8009c92:	1d23      	adds	r3, r4, #4
 8009c94:	1af2      	subs	r2, r6, r3
 8009c96:	d0b6      	beq.n	8009c06 <_malloc_r+0x22>
 8009c98:	1b9b      	subs	r3, r3, r6
 8009c9a:	50a3      	str	r3, [r4, r2]
 8009c9c:	e7b3      	b.n	8009c06 <_malloc_r+0x22>
 8009c9e:	6862      	ldr	r2, [r4, #4]
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	bf0c      	ite	eq
 8009ca4:	6032      	streq	r2, [r6, #0]
 8009ca6:	605a      	strne	r2, [r3, #4]
 8009ca8:	e7ec      	b.n	8009c84 <_malloc_r+0xa0>
 8009caa:	4623      	mov	r3, r4
 8009cac:	6864      	ldr	r4, [r4, #4]
 8009cae:	e7b2      	b.n	8009c16 <_malloc_r+0x32>
 8009cb0:	4634      	mov	r4, r6
 8009cb2:	6876      	ldr	r6, [r6, #4]
 8009cb4:	e7b9      	b.n	8009c2a <_malloc_r+0x46>
 8009cb6:	230c      	movs	r3, #12
 8009cb8:	603b      	str	r3, [r7, #0]
 8009cba:	4638      	mov	r0, r7
 8009cbc:	f000 f9ee 	bl	800a09c <__malloc_unlock>
 8009cc0:	e7a1      	b.n	8009c06 <_malloc_r+0x22>
 8009cc2:	6025      	str	r5, [r4, #0]
 8009cc4:	e7de      	b.n	8009c84 <_malloc_r+0xa0>
 8009cc6:	bf00      	nop
 8009cc8:	200007d0 	.word	0x200007d0

08009ccc <__ssputs_r>:
 8009ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd0:	688e      	ldr	r6, [r1, #8]
 8009cd2:	429e      	cmp	r6, r3
 8009cd4:	4682      	mov	sl, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	4690      	mov	r8, r2
 8009cda:	461f      	mov	r7, r3
 8009cdc:	d838      	bhi.n	8009d50 <__ssputs_r+0x84>
 8009cde:	898a      	ldrh	r2, [r1, #12]
 8009ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ce4:	d032      	beq.n	8009d4c <__ssputs_r+0x80>
 8009ce6:	6825      	ldr	r5, [r4, #0]
 8009ce8:	6909      	ldr	r1, [r1, #16]
 8009cea:	eba5 0901 	sub.w	r9, r5, r1
 8009cee:	6965      	ldr	r5, [r4, #20]
 8009cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	444b      	add	r3, r9
 8009cfc:	106d      	asrs	r5, r5, #1
 8009cfe:	429d      	cmp	r5, r3
 8009d00:	bf38      	it	cc
 8009d02:	461d      	movcc	r5, r3
 8009d04:	0553      	lsls	r3, r2, #21
 8009d06:	d531      	bpl.n	8009d6c <__ssputs_r+0xa0>
 8009d08:	4629      	mov	r1, r5
 8009d0a:	f7ff ff6b 	bl	8009be4 <_malloc_r>
 8009d0e:	4606      	mov	r6, r0
 8009d10:	b950      	cbnz	r0, 8009d28 <__ssputs_r+0x5c>
 8009d12:	230c      	movs	r3, #12
 8009d14:	f8ca 3000 	str.w	r3, [sl]
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d28:	6921      	ldr	r1, [r4, #16]
 8009d2a:	464a      	mov	r2, r9
 8009d2c:	f7ff fa08 	bl	8009140 <memcpy>
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d3a:	81a3      	strh	r3, [r4, #12]
 8009d3c:	6126      	str	r6, [r4, #16]
 8009d3e:	6165      	str	r5, [r4, #20]
 8009d40:	444e      	add	r6, r9
 8009d42:	eba5 0509 	sub.w	r5, r5, r9
 8009d46:	6026      	str	r6, [r4, #0]
 8009d48:	60a5      	str	r5, [r4, #8]
 8009d4a:	463e      	mov	r6, r7
 8009d4c:	42be      	cmp	r6, r7
 8009d4e:	d900      	bls.n	8009d52 <__ssputs_r+0x86>
 8009d50:	463e      	mov	r6, r7
 8009d52:	6820      	ldr	r0, [r4, #0]
 8009d54:	4632      	mov	r2, r6
 8009d56:	4641      	mov	r1, r8
 8009d58:	f000 f980 	bl	800a05c <memmove>
 8009d5c:	68a3      	ldr	r3, [r4, #8]
 8009d5e:	1b9b      	subs	r3, r3, r6
 8009d60:	60a3      	str	r3, [r4, #8]
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	4433      	add	r3, r6
 8009d66:	6023      	str	r3, [r4, #0]
 8009d68:	2000      	movs	r0, #0
 8009d6a:	e7db      	b.n	8009d24 <__ssputs_r+0x58>
 8009d6c:	462a      	mov	r2, r5
 8009d6e:	f000 f99b 	bl	800a0a8 <_realloc_r>
 8009d72:	4606      	mov	r6, r0
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d1e1      	bne.n	8009d3c <__ssputs_r+0x70>
 8009d78:	6921      	ldr	r1, [r4, #16]
 8009d7a:	4650      	mov	r0, sl
 8009d7c:	f7ff fec6 	bl	8009b0c <_free_r>
 8009d80:	e7c7      	b.n	8009d12 <__ssputs_r+0x46>
	...

08009d84 <_svfiprintf_r>:
 8009d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	4698      	mov	r8, r3
 8009d8a:	898b      	ldrh	r3, [r1, #12]
 8009d8c:	061b      	lsls	r3, r3, #24
 8009d8e:	b09d      	sub	sp, #116	; 0x74
 8009d90:	4607      	mov	r7, r0
 8009d92:	460d      	mov	r5, r1
 8009d94:	4614      	mov	r4, r2
 8009d96:	d50e      	bpl.n	8009db6 <_svfiprintf_r+0x32>
 8009d98:	690b      	ldr	r3, [r1, #16]
 8009d9a:	b963      	cbnz	r3, 8009db6 <_svfiprintf_r+0x32>
 8009d9c:	2140      	movs	r1, #64	; 0x40
 8009d9e:	f7ff ff21 	bl	8009be4 <_malloc_r>
 8009da2:	6028      	str	r0, [r5, #0]
 8009da4:	6128      	str	r0, [r5, #16]
 8009da6:	b920      	cbnz	r0, 8009db2 <_svfiprintf_r+0x2e>
 8009da8:	230c      	movs	r3, #12
 8009daa:	603b      	str	r3, [r7, #0]
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	e0d1      	b.n	8009f56 <_svfiprintf_r+0x1d2>
 8009db2:	2340      	movs	r3, #64	; 0x40
 8009db4:	616b      	str	r3, [r5, #20]
 8009db6:	2300      	movs	r3, #0
 8009db8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dba:	2320      	movs	r3, #32
 8009dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc4:	2330      	movs	r3, #48	; 0x30
 8009dc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f70 <_svfiprintf_r+0x1ec>
 8009dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dce:	f04f 0901 	mov.w	r9, #1
 8009dd2:	4623      	mov	r3, r4
 8009dd4:	469a      	mov	sl, r3
 8009dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dda:	b10a      	cbz	r2, 8009de0 <_svfiprintf_r+0x5c>
 8009ddc:	2a25      	cmp	r2, #37	; 0x25
 8009dde:	d1f9      	bne.n	8009dd4 <_svfiprintf_r+0x50>
 8009de0:	ebba 0b04 	subs.w	fp, sl, r4
 8009de4:	d00b      	beq.n	8009dfe <_svfiprintf_r+0x7a>
 8009de6:	465b      	mov	r3, fp
 8009de8:	4622      	mov	r2, r4
 8009dea:	4629      	mov	r1, r5
 8009dec:	4638      	mov	r0, r7
 8009dee:	f7ff ff6d 	bl	8009ccc <__ssputs_r>
 8009df2:	3001      	adds	r0, #1
 8009df4:	f000 80aa 	beq.w	8009f4c <_svfiprintf_r+0x1c8>
 8009df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dfa:	445a      	add	r2, fp
 8009dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8009dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 80a2 	beq.w	8009f4c <_svfiprintf_r+0x1c8>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e12:	f10a 0a01 	add.w	sl, sl, #1
 8009e16:	9304      	str	r3, [sp, #16]
 8009e18:	9307      	str	r3, [sp, #28]
 8009e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8009e20:	4654      	mov	r4, sl
 8009e22:	2205      	movs	r2, #5
 8009e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e28:	4851      	ldr	r0, [pc, #324]	; (8009f70 <_svfiprintf_r+0x1ec>)
 8009e2a:	f7f6 f9f1 	bl	8000210 <memchr>
 8009e2e:	9a04      	ldr	r2, [sp, #16]
 8009e30:	b9d8      	cbnz	r0, 8009e6a <_svfiprintf_r+0xe6>
 8009e32:	06d0      	lsls	r0, r2, #27
 8009e34:	bf44      	itt	mi
 8009e36:	2320      	movmi	r3, #32
 8009e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3c:	0711      	lsls	r1, r2, #28
 8009e3e:	bf44      	itt	mi
 8009e40:	232b      	movmi	r3, #43	; 0x2b
 8009e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e46:	f89a 3000 	ldrb.w	r3, [sl]
 8009e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e4c:	d015      	beq.n	8009e7a <_svfiprintf_r+0xf6>
 8009e4e:	9a07      	ldr	r2, [sp, #28]
 8009e50:	4654      	mov	r4, sl
 8009e52:	2000      	movs	r0, #0
 8009e54:	f04f 0c0a 	mov.w	ip, #10
 8009e58:	4621      	mov	r1, r4
 8009e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e5e:	3b30      	subs	r3, #48	; 0x30
 8009e60:	2b09      	cmp	r3, #9
 8009e62:	d94e      	bls.n	8009f02 <_svfiprintf_r+0x17e>
 8009e64:	b1b0      	cbz	r0, 8009e94 <_svfiprintf_r+0x110>
 8009e66:	9207      	str	r2, [sp, #28]
 8009e68:	e014      	b.n	8009e94 <_svfiprintf_r+0x110>
 8009e6a:	eba0 0308 	sub.w	r3, r0, r8
 8009e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e72:	4313      	orrs	r3, r2
 8009e74:	9304      	str	r3, [sp, #16]
 8009e76:	46a2      	mov	sl, r4
 8009e78:	e7d2      	b.n	8009e20 <_svfiprintf_r+0x9c>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	1d19      	adds	r1, r3, #4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	9103      	str	r1, [sp, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bfbb      	ittet	lt
 8009e86:	425b      	neglt	r3, r3
 8009e88:	f042 0202 	orrlt.w	r2, r2, #2
 8009e8c:	9307      	strge	r3, [sp, #28]
 8009e8e:	9307      	strlt	r3, [sp, #28]
 8009e90:	bfb8      	it	lt
 8009e92:	9204      	strlt	r2, [sp, #16]
 8009e94:	7823      	ldrb	r3, [r4, #0]
 8009e96:	2b2e      	cmp	r3, #46	; 0x2e
 8009e98:	d10c      	bne.n	8009eb4 <_svfiprintf_r+0x130>
 8009e9a:	7863      	ldrb	r3, [r4, #1]
 8009e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e9e:	d135      	bne.n	8009f0c <_svfiprintf_r+0x188>
 8009ea0:	9b03      	ldr	r3, [sp, #12]
 8009ea2:	1d1a      	adds	r2, r3, #4
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	9203      	str	r2, [sp, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	bfb8      	it	lt
 8009eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eb0:	3402      	adds	r4, #2
 8009eb2:	9305      	str	r3, [sp, #20]
 8009eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f80 <_svfiprintf_r+0x1fc>
 8009eb8:	7821      	ldrb	r1, [r4, #0]
 8009eba:	2203      	movs	r2, #3
 8009ebc:	4650      	mov	r0, sl
 8009ebe:	f7f6 f9a7 	bl	8000210 <memchr>
 8009ec2:	b140      	cbz	r0, 8009ed6 <_svfiprintf_r+0x152>
 8009ec4:	2340      	movs	r3, #64	; 0x40
 8009ec6:	eba0 000a 	sub.w	r0, r0, sl
 8009eca:	fa03 f000 	lsl.w	r0, r3, r0
 8009ece:	9b04      	ldr	r3, [sp, #16]
 8009ed0:	4303      	orrs	r3, r0
 8009ed2:	3401      	adds	r4, #1
 8009ed4:	9304      	str	r3, [sp, #16]
 8009ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eda:	4826      	ldr	r0, [pc, #152]	; (8009f74 <_svfiprintf_r+0x1f0>)
 8009edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ee0:	2206      	movs	r2, #6
 8009ee2:	f7f6 f995 	bl	8000210 <memchr>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d038      	beq.n	8009f5c <_svfiprintf_r+0x1d8>
 8009eea:	4b23      	ldr	r3, [pc, #140]	; (8009f78 <_svfiprintf_r+0x1f4>)
 8009eec:	bb1b      	cbnz	r3, 8009f36 <_svfiprintf_r+0x1b2>
 8009eee:	9b03      	ldr	r3, [sp, #12]
 8009ef0:	3307      	adds	r3, #7
 8009ef2:	f023 0307 	bic.w	r3, r3, #7
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	9303      	str	r3, [sp, #12]
 8009efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efc:	4433      	add	r3, r6
 8009efe:	9309      	str	r3, [sp, #36]	; 0x24
 8009f00:	e767      	b.n	8009dd2 <_svfiprintf_r+0x4e>
 8009f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f06:	460c      	mov	r4, r1
 8009f08:	2001      	movs	r0, #1
 8009f0a:	e7a5      	b.n	8009e58 <_svfiprintf_r+0xd4>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	3401      	adds	r4, #1
 8009f10:	9305      	str	r3, [sp, #20]
 8009f12:	4619      	mov	r1, r3
 8009f14:	f04f 0c0a 	mov.w	ip, #10
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f1e:	3a30      	subs	r2, #48	; 0x30
 8009f20:	2a09      	cmp	r2, #9
 8009f22:	d903      	bls.n	8009f2c <_svfiprintf_r+0x1a8>
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d0c5      	beq.n	8009eb4 <_svfiprintf_r+0x130>
 8009f28:	9105      	str	r1, [sp, #20]
 8009f2a:	e7c3      	b.n	8009eb4 <_svfiprintf_r+0x130>
 8009f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f30:	4604      	mov	r4, r0
 8009f32:	2301      	movs	r3, #1
 8009f34:	e7f0      	b.n	8009f18 <_svfiprintf_r+0x194>
 8009f36:	ab03      	add	r3, sp, #12
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	462a      	mov	r2, r5
 8009f3c:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <_svfiprintf_r+0x1f8>)
 8009f3e:	a904      	add	r1, sp, #16
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7fc fa49 	bl	80063d8 <_printf_float>
 8009f46:	1c42      	adds	r2, r0, #1
 8009f48:	4606      	mov	r6, r0
 8009f4a:	d1d6      	bne.n	8009efa <_svfiprintf_r+0x176>
 8009f4c:	89ab      	ldrh	r3, [r5, #12]
 8009f4e:	065b      	lsls	r3, r3, #25
 8009f50:	f53f af2c 	bmi.w	8009dac <_svfiprintf_r+0x28>
 8009f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f56:	b01d      	add	sp, #116	; 0x74
 8009f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5c:	ab03      	add	r3, sp, #12
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	462a      	mov	r2, r5
 8009f62:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <_svfiprintf_r+0x1f8>)
 8009f64:	a904      	add	r1, sp, #16
 8009f66:	4638      	mov	r0, r7
 8009f68:	f7fc fcda 	bl	8006920 <_printf_i>
 8009f6c:	e7eb      	b.n	8009f46 <_svfiprintf_r+0x1c2>
 8009f6e:	bf00      	nop
 8009f70:	0800bd6c 	.word	0x0800bd6c
 8009f74:	0800bd76 	.word	0x0800bd76
 8009f78:	080063d9 	.word	0x080063d9
 8009f7c:	08009ccd 	.word	0x08009ccd
 8009f80:	0800bd72 	.word	0x0800bd72
 8009f84:	00000000 	.word	0x00000000

08009f88 <nan>:
 8009f88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f90 <nan+0x8>
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	00000000 	.word	0x00000000
 8009f94:	7ff80000 	.word	0x7ff80000

08009f98 <_sbrk_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d06      	ldr	r5, [pc, #24]	; (8009fb4 <_sbrk_r+0x1c>)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	f7f8 fdd2 	bl	8002b4c <_sbrk>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_sbrk_r+0x1a>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_sbrk_r+0x1a>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	200007d8 	.word	0x200007d8

08009fb8 <strncmp>:
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	b17a      	cbz	r2, 8009fdc <strncmp+0x24>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	3901      	subs	r1, #1
 8009fc0:	1884      	adds	r4, r0, r2
 8009fc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009fc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009fca:	4290      	cmp	r0, r2
 8009fcc:	d101      	bne.n	8009fd2 <strncmp+0x1a>
 8009fce:	42a3      	cmp	r3, r4
 8009fd0:	d101      	bne.n	8009fd6 <strncmp+0x1e>
 8009fd2:	1a80      	subs	r0, r0, r2
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d1f3      	bne.n	8009fc2 <strncmp+0xa>
 8009fda:	e7fa      	b.n	8009fd2 <strncmp+0x1a>
 8009fdc:	4610      	mov	r0, r2
 8009fde:	e7f9      	b.n	8009fd4 <strncmp+0x1c>

08009fe0 <__ascii_wctomb>:
 8009fe0:	b149      	cbz	r1, 8009ff6 <__ascii_wctomb+0x16>
 8009fe2:	2aff      	cmp	r2, #255	; 0xff
 8009fe4:	bf85      	ittet	hi
 8009fe6:	238a      	movhi	r3, #138	; 0x8a
 8009fe8:	6003      	strhi	r3, [r0, #0]
 8009fea:	700a      	strbls	r2, [r1, #0]
 8009fec:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ff0:	bf98      	it	ls
 8009ff2:	2001      	movls	r0, #1
 8009ff4:	4770      	bx	lr
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4770      	bx	lr
	...

08009ffc <__assert_func>:
 8009ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ffe:	4614      	mov	r4, r2
 800a000:	461a      	mov	r2, r3
 800a002:	4b09      	ldr	r3, [pc, #36]	; (800a028 <__assert_func+0x2c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4605      	mov	r5, r0
 800a008:	68d8      	ldr	r0, [r3, #12]
 800a00a:	b14c      	cbz	r4, 800a020 <__assert_func+0x24>
 800a00c:	4b07      	ldr	r3, [pc, #28]	; (800a02c <__assert_func+0x30>)
 800a00e:	9100      	str	r1, [sp, #0]
 800a010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a014:	4906      	ldr	r1, [pc, #24]	; (800a030 <__assert_func+0x34>)
 800a016:	462b      	mov	r3, r5
 800a018:	f000 f80e 	bl	800a038 <fiprintf>
 800a01c:	f000 fa8c 	bl	800a538 <abort>
 800a020:	4b04      	ldr	r3, [pc, #16]	; (800a034 <__assert_func+0x38>)
 800a022:	461c      	mov	r4, r3
 800a024:	e7f3      	b.n	800a00e <__assert_func+0x12>
 800a026:	bf00      	nop
 800a028:	20000030 	.word	0x20000030
 800a02c:	0800bd7d 	.word	0x0800bd7d
 800a030:	0800bd8a 	.word	0x0800bd8a
 800a034:	0800bdb8 	.word	0x0800bdb8

0800a038 <fiprintf>:
 800a038:	b40e      	push	{r1, r2, r3}
 800a03a:	b503      	push	{r0, r1, lr}
 800a03c:	4601      	mov	r1, r0
 800a03e:	ab03      	add	r3, sp, #12
 800a040:	4805      	ldr	r0, [pc, #20]	; (800a058 <fiprintf+0x20>)
 800a042:	f853 2b04 	ldr.w	r2, [r3], #4
 800a046:	6800      	ldr	r0, [r0, #0]
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	f000 f885 	bl	800a158 <_vfiprintf_r>
 800a04e:	b002      	add	sp, #8
 800a050:	f85d eb04 	ldr.w	lr, [sp], #4
 800a054:	b003      	add	sp, #12
 800a056:	4770      	bx	lr
 800a058:	20000030 	.word	0x20000030

0800a05c <memmove>:
 800a05c:	4288      	cmp	r0, r1
 800a05e:	b510      	push	{r4, lr}
 800a060:	eb01 0402 	add.w	r4, r1, r2
 800a064:	d902      	bls.n	800a06c <memmove+0x10>
 800a066:	4284      	cmp	r4, r0
 800a068:	4623      	mov	r3, r4
 800a06a:	d807      	bhi.n	800a07c <memmove+0x20>
 800a06c:	1e43      	subs	r3, r0, #1
 800a06e:	42a1      	cmp	r1, r4
 800a070:	d008      	beq.n	800a084 <memmove+0x28>
 800a072:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a07a:	e7f8      	b.n	800a06e <memmove+0x12>
 800a07c:	4402      	add	r2, r0
 800a07e:	4601      	mov	r1, r0
 800a080:	428a      	cmp	r2, r1
 800a082:	d100      	bne.n	800a086 <memmove+0x2a>
 800a084:	bd10      	pop	{r4, pc}
 800a086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a08a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a08e:	e7f7      	b.n	800a080 <memmove+0x24>

0800a090 <__malloc_lock>:
 800a090:	4801      	ldr	r0, [pc, #4]	; (800a098 <__malloc_lock+0x8>)
 800a092:	f000 bc11 	b.w	800a8b8 <__retarget_lock_acquire_recursive>
 800a096:	bf00      	nop
 800a098:	200007dc 	.word	0x200007dc

0800a09c <__malloc_unlock>:
 800a09c:	4801      	ldr	r0, [pc, #4]	; (800a0a4 <__malloc_unlock+0x8>)
 800a09e:	f000 bc0c 	b.w	800a8ba <__retarget_lock_release_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	200007dc 	.word	0x200007dc

0800a0a8 <_realloc_r>:
 800a0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	4614      	mov	r4, r2
 800a0b0:	460e      	mov	r6, r1
 800a0b2:	b921      	cbnz	r1, 800a0be <_realloc_r+0x16>
 800a0b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	f7ff bd93 	b.w	8009be4 <_malloc_r>
 800a0be:	b92a      	cbnz	r2, 800a0cc <_realloc_r+0x24>
 800a0c0:	f7ff fd24 	bl	8009b0c <_free_r>
 800a0c4:	4625      	mov	r5, r4
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0cc:	f000 fc5c 	bl	800a988 <_malloc_usable_size_r>
 800a0d0:	4284      	cmp	r4, r0
 800a0d2:	4607      	mov	r7, r0
 800a0d4:	d802      	bhi.n	800a0dc <_realloc_r+0x34>
 800a0d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0da:	d812      	bhi.n	800a102 <_realloc_r+0x5a>
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4640      	mov	r0, r8
 800a0e0:	f7ff fd80 	bl	8009be4 <_malloc_r>
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d0ed      	beq.n	800a0c6 <_realloc_r+0x1e>
 800a0ea:	42bc      	cmp	r4, r7
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	bf28      	it	cs
 800a0f2:	463a      	movcs	r2, r7
 800a0f4:	f7ff f824 	bl	8009140 <memcpy>
 800a0f8:	4631      	mov	r1, r6
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	f7ff fd06 	bl	8009b0c <_free_r>
 800a100:	e7e1      	b.n	800a0c6 <_realloc_r+0x1e>
 800a102:	4635      	mov	r5, r6
 800a104:	e7df      	b.n	800a0c6 <_realloc_r+0x1e>

0800a106 <__sfputc_r>:
 800a106:	6893      	ldr	r3, [r2, #8]
 800a108:	3b01      	subs	r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	b410      	push	{r4}
 800a10e:	6093      	str	r3, [r2, #8]
 800a110:	da08      	bge.n	800a124 <__sfputc_r+0x1e>
 800a112:	6994      	ldr	r4, [r2, #24]
 800a114:	42a3      	cmp	r3, r4
 800a116:	db01      	blt.n	800a11c <__sfputc_r+0x16>
 800a118:	290a      	cmp	r1, #10
 800a11a:	d103      	bne.n	800a124 <__sfputc_r+0x1e>
 800a11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a120:	f000 b94a 	b.w	800a3b8 <__swbuf_r>
 800a124:	6813      	ldr	r3, [r2, #0]
 800a126:	1c58      	adds	r0, r3, #1
 800a128:	6010      	str	r0, [r2, #0]
 800a12a:	7019      	strb	r1, [r3, #0]
 800a12c:	4608      	mov	r0, r1
 800a12e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <__sfputs_r>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	4606      	mov	r6, r0
 800a138:	460f      	mov	r7, r1
 800a13a:	4614      	mov	r4, r2
 800a13c:	18d5      	adds	r5, r2, r3
 800a13e:	42ac      	cmp	r4, r5
 800a140:	d101      	bne.n	800a146 <__sfputs_r+0x12>
 800a142:	2000      	movs	r0, #0
 800a144:	e007      	b.n	800a156 <__sfputs_r+0x22>
 800a146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14a:	463a      	mov	r2, r7
 800a14c:	4630      	mov	r0, r6
 800a14e:	f7ff ffda 	bl	800a106 <__sfputc_r>
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	d1f3      	bne.n	800a13e <__sfputs_r+0xa>
 800a156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a158 <_vfiprintf_r>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	460d      	mov	r5, r1
 800a15e:	b09d      	sub	sp, #116	; 0x74
 800a160:	4614      	mov	r4, r2
 800a162:	4698      	mov	r8, r3
 800a164:	4606      	mov	r6, r0
 800a166:	b118      	cbz	r0, 800a170 <_vfiprintf_r+0x18>
 800a168:	6983      	ldr	r3, [r0, #24]
 800a16a:	b90b      	cbnz	r3, 800a170 <_vfiprintf_r+0x18>
 800a16c:	f000 fb06 	bl	800a77c <__sinit>
 800a170:	4b89      	ldr	r3, [pc, #548]	; (800a398 <_vfiprintf_r+0x240>)
 800a172:	429d      	cmp	r5, r3
 800a174:	d11b      	bne.n	800a1ae <_vfiprintf_r+0x56>
 800a176:	6875      	ldr	r5, [r6, #4]
 800a178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a17a:	07d9      	lsls	r1, r3, #31
 800a17c:	d405      	bmi.n	800a18a <_vfiprintf_r+0x32>
 800a17e:	89ab      	ldrh	r3, [r5, #12]
 800a180:	059a      	lsls	r2, r3, #22
 800a182:	d402      	bmi.n	800a18a <_vfiprintf_r+0x32>
 800a184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a186:	f000 fb97 	bl	800a8b8 <__retarget_lock_acquire_recursive>
 800a18a:	89ab      	ldrh	r3, [r5, #12]
 800a18c:	071b      	lsls	r3, r3, #28
 800a18e:	d501      	bpl.n	800a194 <_vfiprintf_r+0x3c>
 800a190:	692b      	ldr	r3, [r5, #16]
 800a192:	b9eb      	cbnz	r3, 800a1d0 <_vfiprintf_r+0x78>
 800a194:	4629      	mov	r1, r5
 800a196:	4630      	mov	r0, r6
 800a198:	f000 f960 	bl	800a45c <__swsetup_r>
 800a19c:	b1c0      	cbz	r0, 800a1d0 <_vfiprintf_r+0x78>
 800a19e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1a0:	07dc      	lsls	r4, r3, #31
 800a1a2:	d50e      	bpl.n	800a1c2 <_vfiprintf_r+0x6a>
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	b01d      	add	sp, #116	; 0x74
 800a1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ae:	4b7b      	ldr	r3, [pc, #492]	; (800a39c <_vfiprintf_r+0x244>)
 800a1b0:	429d      	cmp	r5, r3
 800a1b2:	d101      	bne.n	800a1b8 <_vfiprintf_r+0x60>
 800a1b4:	68b5      	ldr	r5, [r6, #8]
 800a1b6:	e7df      	b.n	800a178 <_vfiprintf_r+0x20>
 800a1b8:	4b79      	ldr	r3, [pc, #484]	; (800a3a0 <_vfiprintf_r+0x248>)
 800a1ba:	429d      	cmp	r5, r3
 800a1bc:	bf08      	it	eq
 800a1be:	68f5      	ldreq	r5, [r6, #12]
 800a1c0:	e7da      	b.n	800a178 <_vfiprintf_r+0x20>
 800a1c2:	89ab      	ldrh	r3, [r5, #12]
 800a1c4:	0598      	lsls	r0, r3, #22
 800a1c6:	d4ed      	bmi.n	800a1a4 <_vfiprintf_r+0x4c>
 800a1c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1ca:	f000 fb76 	bl	800a8ba <__retarget_lock_release_recursive>
 800a1ce:	e7e9      	b.n	800a1a4 <_vfiprintf_r+0x4c>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1de:	2330      	movs	r3, #48	; 0x30
 800a1e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3a4 <_vfiprintf_r+0x24c>
 800a1e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1e8:	f04f 0901 	mov.w	r9, #1
 800a1ec:	4623      	mov	r3, r4
 800a1ee:	469a      	mov	sl, r3
 800a1f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f4:	b10a      	cbz	r2, 800a1fa <_vfiprintf_r+0xa2>
 800a1f6:	2a25      	cmp	r2, #37	; 0x25
 800a1f8:	d1f9      	bne.n	800a1ee <_vfiprintf_r+0x96>
 800a1fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a1fe:	d00b      	beq.n	800a218 <_vfiprintf_r+0xc0>
 800a200:	465b      	mov	r3, fp
 800a202:	4622      	mov	r2, r4
 800a204:	4629      	mov	r1, r5
 800a206:	4630      	mov	r0, r6
 800a208:	f7ff ff94 	bl	800a134 <__sfputs_r>
 800a20c:	3001      	adds	r0, #1
 800a20e:	f000 80aa 	beq.w	800a366 <_vfiprintf_r+0x20e>
 800a212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a214:	445a      	add	r2, fp
 800a216:	9209      	str	r2, [sp, #36]	; 0x24
 800a218:	f89a 3000 	ldrb.w	r3, [sl]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 80a2 	beq.w	800a366 <_vfiprintf_r+0x20e>
 800a222:	2300      	movs	r3, #0
 800a224:	f04f 32ff 	mov.w	r2, #4294967295
 800a228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a22c:	f10a 0a01 	add.w	sl, sl, #1
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	9307      	str	r3, [sp, #28]
 800a234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a238:	931a      	str	r3, [sp, #104]	; 0x68
 800a23a:	4654      	mov	r4, sl
 800a23c:	2205      	movs	r2, #5
 800a23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a242:	4858      	ldr	r0, [pc, #352]	; (800a3a4 <_vfiprintf_r+0x24c>)
 800a244:	f7f5 ffe4 	bl	8000210 <memchr>
 800a248:	9a04      	ldr	r2, [sp, #16]
 800a24a:	b9d8      	cbnz	r0, 800a284 <_vfiprintf_r+0x12c>
 800a24c:	06d1      	lsls	r1, r2, #27
 800a24e:	bf44      	itt	mi
 800a250:	2320      	movmi	r3, #32
 800a252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a256:	0713      	lsls	r3, r2, #28
 800a258:	bf44      	itt	mi
 800a25a:	232b      	movmi	r3, #43	; 0x2b
 800a25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a260:	f89a 3000 	ldrb.w	r3, [sl]
 800a264:	2b2a      	cmp	r3, #42	; 0x2a
 800a266:	d015      	beq.n	800a294 <_vfiprintf_r+0x13c>
 800a268:	9a07      	ldr	r2, [sp, #28]
 800a26a:	4654      	mov	r4, sl
 800a26c:	2000      	movs	r0, #0
 800a26e:	f04f 0c0a 	mov.w	ip, #10
 800a272:	4621      	mov	r1, r4
 800a274:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a278:	3b30      	subs	r3, #48	; 0x30
 800a27a:	2b09      	cmp	r3, #9
 800a27c:	d94e      	bls.n	800a31c <_vfiprintf_r+0x1c4>
 800a27e:	b1b0      	cbz	r0, 800a2ae <_vfiprintf_r+0x156>
 800a280:	9207      	str	r2, [sp, #28]
 800a282:	e014      	b.n	800a2ae <_vfiprintf_r+0x156>
 800a284:	eba0 0308 	sub.w	r3, r0, r8
 800a288:	fa09 f303 	lsl.w	r3, r9, r3
 800a28c:	4313      	orrs	r3, r2
 800a28e:	9304      	str	r3, [sp, #16]
 800a290:	46a2      	mov	sl, r4
 800a292:	e7d2      	b.n	800a23a <_vfiprintf_r+0xe2>
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	1d19      	adds	r1, r3, #4
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	9103      	str	r1, [sp, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	bfbb      	ittet	lt
 800a2a0:	425b      	neglt	r3, r3
 800a2a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a2a6:	9307      	strge	r3, [sp, #28]
 800a2a8:	9307      	strlt	r3, [sp, #28]
 800a2aa:	bfb8      	it	lt
 800a2ac:	9204      	strlt	r2, [sp, #16]
 800a2ae:	7823      	ldrb	r3, [r4, #0]
 800a2b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a2b2:	d10c      	bne.n	800a2ce <_vfiprintf_r+0x176>
 800a2b4:	7863      	ldrb	r3, [r4, #1]
 800a2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b8:	d135      	bne.n	800a326 <_vfiprintf_r+0x1ce>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	1d1a      	adds	r2, r3, #4
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	9203      	str	r2, [sp, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bfb8      	it	lt
 800a2c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2ca:	3402      	adds	r4, #2
 800a2cc:	9305      	str	r3, [sp, #20]
 800a2ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3b4 <_vfiprintf_r+0x25c>
 800a2d2:	7821      	ldrb	r1, [r4, #0]
 800a2d4:	2203      	movs	r2, #3
 800a2d6:	4650      	mov	r0, sl
 800a2d8:	f7f5 ff9a 	bl	8000210 <memchr>
 800a2dc:	b140      	cbz	r0, 800a2f0 <_vfiprintf_r+0x198>
 800a2de:	2340      	movs	r3, #64	; 0x40
 800a2e0:	eba0 000a 	sub.w	r0, r0, sl
 800a2e4:	fa03 f000 	lsl.w	r0, r3, r0
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	4303      	orrs	r3, r0
 800a2ec:	3401      	adds	r4, #1
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f4:	482c      	ldr	r0, [pc, #176]	; (800a3a8 <_vfiprintf_r+0x250>)
 800a2f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2fa:	2206      	movs	r2, #6
 800a2fc:	f7f5 ff88 	bl	8000210 <memchr>
 800a300:	2800      	cmp	r0, #0
 800a302:	d03f      	beq.n	800a384 <_vfiprintf_r+0x22c>
 800a304:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <_vfiprintf_r+0x254>)
 800a306:	bb1b      	cbnz	r3, 800a350 <_vfiprintf_r+0x1f8>
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	3307      	adds	r3, #7
 800a30c:	f023 0307 	bic.w	r3, r3, #7
 800a310:	3308      	adds	r3, #8
 800a312:	9303      	str	r3, [sp, #12]
 800a314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a316:	443b      	add	r3, r7
 800a318:	9309      	str	r3, [sp, #36]	; 0x24
 800a31a:	e767      	b.n	800a1ec <_vfiprintf_r+0x94>
 800a31c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a320:	460c      	mov	r4, r1
 800a322:	2001      	movs	r0, #1
 800a324:	e7a5      	b.n	800a272 <_vfiprintf_r+0x11a>
 800a326:	2300      	movs	r3, #0
 800a328:	3401      	adds	r4, #1
 800a32a:	9305      	str	r3, [sp, #20]
 800a32c:	4619      	mov	r1, r3
 800a32e:	f04f 0c0a 	mov.w	ip, #10
 800a332:	4620      	mov	r0, r4
 800a334:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a338:	3a30      	subs	r2, #48	; 0x30
 800a33a:	2a09      	cmp	r2, #9
 800a33c:	d903      	bls.n	800a346 <_vfiprintf_r+0x1ee>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0c5      	beq.n	800a2ce <_vfiprintf_r+0x176>
 800a342:	9105      	str	r1, [sp, #20]
 800a344:	e7c3      	b.n	800a2ce <_vfiprintf_r+0x176>
 800a346:	fb0c 2101 	mla	r1, ip, r1, r2
 800a34a:	4604      	mov	r4, r0
 800a34c:	2301      	movs	r3, #1
 800a34e:	e7f0      	b.n	800a332 <_vfiprintf_r+0x1da>
 800a350:	ab03      	add	r3, sp, #12
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	462a      	mov	r2, r5
 800a356:	4b16      	ldr	r3, [pc, #88]	; (800a3b0 <_vfiprintf_r+0x258>)
 800a358:	a904      	add	r1, sp, #16
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7fc f83c 	bl	80063d8 <_printf_float>
 800a360:	4607      	mov	r7, r0
 800a362:	1c78      	adds	r0, r7, #1
 800a364:	d1d6      	bne.n	800a314 <_vfiprintf_r+0x1bc>
 800a366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a368:	07d9      	lsls	r1, r3, #31
 800a36a:	d405      	bmi.n	800a378 <_vfiprintf_r+0x220>
 800a36c:	89ab      	ldrh	r3, [r5, #12]
 800a36e:	059a      	lsls	r2, r3, #22
 800a370:	d402      	bmi.n	800a378 <_vfiprintf_r+0x220>
 800a372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a374:	f000 faa1 	bl	800a8ba <__retarget_lock_release_recursive>
 800a378:	89ab      	ldrh	r3, [r5, #12]
 800a37a:	065b      	lsls	r3, r3, #25
 800a37c:	f53f af12 	bmi.w	800a1a4 <_vfiprintf_r+0x4c>
 800a380:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a382:	e711      	b.n	800a1a8 <_vfiprintf_r+0x50>
 800a384:	ab03      	add	r3, sp, #12
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	462a      	mov	r2, r5
 800a38a:	4b09      	ldr	r3, [pc, #36]	; (800a3b0 <_vfiprintf_r+0x258>)
 800a38c:	a904      	add	r1, sp, #16
 800a38e:	4630      	mov	r0, r6
 800a390:	f7fc fac6 	bl	8006920 <_printf_i>
 800a394:	e7e4      	b.n	800a360 <_vfiprintf_r+0x208>
 800a396:	bf00      	nop
 800a398:	0800bddc 	.word	0x0800bddc
 800a39c:	0800bdfc 	.word	0x0800bdfc
 800a3a0:	0800bdbc 	.word	0x0800bdbc
 800a3a4:	0800bd6c 	.word	0x0800bd6c
 800a3a8:	0800bd76 	.word	0x0800bd76
 800a3ac:	080063d9 	.word	0x080063d9
 800a3b0:	0800a135 	.word	0x0800a135
 800a3b4:	0800bd72 	.word	0x0800bd72

0800a3b8 <__swbuf_r>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	460e      	mov	r6, r1
 800a3bc:	4614      	mov	r4, r2
 800a3be:	4605      	mov	r5, r0
 800a3c0:	b118      	cbz	r0, 800a3ca <__swbuf_r+0x12>
 800a3c2:	6983      	ldr	r3, [r0, #24]
 800a3c4:	b90b      	cbnz	r3, 800a3ca <__swbuf_r+0x12>
 800a3c6:	f000 f9d9 	bl	800a77c <__sinit>
 800a3ca:	4b21      	ldr	r3, [pc, #132]	; (800a450 <__swbuf_r+0x98>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	d12b      	bne.n	800a428 <__swbuf_r+0x70>
 800a3d0:	686c      	ldr	r4, [r5, #4]
 800a3d2:	69a3      	ldr	r3, [r4, #24]
 800a3d4:	60a3      	str	r3, [r4, #8]
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	071a      	lsls	r2, r3, #28
 800a3da:	d52f      	bpl.n	800a43c <__swbuf_r+0x84>
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	b36b      	cbz	r3, 800a43c <__swbuf_r+0x84>
 800a3e0:	6923      	ldr	r3, [r4, #16]
 800a3e2:	6820      	ldr	r0, [r4, #0]
 800a3e4:	1ac0      	subs	r0, r0, r3
 800a3e6:	6963      	ldr	r3, [r4, #20]
 800a3e8:	b2f6      	uxtb	r6, r6
 800a3ea:	4283      	cmp	r3, r0
 800a3ec:	4637      	mov	r7, r6
 800a3ee:	dc04      	bgt.n	800a3fa <__swbuf_r+0x42>
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 f92e 	bl	800a654 <_fflush_r>
 800a3f8:	bb30      	cbnz	r0, 800a448 <__swbuf_r+0x90>
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	6022      	str	r2, [r4, #0]
 800a406:	701e      	strb	r6, [r3, #0]
 800a408:	6963      	ldr	r3, [r4, #20]
 800a40a:	3001      	adds	r0, #1
 800a40c:	4283      	cmp	r3, r0
 800a40e:	d004      	beq.n	800a41a <__swbuf_r+0x62>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	07db      	lsls	r3, r3, #31
 800a414:	d506      	bpl.n	800a424 <__swbuf_r+0x6c>
 800a416:	2e0a      	cmp	r6, #10
 800a418:	d104      	bne.n	800a424 <__swbuf_r+0x6c>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4628      	mov	r0, r5
 800a41e:	f000 f919 	bl	800a654 <_fflush_r>
 800a422:	b988      	cbnz	r0, 800a448 <__swbuf_r+0x90>
 800a424:	4638      	mov	r0, r7
 800a426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <__swbuf_r+0x9c>)
 800a42a:	429c      	cmp	r4, r3
 800a42c:	d101      	bne.n	800a432 <__swbuf_r+0x7a>
 800a42e:	68ac      	ldr	r4, [r5, #8]
 800a430:	e7cf      	b.n	800a3d2 <__swbuf_r+0x1a>
 800a432:	4b09      	ldr	r3, [pc, #36]	; (800a458 <__swbuf_r+0xa0>)
 800a434:	429c      	cmp	r4, r3
 800a436:	bf08      	it	eq
 800a438:	68ec      	ldreq	r4, [r5, #12]
 800a43a:	e7ca      	b.n	800a3d2 <__swbuf_r+0x1a>
 800a43c:	4621      	mov	r1, r4
 800a43e:	4628      	mov	r0, r5
 800a440:	f000 f80c 	bl	800a45c <__swsetup_r>
 800a444:	2800      	cmp	r0, #0
 800a446:	d0cb      	beq.n	800a3e0 <__swbuf_r+0x28>
 800a448:	f04f 37ff 	mov.w	r7, #4294967295
 800a44c:	e7ea      	b.n	800a424 <__swbuf_r+0x6c>
 800a44e:	bf00      	nop
 800a450:	0800bddc 	.word	0x0800bddc
 800a454:	0800bdfc 	.word	0x0800bdfc
 800a458:	0800bdbc 	.word	0x0800bdbc

0800a45c <__swsetup_r>:
 800a45c:	4b32      	ldr	r3, [pc, #200]	; (800a528 <__swsetup_r+0xcc>)
 800a45e:	b570      	push	{r4, r5, r6, lr}
 800a460:	681d      	ldr	r5, [r3, #0]
 800a462:	4606      	mov	r6, r0
 800a464:	460c      	mov	r4, r1
 800a466:	b125      	cbz	r5, 800a472 <__swsetup_r+0x16>
 800a468:	69ab      	ldr	r3, [r5, #24]
 800a46a:	b913      	cbnz	r3, 800a472 <__swsetup_r+0x16>
 800a46c:	4628      	mov	r0, r5
 800a46e:	f000 f985 	bl	800a77c <__sinit>
 800a472:	4b2e      	ldr	r3, [pc, #184]	; (800a52c <__swsetup_r+0xd0>)
 800a474:	429c      	cmp	r4, r3
 800a476:	d10f      	bne.n	800a498 <__swsetup_r+0x3c>
 800a478:	686c      	ldr	r4, [r5, #4]
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a480:	0719      	lsls	r1, r3, #28
 800a482:	d42c      	bmi.n	800a4de <__swsetup_r+0x82>
 800a484:	06dd      	lsls	r5, r3, #27
 800a486:	d411      	bmi.n	800a4ac <__swsetup_r+0x50>
 800a488:	2309      	movs	r3, #9
 800a48a:	6033      	str	r3, [r6, #0]
 800a48c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	f04f 30ff 	mov.w	r0, #4294967295
 800a496:	e03e      	b.n	800a516 <__swsetup_r+0xba>
 800a498:	4b25      	ldr	r3, [pc, #148]	; (800a530 <__swsetup_r+0xd4>)
 800a49a:	429c      	cmp	r4, r3
 800a49c:	d101      	bne.n	800a4a2 <__swsetup_r+0x46>
 800a49e:	68ac      	ldr	r4, [r5, #8]
 800a4a0:	e7eb      	b.n	800a47a <__swsetup_r+0x1e>
 800a4a2:	4b24      	ldr	r3, [pc, #144]	; (800a534 <__swsetup_r+0xd8>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	bf08      	it	eq
 800a4a8:	68ec      	ldreq	r4, [r5, #12]
 800a4aa:	e7e6      	b.n	800a47a <__swsetup_r+0x1e>
 800a4ac:	0758      	lsls	r0, r3, #29
 800a4ae:	d512      	bpl.n	800a4d6 <__swsetup_r+0x7a>
 800a4b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4b2:	b141      	cbz	r1, 800a4c6 <__swsetup_r+0x6a>
 800a4b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b8:	4299      	cmp	r1, r3
 800a4ba:	d002      	beq.n	800a4c2 <__swsetup_r+0x66>
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f7ff fb25 	bl	8009b0c <_free_r>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4cc:	81a3      	strh	r3, [r4, #12]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	6063      	str	r3, [r4, #4]
 800a4d2:	6923      	ldr	r3, [r4, #16]
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	89a3      	ldrh	r3, [r4, #12]
 800a4d8:	f043 0308 	orr.w	r3, r3, #8
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	6923      	ldr	r3, [r4, #16]
 800a4e0:	b94b      	cbnz	r3, 800a4f6 <__swsetup_r+0x9a>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ec:	d003      	beq.n	800a4f6 <__swsetup_r+0x9a>
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f000 fa09 	bl	800a908 <__smakebuf_r>
 800a4f6:	89a0      	ldrh	r0, [r4, #12]
 800a4f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4fc:	f010 0301 	ands.w	r3, r0, #1
 800a500:	d00a      	beq.n	800a518 <__swsetup_r+0xbc>
 800a502:	2300      	movs	r3, #0
 800a504:	60a3      	str	r3, [r4, #8]
 800a506:	6963      	ldr	r3, [r4, #20]
 800a508:	425b      	negs	r3, r3
 800a50a:	61a3      	str	r3, [r4, #24]
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	b943      	cbnz	r3, 800a522 <__swsetup_r+0xc6>
 800a510:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a514:	d1ba      	bne.n	800a48c <__swsetup_r+0x30>
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	0781      	lsls	r1, r0, #30
 800a51a:	bf58      	it	pl
 800a51c:	6963      	ldrpl	r3, [r4, #20]
 800a51e:	60a3      	str	r3, [r4, #8]
 800a520:	e7f4      	b.n	800a50c <__swsetup_r+0xb0>
 800a522:	2000      	movs	r0, #0
 800a524:	e7f7      	b.n	800a516 <__swsetup_r+0xba>
 800a526:	bf00      	nop
 800a528:	20000030 	.word	0x20000030
 800a52c:	0800bddc 	.word	0x0800bddc
 800a530:	0800bdfc 	.word	0x0800bdfc
 800a534:	0800bdbc 	.word	0x0800bdbc

0800a538 <abort>:
 800a538:	b508      	push	{r3, lr}
 800a53a:	2006      	movs	r0, #6
 800a53c:	f000 fa54 	bl	800a9e8 <raise>
 800a540:	2001      	movs	r0, #1
 800a542:	f7f8 fa8b 	bl	8002a5c <_exit>
	...

0800a548 <__sflush_r>:
 800a548:	898a      	ldrh	r2, [r1, #12]
 800a54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54e:	4605      	mov	r5, r0
 800a550:	0710      	lsls	r0, r2, #28
 800a552:	460c      	mov	r4, r1
 800a554:	d458      	bmi.n	800a608 <__sflush_r+0xc0>
 800a556:	684b      	ldr	r3, [r1, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dc05      	bgt.n	800a568 <__sflush_r+0x20>
 800a55c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dc02      	bgt.n	800a568 <__sflush_r+0x20>
 800a562:	2000      	movs	r0, #0
 800a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a56a:	2e00      	cmp	r6, #0
 800a56c:	d0f9      	beq.n	800a562 <__sflush_r+0x1a>
 800a56e:	2300      	movs	r3, #0
 800a570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a574:	682f      	ldr	r7, [r5, #0]
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	d032      	beq.n	800a5e0 <__sflush_r+0x98>
 800a57a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	075a      	lsls	r2, r3, #29
 800a580:	d505      	bpl.n	800a58e <__sflush_r+0x46>
 800a582:	6863      	ldr	r3, [r4, #4]
 800a584:	1ac0      	subs	r0, r0, r3
 800a586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a588:	b10b      	cbz	r3, 800a58e <__sflush_r+0x46>
 800a58a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a58c:	1ac0      	subs	r0, r0, r3
 800a58e:	2300      	movs	r3, #0
 800a590:	4602      	mov	r2, r0
 800a592:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a594:	6a21      	ldr	r1, [r4, #32]
 800a596:	4628      	mov	r0, r5
 800a598:	47b0      	blx	r6
 800a59a:	1c43      	adds	r3, r0, #1
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	d106      	bne.n	800a5ae <__sflush_r+0x66>
 800a5a0:	6829      	ldr	r1, [r5, #0]
 800a5a2:	291d      	cmp	r1, #29
 800a5a4:	d82c      	bhi.n	800a600 <__sflush_r+0xb8>
 800a5a6:	4a2a      	ldr	r2, [pc, #168]	; (800a650 <__sflush_r+0x108>)
 800a5a8:	40ca      	lsrs	r2, r1
 800a5aa:	07d6      	lsls	r6, r2, #31
 800a5ac:	d528      	bpl.n	800a600 <__sflush_r+0xb8>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	6062      	str	r2, [r4, #4]
 800a5b2:	04d9      	lsls	r1, r3, #19
 800a5b4:	6922      	ldr	r2, [r4, #16]
 800a5b6:	6022      	str	r2, [r4, #0]
 800a5b8:	d504      	bpl.n	800a5c4 <__sflush_r+0x7c>
 800a5ba:	1c42      	adds	r2, r0, #1
 800a5bc:	d101      	bne.n	800a5c2 <__sflush_r+0x7a>
 800a5be:	682b      	ldr	r3, [r5, #0]
 800a5c0:	b903      	cbnz	r3, 800a5c4 <__sflush_r+0x7c>
 800a5c2:	6560      	str	r0, [r4, #84]	; 0x54
 800a5c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5c6:	602f      	str	r7, [r5, #0]
 800a5c8:	2900      	cmp	r1, #0
 800a5ca:	d0ca      	beq.n	800a562 <__sflush_r+0x1a>
 800a5cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	d002      	beq.n	800a5da <__sflush_r+0x92>
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f7ff fa99 	bl	8009b0c <_free_r>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	6360      	str	r0, [r4, #52]	; 0x34
 800a5de:	e7c1      	b.n	800a564 <__sflush_r+0x1c>
 800a5e0:	6a21      	ldr	r1, [r4, #32]
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47b0      	blx	r6
 800a5e8:	1c41      	adds	r1, r0, #1
 800a5ea:	d1c7      	bne.n	800a57c <__sflush_r+0x34>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0c4      	beq.n	800a57c <__sflush_r+0x34>
 800a5f2:	2b1d      	cmp	r3, #29
 800a5f4:	d001      	beq.n	800a5fa <__sflush_r+0xb2>
 800a5f6:	2b16      	cmp	r3, #22
 800a5f8:	d101      	bne.n	800a5fe <__sflush_r+0xb6>
 800a5fa:	602f      	str	r7, [r5, #0]
 800a5fc:	e7b1      	b.n	800a562 <__sflush_r+0x1a>
 800a5fe:	89a3      	ldrh	r3, [r4, #12]
 800a600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	e7ad      	b.n	800a564 <__sflush_r+0x1c>
 800a608:	690f      	ldr	r7, [r1, #16]
 800a60a:	2f00      	cmp	r7, #0
 800a60c:	d0a9      	beq.n	800a562 <__sflush_r+0x1a>
 800a60e:	0793      	lsls	r3, r2, #30
 800a610:	680e      	ldr	r6, [r1, #0]
 800a612:	bf08      	it	eq
 800a614:	694b      	ldreq	r3, [r1, #20]
 800a616:	600f      	str	r7, [r1, #0]
 800a618:	bf18      	it	ne
 800a61a:	2300      	movne	r3, #0
 800a61c:	eba6 0807 	sub.w	r8, r6, r7
 800a620:	608b      	str	r3, [r1, #8]
 800a622:	f1b8 0f00 	cmp.w	r8, #0
 800a626:	dd9c      	ble.n	800a562 <__sflush_r+0x1a>
 800a628:	6a21      	ldr	r1, [r4, #32]
 800a62a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a62c:	4643      	mov	r3, r8
 800a62e:	463a      	mov	r2, r7
 800a630:	4628      	mov	r0, r5
 800a632:	47b0      	blx	r6
 800a634:	2800      	cmp	r0, #0
 800a636:	dc06      	bgt.n	800a646 <__sflush_r+0xfe>
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	e78e      	b.n	800a564 <__sflush_r+0x1c>
 800a646:	4407      	add	r7, r0
 800a648:	eba8 0800 	sub.w	r8, r8, r0
 800a64c:	e7e9      	b.n	800a622 <__sflush_r+0xda>
 800a64e:	bf00      	nop
 800a650:	20400001 	.word	0x20400001

0800a654 <_fflush_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	690b      	ldr	r3, [r1, #16]
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	b913      	cbnz	r3, 800a664 <_fflush_r+0x10>
 800a65e:	2500      	movs	r5, #0
 800a660:	4628      	mov	r0, r5
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	b118      	cbz	r0, 800a66e <_fflush_r+0x1a>
 800a666:	6983      	ldr	r3, [r0, #24]
 800a668:	b90b      	cbnz	r3, 800a66e <_fflush_r+0x1a>
 800a66a:	f000 f887 	bl	800a77c <__sinit>
 800a66e:	4b14      	ldr	r3, [pc, #80]	; (800a6c0 <_fflush_r+0x6c>)
 800a670:	429c      	cmp	r4, r3
 800a672:	d11b      	bne.n	800a6ac <_fflush_r+0x58>
 800a674:	686c      	ldr	r4, [r5, #4]
 800a676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0ef      	beq.n	800a65e <_fflush_r+0xa>
 800a67e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a680:	07d0      	lsls	r0, r2, #31
 800a682:	d404      	bmi.n	800a68e <_fflush_r+0x3a>
 800a684:	0599      	lsls	r1, r3, #22
 800a686:	d402      	bmi.n	800a68e <_fflush_r+0x3a>
 800a688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a68a:	f000 f915 	bl	800a8b8 <__retarget_lock_acquire_recursive>
 800a68e:	4628      	mov	r0, r5
 800a690:	4621      	mov	r1, r4
 800a692:	f7ff ff59 	bl	800a548 <__sflush_r>
 800a696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a698:	07da      	lsls	r2, r3, #31
 800a69a:	4605      	mov	r5, r0
 800a69c:	d4e0      	bmi.n	800a660 <_fflush_r+0xc>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	059b      	lsls	r3, r3, #22
 800a6a2:	d4dd      	bmi.n	800a660 <_fflush_r+0xc>
 800a6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6a6:	f000 f908 	bl	800a8ba <__retarget_lock_release_recursive>
 800a6aa:	e7d9      	b.n	800a660 <_fflush_r+0xc>
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <_fflush_r+0x70>)
 800a6ae:	429c      	cmp	r4, r3
 800a6b0:	d101      	bne.n	800a6b6 <_fflush_r+0x62>
 800a6b2:	68ac      	ldr	r4, [r5, #8]
 800a6b4:	e7df      	b.n	800a676 <_fflush_r+0x22>
 800a6b6:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <_fflush_r+0x74>)
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	bf08      	it	eq
 800a6bc:	68ec      	ldreq	r4, [r5, #12]
 800a6be:	e7da      	b.n	800a676 <_fflush_r+0x22>
 800a6c0:	0800bddc 	.word	0x0800bddc
 800a6c4:	0800bdfc 	.word	0x0800bdfc
 800a6c8:	0800bdbc 	.word	0x0800bdbc

0800a6cc <std>:
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	b510      	push	{r4, lr}
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a6d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6da:	6083      	str	r3, [r0, #8]
 800a6dc:	8181      	strh	r1, [r0, #12]
 800a6de:	6643      	str	r3, [r0, #100]	; 0x64
 800a6e0:	81c2      	strh	r2, [r0, #14]
 800a6e2:	6183      	str	r3, [r0, #24]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	2208      	movs	r2, #8
 800a6e8:	305c      	adds	r0, #92	; 0x5c
 800a6ea:	f7fb fdcd 	bl	8006288 <memset>
 800a6ee:	4b05      	ldr	r3, [pc, #20]	; (800a704 <std+0x38>)
 800a6f0:	6263      	str	r3, [r4, #36]	; 0x24
 800a6f2:	4b05      	ldr	r3, [pc, #20]	; (800a708 <std+0x3c>)
 800a6f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6f6:	4b05      	ldr	r3, [pc, #20]	; (800a70c <std+0x40>)
 800a6f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6fa:	4b05      	ldr	r3, [pc, #20]	; (800a710 <std+0x44>)
 800a6fc:	6224      	str	r4, [r4, #32]
 800a6fe:	6323      	str	r3, [r4, #48]	; 0x30
 800a700:	bd10      	pop	{r4, pc}
 800a702:	bf00      	nop
 800a704:	0800aa21 	.word	0x0800aa21
 800a708:	0800aa43 	.word	0x0800aa43
 800a70c:	0800aa7b 	.word	0x0800aa7b
 800a710:	0800aa9f 	.word	0x0800aa9f

0800a714 <_cleanup_r>:
 800a714:	4901      	ldr	r1, [pc, #4]	; (800a71c <_cleanup_r+0x8>)
 800a716:	f000 b8af 	b.w	800a878 <_fwalk_reent>
 800a71a:	bf00      	nop
 800a71c:	0800a655 	.word	0x0800a655

0800a720 <__sfmoreglue>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	2268      	movs	r2, #104	; 0x68
 800a724:	1e4d      	subs	r5, r1, #1
 800a726:	4355      	muls	r5, r2
 800a728:	460e      	mov	r6, r1
 800a72a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a72e:	f7ff fa59 	bl	8009be4 <_malloc_r>
 800a732:	4604      	mov	r4, r0
 800a734:	b140      	cbz	r0, 800a748 <__sfmoreglue+0x28>
 800a736:	2100      	movs	r1, #0
 800a738:	e9c0 1600 	strd	r1, r6, [r0]
 800a73c:	300c      	adds	r0, #12
 800a73e:	60a0      	str	r0, [r4, #8]
 800a740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a744:	f7fb fda0 	bl	8006288 <memset>
 800a748:	4620      	mov	r0, r4
 800a74a:	bd70      	pop	{r4, r5, r6, pc}

0800a74c <__sfp_lock_acquire>:
 800a74c:	4801      	ldr	r0, [pc, #4]	; (800a754 <__sfp_lock_acquire+0x8>)
 800a74e:	f000 b8b3 	b.w	800a8b8 <__retarget_lock_acquire_recursive>
 800a752:	bf00      	nop
 800a754:	200007dd 	.word	0x200007dd

0800a758 <__sfp_lock_release>:
 800a758:	4801      	ldr	r0, [pc, #4]	; (800a760 <__sfp_lock_release+0x8>)
 800a75a:	f000 b8ae 	b.w	800a8ba <__retarget_lock_release_recursive>
 800a75e:	bf00      	nop
 800a760:	200007dd 	.word	0x200007dd

0800a764 <__sinit_lock_acquire>:
 800a764:	4801      	ldr	r0, [pc, #4]	; (800a76c <__sinit_lock_acquire+0x8>)
 800a766:	f000 b8a7 	b.w	800a8b8 <__retarget_lock_acquire_recursive>
 800a76a:	bf00      	nop
 800a76c:	200007de 	.word	0x200007de

0800a770 <__sinit_lock_release>:
 800a770:	4801      	ldr	r0, [pc, #4]	; (800a778 <__sinit_lock_release+0x8>)
 800a772:	f000 b8a2 	b.w	800a8ba <__retarget_lock_release_recursive>
 800a776:	bf00      	nop
 800a778:	200007de 	.word	0x200007de

0800a77c <__sinit>:
 800a77c:	b510      	push	{r4, lr}
 800a77e:	4604      	mov	r4, r0
 800a780:	f7ff fff0 	bl	800a764 <__sinit_lock_acquire>
 800a784:	69a3      	ldr	r3, [r4, #24]
 800a786:	b11b      	cbz	r3, 800a790 <__sinit+0x14>
 800a788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a78c:	f7ff bff0 	b.w	800a770 <__sinit_lock_release>
 800a790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a794:	6523      	str	r3, [r4, #80]	; 0x50
 800a796:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <__sinit+0x68>)
 800a798:	4a13      	ldr	r2, [pc, #76]	; (800a7e8 <__sinit+0x6c>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a79e:	42a3      	cmp	r3, r4
 800a7a0:	bf04      	itt	eq
 800a7a2:	2301      	moveq	r3, #1
 800a7a4:	61a3      	streq	r3, [r4, #24]
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 f820 	bl	800a7ec <__sfp>
 800a7ac:	6060      	str	r0, [r4, #4]
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 f81c 	bl	800a7ec <__sfp>
 800a7b4:	60a0      	str	r0, [r4, #8]
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 f818 	bl	800a7ec <__sfp>
 800a7bc:	2200      	movs	r2, #0
 800a7be:	60e0      	str	r0, [r4, #12]
 800a7c0:	2104      	movs	r1, #4
 800a7c2:	6860      	ldr	r0, [r4, #4]
 800a7c4:	f7ff ff82 	bl	800a6cc <std>
 800a7c8:	68a0      	ldr	r0, [r4, #8]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	2109      	movs	r1, #9
 800a7ce:	f7ff ff7d 	bl	800a6cc <std>
 800a7d2:	68e0      	ldr	r0, [r4, #12]
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	2112      	movs	r1, #18
 800a7d8:	f7ff ff78 	bl	800a6cc <std>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	61a3      	str	r3, [r4, #24]
 800a7e0:	e7d2      	b.n	800a788 <__sinit+0xc>
 800a7e2:	bf00      	nop
 800a7e4:	0800b978 	.word	0x0800b978
 800a7e8:	0800a715 	.word	0x0800a715

0800a7ec <__sfp>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	f7ff ffac 	bl	800a74c <__sfp_lock_acquire>
 800a7f4:	4b1e      	ldr	r3, [pc, #120]	; (800a870 <__sfp+0x84>)
 800a7f6:	681e      	ldr	r6, [r3, #0]
 800a7f8:	69b3      	ldr	r3, [r6, #24]
 800a7fa:	b913      	cbnz	r3, 800a802 <__sfp+0x16>
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f7ff ffbd 	bl	800a77c <__sinit>
 800a802:	3648      	adds	r6, #72	; 0x48
 800a804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a808:	3b01      	subs	r3, #1
 800a80a:	d503      	bpl.n	800a814 <__sfp+0x28>
 800a80c:	6833      	ldr	r3, [r6, #0]
 800a80e:	b30b      	cbz	r3, 800a854 <__sfp+0x68>
 800a810:	6836      	ldr	r6, [r6, #0]
 800a812:	e7f7      	b.n	800a804 <__sfp+0x18>
 800a814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a818:	b9d5      	cbnz	r5, 800a850 <__sfp+0x64>
 800a81a:	4b16      	ldr	r3, [pc, #88]	; (800a874 <__sfp+0x88>)
 800a81c:	60e3      	str	r3, [r4, #12]
 800a81e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a822:	6665      	str	r5, [r4, #100]	; 0x64
 800a824:	f000 f847 	bl	800a8b6 <__retarget_lock_init_recursive>
 800a828:	f7ff ff96 	bl	800a758 <__sfp_lock_release>
 800a82c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a834:	6025      	str	r5, [r4, #0]
 800a836:	61a5      	str	r5, [r4, #24]
 800a838:	2208      	movs	r2, #8
 800a83a:	4629      	mov	r1, r5
 800a83c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a840:	f7fb fd22 	bl	8006288 <memset>
 800a844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a84c:	4620      	mov	r0, r4
 800a84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a850:	3468      	adds	r4, #104	; 0x68
 800a852:	e7d9      	b.n	800a808 <__sfp+0x1c>
 800a854:	2104      	movs	r1, #4
 800a856:	4638      	mov	r0, r7
 800a858:	f7ff ff62 	bl	800a720 <__sfmoreglue>
 800a85c:	4604      	mov	r4, r0
 800a85e:	6030      	str	r0, [r6, #0]
 800a860:	2800      	cmp	r0, #0
 800a862:	d1d5      	bne.n	800a810 <__sfp+0x24>
 800a864:	f7ff ff78 	bl	800a758 <__sfp_lock_release>
 800a868:	230c      	movs	r3, #12
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	e7ee      	b.n	800a84c <__sfp+0x60>
 800a86e:	bf00      	nop
 800a870:	0800b978 	.word	0x0800b978
 800a874:	ffff0001 	.word	0xffff0001

0800a878 <_fwalk_reent>:
 800a878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a87c:	4606      	mov	r6, r0
 800a87e:	4688      	mov	r8, r1
 800a880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a884:	2700      	movs	r7, #0
 800a886:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a88a:	f1b9 0901 	subs.w	r9, r9, #1
 800a88e:	d505      	bpl.n	800a89c <_fwalk_reent+0x24>
 800a890:	6824      	ldr	r4, [r4, #0]
 800a892:	2c00      	cmp	r4, #0
 800a894:	d1f7      	bne.n	800a886 <_fwalk_reent+0xe>
 800a896:	4638      	mov	r0, r7
 800a898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89c:	89ab      	ldrh	r3, [r5, #12]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d907      	bls.n	800a8b2 <_fwalk_reent+0x3a>
 800a8a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	d003      	beq.n	800a8b2 <_fwalk_reent+0x3a>
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	47c0      	blx	r8
 800a8b0:	4307      	orrs	r7, r0
 800a8b2:	3568      	adds	r5, #104	; 0x68
 800a8b4:	e7e9      	b.n	800a88a <_fwalk_reent+0x12>

0800a8b6 <__retarget_lock_init_recursive>:
 800a8b6:	4770      	bx	lr

0800a8b8 <__retarget_lock_acquire_recursive>:
 800a8b8:	4770      	bx	lr

0800a8ba <__retarget_lock_release_recursive>:
 800a8ba:	4770      	bx	lr

0800a8bc <__swhatbuf_r>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	460e      	mov	r6, r1
 800a8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c4:	2900      	cmp	r1, #0
 800a8c6:	b096      	sub	sp, #88	; 0x58
 800a8c8:	4614      	mov	r4, r2
 800a8ca:	461d      	mov	r5, r3
 800a8cc:	da08      	bge.n	800a8e0 <__swhatbuf_r+0x24>
 800a8ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	602a      	str	r2, [r5, #0]
 800a8d6:	061a      	lsls	r2, r3, #24
 800a8d8:	d410      	bmi.n	800a8fc <__swhatbuf_r+0x40>
 800a8da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8de:	e00e      	b.n	800a8fe <__swhatbuf_r+0x42>
 800a8e0:	466a      	mov	r2, sp
 800a8e2:	f000 f903 	bl	800aaec <_fstat_r>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	dbf1      	blt.n	800a8ce <__swhatbuf_r+0x12>
 800a8ea:	9a01      	ldr	r2, [sp, #4]
 800a8ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8f4:	425a      	negs	r2, r3
 800a8f6:	415a      	adcs	r2, r3
 800a8f8:	602a      	str	r2, [r5, #0]
 800a8fa:	e7ee      	b.n	800a8da <__swhatbuf_r+0x1e>
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	2000      	movs	r0, #0
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	b016      	add	sp, #88	; 0x58
 800a904:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a908 <__smakebuf_r>:
 800a908:	898b      	ldrh	r3, [r1, #12]
 800a90a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a90c:	079d      	lsls	r5, r3, #30
 800a90e:	4606      	mov	r6, r0
 800a910:	460c      	mov	r4, r1
 800a912:	d507      	bpl.n	800a924 <__smakebuf_r+0x1c>
 800a914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	6123      	str	r3, [r4, #16]
 800a91c:	2301      	movs	r3, #1
 800a91e:	6163      	str	r3, [r4, #20]
 800a920:	b002      	add	sp, #8
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	ab01      	add	r3, sp, #4
 800a926:	466a      	mov	r2, sp
 800a928:	f7ff ffc8 	bl	800a8bc <__swhatbuf_r>
 800a92c:	9900      	ldr	r1, [sp, #0]
 800a92e:	4605      	mov	r5, r0
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff f957 	bl	8009be4 <_malloc_r>
 800a936:	b948      	cbnz	r0, 800a94c <__smakebuf_r+0x44>
 800a938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93c:	059a      	lsls	r2, r3, #22
 800a93e:	d4ef      	bmi.n	800a920 <__smakebuf_r+0x18>
 800a940:	f023 0303 	bic.w	r3, r3, #3
 800a944:	f043 0302 	orr.w	r3, r3, #2
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	e7e3      	b.n	800a914 <__smakebuf_r+0xc>
 800a94c:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <__smakebuf_r+0x7c>)
 800a94e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a950:	89a3      	ldrh	r3, [r4, #12]
 800a952:	6020      	str	r0, [r4, #0]
 800a954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	9b00      	ldr	r3, [sp, #0]
 800a95c:	6163      	str	r3, [r4, #20]
 800a95e:	9b01      	ldr	r3, [sp, #4]
 800a960:	6120      	str	r0, [r4, #16]
 800a962:	b15b      	cbz	r3, 800a97c <__smakebuf_r+0x74>
 800a964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 f8d1 	bl	800ab10 <_isatty_r>
 800a96e:	b128      	cbz	r0, 800a97c <__smakebuf_r+0x74>
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	f023 0303 	bic.w	r3, r3, #3
 800a976:	f043 0301 	orr.w	r3, r3, #1
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	89a0      	ldrh	r0, [r4, #12]
 800a97e:	4305      	orrs	r5, r0
 800a980:	81a5      	strh	r5, [r4, #12]
 800a982:	e7cd      	b.n	800a920 <__smakebuf_r+0x18>
 800a984:	0800a715 	.word	0x0800a715

0800a988 <_malloc_usable_size_r>:
 800a988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a98c:	1f18      	subs	r0, r3, #4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bfbc      	itt	lt
 800a992:	580b      	ldrlt	r3, [r1, r0]
 800a994:	18c0      	addlt	r0, r0, r3
 800a996:	4770      	bx	lr

0800a998 <_raise_r>:
 800a998:	291f      	cmp	r1, #31
 800a99a:	b538      	push	{r3, r4, r5, lr}
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	d904      	bls.n	800a9ac <_raise_r+0x14>
 800a9a2:	2316      	movs	r3, #22
 800a9a4:	6003      	str	r3, [r0, #0]
 800a9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9ae:	b112      	cbz	r2, 800a9b6 <_raise_r+0x1e>
 800a9b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9b4:	b94b      	cbnz	r3, 800a9ca <_raise_r+0x32>
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 f830 	bl	800aa1c <_getpid_r>
 800a9bc:	462a      	mov	r2, r5
 800a9be:	4601      	mov	r1, r0
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c6:	f000 b817 	b.w	800a9f8 <_kill_r>
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d00a      	beq.n	800a9e4 <_raise_r+0x4c>
 800a9ce:	1c59      	adds	r1, r3, #1
 800a9d0:	d103      	bne.n	800a9da <_raise_r+0x42>
 800a9d2:	2316      	movs	r3, #22
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	e7e7      	b.n	800a9aa <_raise_r+0x12>
 800a9da:	2400      	movs	r4, #0
 800a9dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	4798      	blx	r3
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e7e0      	b.n	800a9aa <_raise_r+0x12>

0800a9e8 <raise>:
 800a9e8:	4b02      	ldr	r3, [pc, #8]	; (800a9f4 <raise+0xc>)
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	f7ff bfd3 	b.w	800a998 <_raise_r>
 800a9f2:	bf00      	nop
 800a9f4:	20000030 	.word	0x20000030

0800a9f8 <_kill_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d07      	ldr	r5, [pc, #28]	; (800aa18 <_kill_r+0x20>)
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4604      	mov	r4, r0
 800aa00:	4608      	mov	r0, r1
 800aa02:	4611      	mov	r1, r2
 800aa04:	602b      	str	r3, [r5, #0]
 800aa06:	f7f8 f819 	bl	8002a3c <_kill>
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	d102      	bne.n	800aa14 <_kill_r+0x1c>
 800aa0e:	682b      	ldr	r3, [r5, #0]
 800aa10:	b103      	cbz	r3, 800aa14 <_kill_r+0x1c>
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	bd38      	pop	{r3, r4, r5, pc}
 800aa16:	bf00      	nop
 800aa18:	200007d8 	.word	0x200007d8

0800aa1c <_getpid_r>:
 800aa1c:	f7f8 b806 	b.w	8002a2c <_getpid>

0800aa20 <__sread>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	460c      	mov	r4, r1
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	f000 f894 	bl	800ab54 <_read_r>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	bfab      	itete	ge
 800aa30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa32:	89a3      	ldrhlt	r3, [r4, #12]
 800aa34:	181b      	addge	r3, r3, r0
 800aa36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa3a:	bfac      	ite	ge
 800aa3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa3e:	81a3      	strhlt	r3, [r4, #12]
 800aa40:	bd10      	pop	{r4, pc}

0800aa42 <__swrite>:
 800aa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	461f      	mov	r7, r3
 800aa48:	898b      	ldrh	r3, [r1, #12]
 800aa4a:	05db      	lsls	r3, r3, #23
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	4616      	mov	r6, r2
 800aa52:	d505      	bpl.n	800aa60 <__swrite+0x1e>
 800aa54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa58:	2302      	movs	r3, #2
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f000 f868 	bl	800ab30 <_lseek_r>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa6a:	81a3      	strh	r3, [r4, #12]
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	463b      	mov	r3, r7
 800aa70:	4628      	mov	r0, r5
 800aa72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa76:	f000 b817 	b.w	800aaa8 <_write_r>

0800aa7a <__sseek>:
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa82:	f000 f855 	bl	800ab30 <_lseek_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	bf15      	itete	ne
 800aa8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa96:	81a3      	strheq	r3, [r4, #12]
 800aa98:	bf18      	it	ne
 800aa9a:	81a3      	strhne	r3, [r4, #12]
 800aa9c:	bd10      	pop	{r4, pc}

0800aa9e <__sclose>:
 800aa9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa2:	f000 b813 	b.w	800aacc <_close_r>
	...

0800aaa8 <_write_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d07      	ldr	r5, [pc, #28]	; (800aac8 <_write_r+0x20>)
 800aaac:	4604      	mov	r4, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7f7 fff7 	bl	8002aaa <_write>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_write_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_write_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	200007d8 	.word	0x200007d8

0800aacc <_close_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d06      	ldr	r5, [pc, #24]	; (800aae8 <_close_r+0x1c>)
 800aad0:	2300      	movs	r3, #0
 800aad2:	4604      	mov	r4, r0
 800aad4:	4608      	mov	r0, r1
 800aad6:	602b      	str	r3, [r5, #0]
 800aad8:	f7f8 f803 	bl	8002ae2 <_close>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	d102      	bne.n	800aae6 <_close_r+0x1a>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	b103      	cbz	r3, 800aae6 <_close_r+0x1a>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	200007d8 	.word	0x200007d8

0800aaec <_fstat_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4d07      	ldr	r5, [pc, #28]	; (800ab0c <_fstat_r+0x20>)
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	602b      	str	r3, [r5, #0]
 800aafa:	f7f7 fffe 	bl	8002afa <_fstat>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	d102      	bne.n	800ab08 <_fstat_r+0x1c>
 800ab02:	682b      	ldr	r3, [r5, #0]
 800ab04:	b103      	cbz	r3, 800ab08 <_fstat_r+0x1c>
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	bd38      	pop	{r3, r4, r5, pc}
 800ab0a:	bf00      	nop
 800ab0c:	200007d8 	.word	0x200007d8

0800ab10 <_isatty_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d06      	ldr	r5, [pc, #24]	; (800ab2c <_isatty_r+0x1c>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4604      	mov	r4, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	f7f7 fffd 	bl	8002b1a <_isatty>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_isatty_r+0x1a>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_isatty_r+0x1a>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	200007d8 	.word	0x200007d8

0800ab30 <_lseek_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d07      	ldr	r5, [pc, #28]	; (800ab50 <_lseek_r+0x20>)
 800ab34:	4604      	mov	r4, r0
 800ab36:	4608      	mov	r0, r1
 800ab38:	4611      	mov	r1, r2
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	602a      	str	r2, [r5, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f7f7 fff6 	bl	8002b30 <_lseek>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_lseek_r+0x1e>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_lseek_r+0x1e>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	200007d8 	.word	0x200007d8

0800ab54 <_read_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4d07      	ldr	r5, [pc, #28]	; (800ab74 <_read_r+0x20>)
 800ab58:	4604      	mov	r4, r0
 800ab5a:	4608      	mov	r0, r1
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	602a      	str	r2, [r5, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f7f7 ff84 	bl	8002a70 <_read>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_read_r+0x1e>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_read_r+0x1e>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	200007d8 	.word	0x200007d8

0800ab78 <_init>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	bf00      	nop
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr

0800ab84 <_fini>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr
